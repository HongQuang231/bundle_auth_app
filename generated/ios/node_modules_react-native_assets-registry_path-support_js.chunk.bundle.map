{"version":3,"file":"node_modules_react-native_assets-registry_path-support_js.chunk.bundle","mappings":"oKAcA,IAAMA,EAAqB,CACzB,IAAQ,OACR,EAAK,OACL,IAAO,OACP,EAAK,QACL,EAAK,SACL,EAAK,WAGDC,EAAuB,IAmB7B,IAAMC,EAAoB,IAAIC,IAAI,CAChC,MACA,OACA,MACA,MACA,MACA,MACA,OACA,QAgCF,SAASC,EAAYC,GACnB,IAAMC,EAAWD,EAAME,mBACvB,OAAOD,EAASE,WAAW,KAAOF,EAASG,MAAM,GAAKH,CACxD,CAEAI,EAAOC,QAAU,CACfC,6BAnCF,SACEP,EACAQ,GAEA,IAAKX,EAAkBY,IAAIT,EAAMU,MAC/B,MAAO,MAET,IAAMC,EA/BR,SAA+BH,GAC7B,GAAIA,EAAMI,aAAcjB,EACtB,OAAOA,EAAmBa,EAAMI,YAIlC,GAAIC,OAAOC,SAASN,IAAUA,EAAQ,EACpC,OAAOO,KAAKC,MAAMR,EAAQZ,GAAwB,MAEpD,MAAM,IAAIqB,MAAM,iBAAmBT,EAAMI,WAC3C,CAqBiBM,CAAsBV,GACrC,IAAKG,EACH,MAAM,IAAIM,MACR,8DACET,EACA,YACAW,KAAKC,UAAUpB,EAAO,KAAM,MAC5B,yBACAmB,KAAKC,UAAUzB,EAAoB,KAAM,OAG/C,MAAO,YAAcgB,CACvB,EAiBEU,6BAfF,SAAsCrB,GACpC,OAAQD,EAAYC,GAAS,IAAMA,EAAMsB,MACtCC,cACAC,QAAQ,MAAO,KACfA,QAAQ,gBAAiB,IACzBA,QAAQ,WAAY,GACzB,EAUEzB,YAAAA,E","sources":["webpack:///./node_modules/@react-native/assets-registry/path-support.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {PackagerAsset} from './registry.js';\n\nconst androidScaleSuffix = {\n  '0.75': 'ldpi',\n  '1': 'mdpi',\n  '1.5': 'hdpi',\n  '2': 'xhdpi',\n  '3': 'xxhdpi',\n  '4': 'xxxhdpi',\n};\n\nconst ANDROID_BASE_DENSITY = 160;\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale: number): string {\n  if (scale.toString() in androidScaleSuffix) {\n    return androidScaleSuffix[scale.toString()];\n  }\n  // NOTE: Android Gradle Plugin does not fully support the nnndpi format.\n  // See https://issuetracker.google.com/issues/72884435\n  if (Number.isFinite(scale) && scale > 0) {\n    return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';\n  }\n  throw new Error('no such scale ' + scale.toString());\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set([\n  'gif',\n  'jpeg',\n  'jpg',\n  'ktx',\n  'png',\n  'svg',\n  'webp',\n  'xml',\n]);\n\nfunction getAndroidResourceFolderName(\n  asset: PackagerAsset,\n  scale: number,\n): string | $TEMPORARY$string<'raw'> {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      \"Don't know which android drawable suffix to use for scale: \" +\n        scale +\n        '\\nAsset: ' +\n        JSON.stringify(asset, null, '\\t') +\n        '\\nPossible scales are:' +\n        JSON.stringify(androidScaleSuffix, null, '\\t'),\n    );\n  }\n  return 'drawable-' + suffix;\n}\n\nfunction getAndroidResourceIdentifier(asset: PackagerAsset): string {\n  return (getBasePath(asset) + '/' + asset.name)\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset: PackagerAsset): string {\n  const basePath = asset.httpServerLocation;\n  return basePath.startsWith('/') ? basePath.slice(1) : basePath;\n}\n\nmodule.exports = {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n};\n"],"names":["androidScaleSuffix","ANDROID_BASE_DENSITY","drawableFileTypes","Set","getBasePath","asset","basePath","httpServerLocation","startsWith","slice","module","exports","getAndroidResourceFolderName","scale","has","type","suffix","toString","Number","isFinite","Math","round","Error","getAndroidAssetSuffix","JSON","stringify","getAndroidResourceIdentifier","name","toLowerCase","replace"],"sourceRoot":""}