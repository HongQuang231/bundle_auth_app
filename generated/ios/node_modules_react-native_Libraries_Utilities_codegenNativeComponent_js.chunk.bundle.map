{"version":3,"file":"node_modules_react-native_Libraries_Utilities_codegenNativeComponent_js.chunk.bundle","mappings":"qLAUaA,OAAAA,eAAAA,EAAAA,aAAAA,CAAAC,OAAA,IAAAC,EAAAA,aAAA,EAIb,IAAMC,EAAkCC,EAAQ,OAC1CC,EAA+BD,EAAQ,OAchBF,EAAAA,QAHE,SAAII,GAAuB,OACtDH,EAAgCG,GAAiB,kBACjDD,EAA6BC,EAAgB,GAC9C,C,qCCfH,IAGOC,EAHPH,EAAA,OAGmBI,8BAAZD,SAiBPE,EAAOP,QAPiC,SACtCQ,EACAC,GAEA,OAAOJ,EAASG,EAAMC,EACxB,C,yGClBA,IAAAC,EAAAC,EAAAT,EAAA,OACAU,EAAAD,EAAAT,EAAA,QAuDCF,EAAAA,QArCD,SACEa,EACAC,GAEIC,EAAAA,EAAOC,cAMX,IAAIC,EACFH,GAAyC,MAA9BA,EAAQI,mBACfJ,EAAQI,mBACRL,EAEN,GAAe,MAAXC,GAA2D,MAAxCA,EAAQK,6BAC7B,GAAIC,EAAAA,QAAUC,qBAAqBR,GACjCI,EAAqBJ,MAChB,CAMC,IAADS,EANA,GACmC,MAAxCR,EAAQK,+BACRC,EAAAA,QAAUC,qBAAqBP,EAAQK,8BAKvC,MAAM,IAAII,MACR,8CAA8CV,QACR,OADqBS,EACzDR,EAAQK,8BAA4BG,EAAI,eAJ5CL,EAAqBH,EAAQK,4BAO/B,CAGF,OAAQ,EAAAK,EAAAA,SAENP,EAEJ,C","sources":["webpack:///./node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js","webpack:///./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\n\nconst createReactNativeComponentClass = require('../Renderer/shims/createReactNativeComponentClass');\nconst getNativeComponentAttributes = require('./getNativeComponentAttributes');\n\n/**\n * Creates values that can be used like React components which represent native\n * view managers. You should create JavaScript modules that wrap these values so\n * that the results are memoized. Example:\n *\n *   const View = requireNativeComponent('RCTView');\n *\n */\n\nconst requireNativeComponent = <T>(uiViewClassName: string): HostComponent<T> =>\n  ((createReactNativeComponentClass(uiViewClassName, () =>\n    getNativeComponentAttributes(uiViewClassName),\n  ): any): HostComponent<T>);\n\nexport default requireNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noformat\n * @flow strict-local\n * @nolint\n * @generated SignedSource<<ede54ac2fa1b9a09e234cdf098048989>>\n */\n\n'use strict';\n\nimport {ReactNativeViewConfigRegistry} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport {type ViewConfig} from './ReactNativeTypes';\n\nconst {register} = ReactNativeViewConfigRegistry;\n\n/**\n * Creates a renderable ReactNative host component.\n * Use this method for view configs that are loaded from UIManager.\n * Use createReactNativeComponentClass() for view configs defined within JavaScript.\n *\n * @param {string} config iOS View configuration.\n * @private\n */\nconst createReactNativeComponentClass = function (\n  name: string,\n  callback: () => ViewConfig,\n): string {\n  return register(name, callback);\n};\n\nmodule.exports = createReactNativeComponentClass;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// TODO: move this file to shims/ReactNative (requires React update and sync)\n\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\n\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\nimport UIManager from '../ReactNative/UIManager';\n\n// TODO: import from CodegenSchema once workspaces are enabled\ntype Options = $ReadOnly<{|\n  interfaceOnly?: boolean,\n  paperComponentName?: string,\n  paperComponentNameDeprecated?: string,\n  excludedPlatforms?: $ReadOnlyArray<'iOS' | 'android'>,\n|}>;\n\nexport type NativeComponentType<T> = HostComponent<T>;\n\n// If this function runs then that means the view configs were not\n// generated at build time using `GenerateViewConfigJs.js`. Thus\n// we need to `requireNativeComponent` to get the view configs from view managers.\n// `requireNativeComponent` is not available in Bridgeless mode.\n// e.g. This function runs at runtime if `codegenNativeComponent` was not called\n// from a file suffixed with NativeComponent.js.\nfunction codegenNativeComponent<Props>(\n  componentName: string,\n  options?: Options,\n): NativeComponentType<Props> {\n  if (global.RN$Bridgeless === true && __DEV__) {\n    console.warn(\n      `Codegen didn't run for ${componentName}. This will be an error in the future. Make sure you are using @react-native/babel-preset when building your JavaScript code.`,\n    );\n  }\n\n  let componentNameInUse =\n    options && options.paperComponentName != null\n      ? options.paperComponentName\n      : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.hasViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (\n      options.paperComponentNameDeprecated != null &&\n      UIManager.hasViewManagerConfig(options.paperComponentNameDeprecated)\n    ) {\n      // $FlowFixMe[incompatible-type]\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      throw new Error(\n        `Failed to find native component for either ${componentName} or ${\n          options.paperComponentNameDeprecated ?? '(unknown)'\n        }`,\n      );\n    }\n  }\n\n  return (requireNativeComponent<Props>(\n    // $FlowFixMe[incompatible-call]\n    componentNameInUse,\n  ): HostComponent<Props>);\n}\n\nexport default codegenNativeComponent;\n"],"names":["Object","value","exports","createReactNativeComponentClass","require","getNativeComponentAttributes","uiViewClassName","register","ReactNativeViewConfigRegistry","module","name","callback","_requireNativeComponent","_interopRequireDefault","_UIManager","componentName","options","global","RN$Bridgeless","componentNameInUse","paperComponentName","paperComponentNameDeprecated","UIManager","hasViewManagerConfig","_options$paperCompone","Error","requireNativeComponent"],"sourceRoot":""}