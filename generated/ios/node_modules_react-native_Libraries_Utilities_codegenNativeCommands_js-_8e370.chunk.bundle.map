{"version":3,"file":"node_modules_react-native_Libraries_Utilities_codegenNativeCommands_js-_8e370.chunk.bundle","mappings":"gUAUA,IAAOA,EAAmBC,EAAQ,OAA3BD,gBAkBNE,EAAAA,QAZD,SAAgDC,GAC9C,IAAMC,EAA+D,CAAC,EAUtE,OARAD,EAAQE,kBAAkBC,SAAQ,SAAAC,GAEhCH,EAAWG,GAAW,SAACC,GAAkB,IAAD,IAAAC,EAAAC,UAAAC,OAATC,EAAI,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAJF,EAAIE,EAAA,GAAAJ,UAAAI,GAEjCd,EAAgBQ,EAAKD,EAASK,EAChC,CACF,IAESR,CACX,C","sources":["webpack:///./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nconst {dispatchCommand} = require('../ReactNative/RendererProxy');\n\ntype Options<T = string> = $ReadOnly<{|\n  supportedCommands: $ReadOnlyArray<T>,\n|}>;\n\nfunction codegenNativeCommands<T: interface {}>(options: Options<$Keys<T>>): T {\n  const commandObj: {[$Keys<T>]: (...$ReadOnlyArray<mixed>) => void} = {};\n\n  options.supportedCommands.forEach(command => {\n    // $FlowFixMe[missing-local-annot]\n    commandObj[command] = (ref, ...args) => {\n      // $FlowFixMe[incompatible-call]\n      dispatchCommand(ref, command, args);\n    };\n  });\n\n  return ((commandObj: any): T);\n}\n\nexport default codegenNativeCommands;\n"],"names":["dispatchCommand","require","exports","options","commandObj","supportedCommands","forEach","command","ref","_len","arguments","length","args","Array","_key"],"sourceRoot":""}