{"version":3,"file":"node_modules_react-native-webview_src_index_ts-_c7d51.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native-webview/node_modules/escape-string-regexp/index.js","webpack:///./node_modules/react-native-webview/src/NativeRNCWebView.ts","webpack:///./node_modules/react-native-webview/src/RNCWebViewNativeComponent.ts","webpack:///./node_modules/react-native-webview/src/WebView.ios.tsx","webpack:///./node_modules/react-native-webview/src/WebView.styles.ts","webpack:///./node_modules/react-native-webview/src/WebViewShared.tsx","webpack:///./node_modules/react-native-webview/src/index.ts","webpack:///./node_modules/invariant/browser.js"],"sourcesContent":["'use strict';\n\nconst matchOperatorsRegex = /[|\\\\{}()[\\]^$+*?.-]/g;\n\nmodule.exports = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn string.replace(matchOperatorsRegex, '\\\\$&');\n};\n","import type { TurboModule } from 'react-native';\nimport { TurboModuleRegistry } from 'react-native';\nimport { Double } from 'react-native/Libraries/Types/CodegenTypes';\n\nexport interface Spec extends TurboModule {\n  readonly getConstants: () => {};\n\n  // your module methods go here, for example:\n  isFileUploadSupported(): Promise<boolean>;\n  shouldStartLoadWithLockIdentifier(\n    shouldStart: boolean,\n    lockIdentifier: Double\n  ): void;\n}\n\nexport default TurboModuleRegistry.getEnforcing<Spec>('RNCWebView');\n","import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport {\n  DirectEventHandler,\n  Double,\n  Int32,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\n\nexport type WebViewNativeEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n}>;\nexport type WebViewCustomMenuSelectionEvent = Readonly<{\n  label: string;\n  key: string;\n  selectedText: string;\n}>;\nexport type WebViewMessageEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  data: string;\n}>;\nexport type WebViewOpenWindowEvent = Readonly<{\n  targetUrl: string;\n}>;\nexport type WebViewHttpErrorEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  description: string;\n  statusCode: Int32;\n}>;\n\nexport type WebViewErrorEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  domain?: string;\n  code: Int32;\n  description: string;\n}>;\n\nexport type WebViewNativeProgressEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  progress: Double;\n}>;\n\nexport type WebViewNavigationEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  navigationType:\n    | 'click'\n    | 'formsubmit'\n    | 'backforward'\n    | 'reload'\n    | 'formresubmit'\n    | 'other';\n  mainDocumentURL?: string;\n}>;\n\nexport type ShouldStartLoadRequestEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  navigationType:\n    | 'click'\n    | 'formsubmit'\n    | 'backforward'\n    | 'reload'\n    | 'formresubmit'\n    | 'other';\n  mainDocumentURL?: string;\n  isTopFrame: boolean;\n}>;\n\ntype ScrollEvent = Readonly<{\n  contentInset: {\n    bottom: Double;\n    left: Double;\n    right: Double;\n    top: Double;\n  };\n  contentOffset: {\n    y: Double;\n    x: Double;\n  };\n  contentSize: {\n    height: Double;\n    width: Double;\n  };\n  layoutMeasurement: {\n    height: Double;\n    width: Double;\n  };\n  targetContentOffset?: {\n    y: Double;\n    x: Double;\n  };\n  velocity?: {\n    y: Double;\n    x: Double;\n  };\n  zoomScale?: Double;\n  responderIgnoreScroll?: boolean;\n}>;\n\ntype WebViewRenderProcessGoneEvent = Readonly<{\n  didCrash: boolean;\n}>;\n\ntype WebViewDownloadEvent = Readonly<{\n  downloadUrl: string;\n}>;\n\n// type MenuItem = Readonly<{label: string, key: string}>;\n\nexport interface NativeProps extends ViewProps {\n  // Android only\n  allowFileAccess?: boolean;\n  allowsProtectedMedia?: boolean;\n  allowsFullscreenVideo?: boolean;\n  androidLayerType?: WithDefault<'none' | 'software' | 'hardware', 'none'>;\n  cacheMode?: WithDefault<\n    | 'LOAD_DEFAULT'\n    | 'LOAD_CACHE_ELSE_NETWORK'\n    | 'LOAD_NO_CACHE'\n    | 'LOAD_CACHE_ONLY',\n    'LOAD_DEFAULT'\n  >;\n  domStorageEnabled?: boolean;\n  downloadingMessage?: string;\n  forceDarkOn?: boolean;\n  geolocationEnabled?: boolean;\n  lackPermissionToDownloadMessage?: string;\n  messagingModuleName: string;\n  minimumFontSize?: Int32;\n  mixedContentMode?: WithDefault<'never' | 'always' | 'compatibility', 'never'>;\n  nestedScrollEnabled?: boolean;\n  onContentSizeChange?: DirectEventHandler<WebViewNativeEvent>;\n  onRenderProcessGone?: DirectEventHandler<WebViewRenderProcessGoneEvent>;\n  overScrollMode?: string;\n  saveFormDataDisabled?: boolean;\n  scalesPageToFit?: boolean;\n  setBuiltInZoomControls?: boolean;\n  setDisplayZoomControls?: boolean;\n  setSupportMultipleWindows?: boolean;\n  textZoom?: Int32;\n  thirdPartyCookiesEnabled?: boolean;\n  // Workaround to watch if listener if defined\n  hasOnScroll?: boolean;\n  // !Android only\n\n  // iOS only\n  allowingReadAccessToURL?: string;\n  allowsBackForwardNavigationGestures?: boolean;\n  allowsInlineMediaPlayback?: boolean;\n  allowsAirPlayForMediaPlayback?: boolean;\n  allowsLinkPreview?: boolean;\n  automaticallyAdjustContentInsets?: boolean;\n  autoManageStatusBarEnabled?: boolean;\n  bounces?: boolean;\n  contentInset?: Readonly<{\n    top?: Double;\n    left?: Double;\n    bottom?: Double;\n    right?: Double;\n  }>;\n  contentInsetAdjustmentBehavior?: WithDefault<\n    'never' | 'automatic' | 'scrollableAxes' | 'always',\n    'never'\n  >;\n  contentMode?: WithDefault<\n    'recommended' | 'mobile' | 'desktop',\n    'recommended'\n  >;\n  dataDetectorTypes?: WithDefault<\n    ReadonlyArray<\n      | 'address'\n      | 'link'\n      | 'calendarEvent'\n      | 'trackingNumber'\n      | 'flightNumber'\n      | 'lookupSuggestion'\n      | 'phoneNumber'\n      | 'all'\n      | 'none'\n    >,\n    'phoneNumber'\n  >;\n  decelerationRate?: Double;\n  directionalLockEnabled?: boolean;\n  enableApplePay?: boolean;\n  hideKeyboardAccessoryView?: boolean;\n  keyboardDisplayRequiresUserAction?: boolean;\n  limitsNavigationsToAppBoundDomains?: boolean;\n  mediaCapturePermissionGrantType?: WithDefault<\n    | 'prompt'\n    | 'grant'\n    | 'deny'\n    | 'grantIfSameHostElsePrompt'\n    | 'grantIfSameHostElseDeny',\n    'prompt'\n  >;\n  pagingEnabled?: boolean;\n  pullToRefreshEnabled?: boolean;\n  scrollEnabled?: boolean;\n  sharedCookiesEnabled?: boolean;\n  textInteractionEnabled?: boolean;\n  useSharedProcessPool?: boolean;\n  onContentProcessDidTerminate?: DirectEventHandler<WebViewNativeEvent>;\n  onCustomMenuSelection?: DirectEventHandler<WebViewCustomMenuSelectionEvent>;\n  onFileDownload?: DirectEventHandler<WebViewDownloadEvent>;\n\n  menuItems?: ReadonlyArray<Readonly<{ label: string; key: string }>>;\n  suppressMenuItems?: Readonly<string>[];\n  // Workaround to watch if listener if defined\n  hasOnFileDownload?: boolean;\n  fraudulentWebsiteWarningEnabled?: boolean;\n  // !iOS only\n\n  allowFileAccessFromFileURLs?: boolean;\n  allowUniversalAccessFromFileURLs?: boolean;\n  applicationNameForUserAgent?: string;\n  basicAuthCredential?: Readonly<{\n    username: string;\n    password: string;\n  }>;\n  cacheEnabled?: boolean;\n  incognito?: boolean;\n  injectedJavaScript?: string;\n  injectedJavaScriptBeforeContentLoaded?: string;\n  injectedJavaScriptForMainFrameOnly?: boolean;\n  injectedJavaScriptBeforeContentLoadedForMainFrameOnly?: boolean;\n  javaScriptCanOpenWindowsAutomatically?: boolean;\n  javaScriptEnabled?: boolean;\n  webviewDebuggingEnabled?: boolean;\n  mediaPlaybackRequiresUserAction?: boolean;\n  messagingEnabled: boolean;\n  onLoadingError: DirectEventHandler<WebViewErrorEvent>;\n  onLoadingFinish: DirectEventHandler<WebViewNavigationEvent>;\n  onLoadingProgress: DirectEventHandler<WebViewNativeProgressEvent>;\n  onLoadingStart: DirectEventHandler<WebViewNavigationEvent>;\n  onHttpError: DirectEventHandler<WebViewHttpErrorEvent>;\n  onMessage: DirectEventHandler<WebViewMessageEvent>;\n  onOpenWindow?: DirectEventHandler<WebViewOpenWindowEvent>;\n  hasOnOpenWindowEvent?: boolean;\n  onScroll?: DirectEventHandler<ScrollEvent>;\n  onShouldStartLoadWithRequest: DirectEventHandler<ShouldStartLoadRequestEvent>;\n  showsHorizontalScrollIndicator?: boolean;\n  showsVerticalScrollIndicator?: boolean;\n  newSource: Readonly<{\n    uri?: string;\n    method?: string;\n    body?: string;\n\n    headers?: ReadonlyArray<Readonly<{ name: string; value: string }>>;\n    html?: string;\n    baseUrl?: string;\n  }>;\n  userAgent?: string;\n  injectedJavaScriptObject?: string;\n}\n\nexport interface NativeCommands {\n  goBack: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  goForward: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  reload: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  stopLoading: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  injectJavaScript: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    javascript: string\n  ) => void;\n  requestFocus: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  postMessage: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    data: string\n  ) => void;\n  // Android Only\n  loadUrl: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    url: string\n  ) => void;\n  clearFormData: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>\n  ) => void;\n  clearCache: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    includeDiskFiles: boolean\n  ) => void;\n  clearHistory: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  // !Android Only\n}\n\nexport const Commands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'goBack',\n    'goForward',\n    'reload',\n    'stopLoading',\n    'injectJavaScript',\n    'requestFocus',\n    'postMessage',\n    'loadUrl',\n    'clearFormData',\n    'clearCache',\n    'clearHistory',\n  ],\n});\n\nexport default codegenNativeComponent<NativeProps>(\n  'RNCWebView'\n) as HostComponent<NativeProps>;\n","import React, {\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useRef,\n} from 'react';\nimport { Image, View, ImageSourcePropType, HostComponent } from 'react-native';\nimport invariant from 'invariant';\n\nimport RNCWebView, { Commands, NativeProps } from './RNCWebViewNativeComponent';\nimport RNCWebViewModule from './NativeRNCWebView';\n\nimport {\n  defaultOriginWhitelist,\n  defaultRenderError,\n  defaultRenderLoading,\n  useWebViewLogic,\n} from './WebViewShared';\nimport {\n  IOSWebViewProps,\n  DecelerationRateConstant,\n  WebViewSourceUri,\n} from './WebViewTypes';\n\nimport styles from './WebView.styles';\n\nconst { resolveAssetSource } = Image;\nconst processDecelerationRate = (\n  decelerationRate: DecelerationRateConstant | number | undefined\n) => {\n  let newDecelerationRate = decelerationRate;\n  if (newDecelerationRate === 'normal') {\n    newDecelerationRate = 0.998;\n  } else if (newDecelerationRate === 'fast') {\n    newDecelerationRate = 0.99;\n  }\n  return newDecelerationRate;\n};\n\nconst useWarnIfChanges = <T extends unknown>(value: T, name: string) => {\n  const ref = useRef(value);\n  if (ref.current !== value) {\n    console.warn(\n      `Changes to property ${name} do nothing after the initial render.`\n    );\n    ref.current = value;\n  }\n};\n\nconst WebViewComponent = forwardRef<{}, IOSWebViewProps>(\n  (\n    {\n      fraudulentWebsiteWarningEnabled = true,\n      javaScriptEnabled = true,\n      cacheEnabled = true,\n      originWhitelist = defaultOriginWhitelist,\n      useSharedProcessPool = true,\n      textInteractionEnabled = true,\n      injectedJavaScript,\n      injectedJavaScriptBeforeContentLoaded,\n      injectedJavaScriptForMainFrameOnly = true,\n      injectedJavaScriptBeforeContentLoadedForMainFrameOnly = true,\n      injectedJavaScriptObject,\n      startInLoadingState,\n      onNavigationStateChange,\n      onLoadStart,\n      onError,\n      onLoad,\n      onLoadEnd,\n      onLoadProgress,\n      onContentProcessDidTerminate: onContentProcessDidTerminateProp,\n      onFileDownload,\n      onHttpError: onHttpErrorProp,\n      onMessage: onMessageProp,\n      onOpenWindow: onOpenWindowProp,\n      renderLoading,\n      renderError,\n      style,\n      containerStyle,\n      source,\n      nativeConfig,\n      allowsInlineMediaPlayback,\n      allowsAirPlayForMediaPlayback,\n      mediaPlaybackRequiresUserAction,\n      dataDetectorTypes,\n      incognito,\n      decelerationRate: decelerationRateProp,\n      onShouldStartLoadWithRequest: onShouldStartLoadWithRequestProp,\n      ...otherProps\n    },\n    ref\n  ) => {\n    const webViewRef = useRef<React.ComponentRef<\n      HostComponent<NativeProps>\n    > | null>(null);\n\n    const onShouldStartLoadWithRequestCallback = useCallback(\n      (shouldStart: boolean, _url: string, lockIdentifier = 0) => {\n        RNCWebViewModule.shouldStartLoadWithLockIdentifier(\n          shouldStart,\n          lockIdentifier\n        );\n      },\n      []\n    );\n\n    const {\n      onLoadingStart,\n      onShouldStartLoadWithRequest,\n      onMessage,\n      viewState,\n      setViewState,\n      lastErrorEvent,\n      onHttpError,\n      onLoadingError,\n      onLoadingFinish,\n      onLoadingProgress,\n      onOpenWindow,\n      onContentProcessDidTerminate,\n    } = useWebViewLogic({\n      onNavigationStateChange,\n      onLoad,\n      onError,\n      onHttpErrorProp,\n      onLoadEnd,\n      onLoadProgress,\n      onLoadStart,\n      onMessageProp,\n      onOpenWindowProp,\n      startInLoadingState,\n      originWhitelist,\n      onShouldStartLoadWithRequestProp,\n      onShouldStartLoadWithRequestCallback,\n      onContentProcessDidTerminateProp,\n    });\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        goForward: () =>\n          webViewRef.current && Commands.goForward(webViewRef.current),\n        goBack: () => webViewRef.current && Commands.goBack(webViewRef.current),\n        reload: () => {\n          setViewState('LOADING');\n          if (webViewRef.current) {\n            Commands.reload(webViewRef.current);\n          }\n        },\n        stopLoading: () =>\n          webViewRef.current && Commands.stopLoading(webViewRef.current),\n        postMessage: (data: string) =>\n          webViewRef.current && Commands.postMessage(webViewRef.current, data),\n        injectJavaScript: (data: string) =>\n          webViewRef.current &&\n          Commands.injectJavaScript(webViewRef.current, data),\n        requestFocus: () =>\n          webViewRef.current && Commands.requestFocus(webViewRef.current),\n        clearCache: (includeDiskFiles: boolean) =>\n          webViewRef.current &&\n          Commands.clearCache(webViewRef.current, includeDiskFiles),\n      }),\n      [setViewState, webViewRef]\n    );\n\n    useWarnIfChanges(allowsInlineMediaPlayback, 'allowsInlineMediaPlayback');\n    useWarnIfChanges(\n      allowsAirPlayForMediaPlayback,\n      'allowsAirPlayForMediaPlayback'\n    );\n    useWarnIfChanges(incognito, 'incognito');\n    useWarnIfChanges(\n      mediaPlaybackRequiresUserAction,\n      'mediaPlaybackRequiresUserAction'\n    );\n    useWarnIfChanges(dataDetectorTypes, 'dataDetectorTypes');\n\n    let otherView = null;\n    if (viewState === 'LOADING') {\n      otherView = (renderLoading || defaultRenderLoading)();\n    } else if (viewState === 'ERROR') {\n      invariant(\n        lastErrorEvent != null,\n        'lastErrorEvent expected to be non-null'\n      );\n      otherView = (renderError || defaultRenderError)(\n        lastErrorEvent?.domain,\n        lastErrorEvent?.code ?? 0,\n        lastErrorEvent?.description ?? ''\n      );\n    } else if (viewState !== 'IDLE') {\n      console.error(`RNCWebView invalid state encountered: ${viewState}`);\n    }\n\n    const webViewStyles = [styles.container, styles.webView, style];\n    const webViewContainerStyle = [styles.container, containerStyle];\n\n    const decelerationRate = processDecelerationRate(decelerationRateProp);\n\n    const NativeWebView =\n      (nativeConfig?.component as typeof RNCWebView | undefined) || RNCWebView;\n\n    const sourceResolved = resolveAssetSource(source as ImageSourcePropType);\n    const newSource =\n      typeof sourceResolved === 'object'\n        ? Object.entries(sourceResolved as WebViewSourceUri).reduce(\n            (prev, [currKey, currValue]) => {\n              return {\n                ...prev,\n                [currKey]:\n                  currKey === 'headers' &&\n                  currValue &&\n                  typeof currValue === 'object'\n                    ? Object.entries(currValue).map(([key, value]) => {\n                        return {\n                          name: key,\n                          value,\n                        };\n                      })\n                    : currValue,\n              };\n            },\n            {}\n          )\n        : sourceResolved;\n\n    const webView = (\n      <NativeWebView\n        key=\"webViewKey\"\n        {...otherProps}\n        fraudulentWebsiteWarningEnabled={fraudulentWebsiteWarningEnabled}\n        javaScriptEnabled={javaScriptEnabled}\n        cacheEnabled={cacheEnabled}\n        useSharedProcessPool={useSharedProcessPool}\n        textInteractionEnabled={textInteractionEnabled}\n        decelerationRate={decelerationRate}\n        messagingEnabled={typeof onMessageProp === 'function'}\n        messagingModuleName=\"\" // android ONLY\n        onLoadingError={onLoadingError}\n        onLoadingFinish={onLoadingFinish}\n        onLoadingProgress={onLoadingProgress}\n        onFileDownload={onFileDownload}\n        onLoadingStart={onLoadingStart}\n        onHttpError={onHttpError}\n        onMessage={onMessage}\n        onOpenWindow={onOpenWindowProp && onOpenWindow}\n        hasOnOpenWindowEvent={onOpenWindowProp !== undefined}\n        onShouldStartLoadWithRequest={onShouldStartLoadWithRequest}\n        onContentProcessDidTerminate={onContentProcessDidTerminate}\n        injectedJavaScript={injectedJavaScript}\n        injectedJavaScriptBeforeContentLoaded={\n          injectedJavaScriptBeforeContentLoaded\n        }\n        injectedJavaScriptForMainFrameOnly={injectedJavaScriptForMainFrameOnly}\n        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={\n          injectedJavaScriptBeforeContentLoadedForMainFrameOnly\n        }\n        injectedJavaScriptObject={JSON.stringify(injectedJavaScriptObject)}\n        dataDetectorTypes={\n          !dataDetectorTypes || Array.isArray(dataDetectorTypes)\n            ? dataDetectorTypes\n            : [dataDetectorTypes]\n        }\n        allowsAirPlayForMediaPlayback={allowsAirPlayForMediaPlayback}\n        allowsInlineMediaPlayback={allowsInlineMediaPlayback}\n        incognito={incognito}\n        mediaPlaybackRequiresUserAction={mediaPlaybackRequiresUserAction}\n        newSource={newSource}\n        style={webViewStyles}\n        hasOnFileDownload={!!onFileDownload}\n        ref={webViewRef}\n        // @ts-expect-error old arch only\n        source={sourceResolved}\n        {...nativeConfig?.props}\n      />\n    );\n\n    return (\n      <View style={webViewContainerStyle}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n);\n\n// no native implementation for iOS, depends only on permissions\nconst isFileUploadSupported: () => Promise<boolean> = async () => true;\n\nconst WebView = Object.assign(WebViewComponent, { isFileUploadSupported });\n\nexport default WebView;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  loadingOrErrorView: {\n    position: 'absolute',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n    width: '100%',\n    backgroundColor: 'white',\n  },\n  loadingProgressBar: {\n    height: 20,\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n    marginBottom: 2,\n  },\n  errorTextTitle: {\n    fontSize: 15,\n    fontWeight: '500',\n    marginBottom: 10,\n  },\n  webView: {\n    backgroundColor: '#ffffff',\n  },\n  flexStart: {\n    alignSelf: 'flex-start',\n  },\n  colorRed: {\n    color: 'red',\n  },\n});\n\nexport default styles;\n","import escapeStringRegexp from 'escape-string-regexp';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { Linking, View, ActivityIndicator, Text, Platform } from 'react-native';\nimport {\n  OnShouldStartLoadWithRequest,\n  ShouldStartLoadRequestEvent,\n  WebViewError,\n  WebViewErrorEvent,\n  WebViewHttpErrorEvent,\n  WebViewMessageEvent,\n  WebViewNavigation,\n  WebViewNavigationEvent,\n  WebViewOpenWindowEvent,\n  WebViewProgressEvent,\n  WebViewRenderProcessGoneEvent,\n  WebViewTerminatedEvent,\n} from './WebViewTypes';\nimport styles from './WebView.styles';\n\nconst defaultOriginWhitelist = ['http://*', 'https://*'] as const;\n\nconst extractOrigin = (url: string): string => {\n  const result = /^[A-Za-z][A-Za-z0-9+\\-.]+:(\\/\\/)?[^/]*/.exec(url);\n  return result === null ? '' : result[0];\n};\n\nconst originWhitelistToRegex = (originWhitelist: string): string =>\n  `^${escapeStringRegexp(originWhitelist).replace(/\\\\\\*/g, '.*')}`;\n\nconst passesWhitelist = (compiledWhitelist: readonly string[], url: string) => {\n  const origin = extractOrigin(url);\n  return compiledWhitelist.some((x) => new RegExp(x).test(origin));\n};\n\nconst compileWhitelist = (\n  originWhitelist: readonly string[]\n): readonly string[] =>\n  ['about:blank', ...(originWhitelist || [])].map(originWhitelistToRegex);\n\nconst createOnShouldStartLoadWithRequest = (\n  loadRequest: (\n    shouldStart: boolean,\n    url: string,\n    lockIdentifier: number\n  ) => void,\n  originWhitelist: readonly string[],\n  onShouldStartLoadWithRequest?: OnShouldStartLoadWithRequest\n) => {\n  return ({ nativeEvent }: ShouldStartLoadRequestEvent) => {\n    let shouldStart = true;\n    const { url, lockIdentifier } = nativeEvent;\n\n    if (!passesWhitelist(compileWhitelist(originWhitelist), url)) {\n      Linking.canOpenURL(url)\n        .then((supported) => {\n          if (supported) {\n            return Linking.openURL(url);\n          }\n          console.warn(`Can't open url: ${url}`);\n          return undefined;\n        })\n        .catch((e) => {\n          console.warn('Error opening URL: ', e);\n        });\n      shouldStart = false;\n    } else if (onShouldStartLoadWithRequest) {\n      shouldStart = onShouldStartLoadWithRequest(nativeEvent);\n    }\n\n    loadRequest(shouldStart, url, lockIdentifier);\n  };\n};\n\nconst defaultRenderLoading = () => (\n  <View style={styles.loadingOrErrorView}>\n    <ActivityIndicator />\n  </View>\n);\nconst defaultRenderError = (\n  errorDomain: string | undefined,\n  errorCode: number,\n  errorDesc: string\n) => (\n  <View style={styles.loadingOrErrorView}>\n    <Text style={styles.errorTextTitle}>Error loading page</Text>\n    <Text style={styles.errorText}>{`Domain: ${errorDomain}`}</Text>\n    <Text style={styles.errorText}>{`Error Code: ${errorCode}`}</Text>\n    <Text style={styles.errorText}>{`Description: ${errorDesc}`}</Text>\n  </View>\n);\n\nexport {\n  defaultOriginWhitelist,\n  createOnShouldStartLoadWithRequest,\n  defaultRenderLoading,\n  defaultRenderError,\n};\n\nexport const useWebViewLogic = ({\n  startInLoadingState,\n  onNavigationStateChange,\n  onLoadStart,\n  onLoad,\n  onLoadProgress,\n  onLoadEnd,\n  onError,\n  onHttpErrorProp,\n  onMessageProp,\n  onOpenWindowProp,\n  onRenderProcessGoneProp,\n  onContentProcessDidTerminateProp,\n  originWhitelist,\n  onShouldStartLoadWithRequestProp,\n  onShouldStartLoadWithRequestCallback,\n}: {\n  startInLoadingState?: boolean;\n  onNavigationStateChange?: (event: WebViewNavigation) => void;\n  onLoadStart?: (event: WebViewNavigationEvent) => void;\n  onLoad?: (event: WebViewNavigationEvent) => void;\n  onLoadProgress?: (event: WebViewProgressEvent) => void;\n  onLoadEnd?: (event: WebViewNavigationEvent | WebViewErrorEvent) => void;\n  onError?: (event: WebViewErrorEvent) => void;\n  onHttpErrorProp?: (event: WebViewHttpErrorEvent) => void;\n  onMessageProp?: (event: WebViewMessageEvent) => void;\n  onOpenWindowProp?: (event: WebViewOpenWindowEvent) => void;\n  onRenderProcessGoneProp?: (event: WebViewRenderProcessGoneEvent) => void;\n  onContentProcessDidTerminateProp?: (event: WebViewTerminatedEvent) => void;\n  originWhitelist: readonly string[];\n  onShouldStartLoadWithRequestProp?: OnShouldStartLoadWithRequest;\n  onShouldStartLoadWithRequestCallback: (\n    shouldStart: boolean,\n    url: string,\n    lockIdentifier?: number | undefined\n  ) => void;\n}) => {\n  const [viewState, setViewState] = useState<'IDLE' | 'LOADING' | 'ERROR'>(\n    startInLoadingState ? 'LOADING' : 'IDLE'\n  );\n  const [lastErrorEvent, setLastErrorEvent] = useState<WebViewError | null>(\n    null\n  );\n  const startUrl = useRef<string | null>(null);\n\n  const updateNavigationState = useCallback(\n    (event: WebViewNavigationEvent) => {\n      onNavigationStateChange?.(event.nativeEvent);\n    },\n    [onNavigationStateChange]\n  );\n\n  const onLoadingStart = useCallback(\n    (event: WebViewNavigationEvent) => {\n      // Needed for android\n      startUrl.current = event.nativeEvent.url;\n      // !Needed for android\n\n      onLoadStart?.(event);\n      updateNavigationState(event);\n    },\n    [onLoadStart, updateNavigationState]\n  );\n\n  const onLoadingError = useCallback(\n    (event: WebViewErrorEvent) => {\n      event.persist();\n      if (onError) {\n        onError(event);\n      } else {\n        console.warn('Encountered an error loading page', event.nativeEvent);\n      }\n      onLoadEnd?.(event);\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n      setViewState('ERROR');\n      setLastErrorEvent(event.nativeEvent);\n    },\n    [onError, onLoadEnd]\n  );\n\n  const onHttpError = useCallback(\n    (event: WebViewHttpErrorEvent) => {\n      onHttpErrorProp?.(event);\n    },\n    [onHttpErrorProp]\n  );\n\n  // Android Only\n  const onRenderProcessGone = useCallback(\n    (event: WebViewRenderProcessGoneEvent) => {\n      onRenderProcessGoneProp?.(event);\n    },\n    [onRenderProcessGoneProp]\n  );\n  // !Android Only\n\n  // iOS Only\n  const onContentProcessDidTerminate = useCallback(\n    (event: WebViewTerminatedEvent) => {\n      onContentProcessDidTerminateProp?.(event);\n    },\n    [onContentProcessDidTerminateProp]\n  );\n  // !iOS Only\n\n  const onLoadingFinish = useCallback(\n    (event: WebViewNavigationEvent) => {\n      onLoad?.(event);\n      onLoadEnd?.(event);\n      const {\n        nativeEvent: { url },\n      } = event;\n      // on Android, only if url === startUrl\n      if (Platform.OS !== 'android' || url === startUrl.current) {\n        setViewState('IDLE');\n      }\n      // !on Android, only if url === startUrl\n      updateNavigationState(event);\n    },\n    [onLoad, onLoadEnd, updateNavigationState]\n  );\n\n  const onMessage = useCallback(\n    (event: WebViewMessageEvent) => {\n      onMessageProp?.(event);\n    },\n    [onMessageProp]\n  );\n\n  const onLoadingProgress = useCallback(\n    (event: WebViewProgressEvent) => {\n      const {\n        nativeEvent: { progress },\n      } = event;\n      // patch for Android only\n      if (Platform.OS === 'android' && progress === 1) {\n        setViewState((prevViewState) =>\n          prevViewState === 'LOADING' ? 'IDLE' : prevViewState\n        );\n      }\n      // !patch for Android only\n      onLoadProgress?.(event);\n    },\n    [onLoadProgress]\n  );\n\n  const onShouldStartLoadWithRequest = useMemo(\n    () =>\n      createOnShouldStartLoadWithRequest(\n        onShouldStartLoadWithRequestCallback,\n        originWhitelist,\n        onShouldStartLoadWithRequestProp\n      ),\n    [\n      originWhitelist,\n      onShouldStartLoadWithRequestProp,\n      onShouldStartLoadWithRequestCallback,\n    ]\n  );\n\n  const onOpenWindow = useCallback(\n    (event: WebViewOpenWindowEvent) => {\n      onOpenWindowProp?.(event);\n    },\n    [onOpenWindowProp]\n  );\n\n  return {\n    onShouldStartLoadWithRequest,\n    onLoadingStart,\n    onLoadingProgress,\n    onLoadingError,\n    onLoadingFinish,\n    onHttpError,\n    onRenderProcessGone,\n    onContentProcessDidTerminate,\n    onMessage,\n    onOpenWindow,\n    viewState,\n    setViewState,\n    lastErrorEvent,\n  };\n};\n","import WebView from './WebView';\n\nexport { WebView };\nexport default WebView;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n"],"names":["matchOperatorsRegex","module","exports","string","TypeError","replace","_reactNative","require","TurboModuleRegistry","getEnforcing","_interopRequireDefault","NativeComponentRegistry","ConditionallyIgnoredEventHandlers","dispatchCommand","__INTERNAL_VIEW_CONFIG","uiViewClassName","directEventTypes","topContentSizeChange","registrationName","topRenderProcessGone","topContentProcessDidTerminate","topCustomMenuSelection","topFileDownload","topLoadingError","topLoadingFinish","topLoadingProgress","topLoadingStart","topHttpError","topMessage","topOpenWindow","topScroll","topShouldStartLoadWithRequest","validAttributes","Object","assign","allowFileAccess","allowsProtectedMedia","allowsFullscreenVideo","androidLayerType","cacheMode","domStorageEnabled","downloadingMessage","forceDarkOn","geolocationEnabled","lackPermissionToDownloadMessage","messagingModuleName","minimumFontSize","mixedContentMode","nestedScrollEnabled","overScrollMode","saveFormDataDisabled","scalesPageToFit","setBuiltInZoomControls","setDisplayZoomControls","setSupportMultipleWindows","textZoom","thirdPartyCookiesEnabled","hasOnScroll","allowingReadAccessToURL","allowsBackForwardNavigationGestures","allowsInlineMediaPlayback","allowsAirPlayForMediaPlayback","allowsLinkPreview","automaticallyAdjustContentInsets","autoManageStatusBarEnabled","bounces","contentInset","contentInsetAdjustmentBehavior","contentMode","dataDetectorTypes","decelerationRate","directionalLockEnabled","enableApplePay","hideKeyboardAccessoryView","keyboardDisplayRequiresUserAction","limitsNavigationsToAppBoundDomains","mediaCapturePermissionGrantType","pagingEnabled","pullToRefreshEnabled","scrollEnabled","sharedCookiesEnabled","textInteractionEnabled","useSharedProcessPool","menuItems","suppressMenuItems","hasOnFileDownload","fraudulentWebsiteWarningEnabled","allowFileAccessFromFileURLs","allowUniversalAccessFromFileURLs","applicationNameForUserAgent","basicAuthCredential","cacheEnabled","incognito","injectedJavaScript","injectedJavaScriptBeforeContentLoaded","injectedJavaScriptForMainFrameOnly","injectedJavaScriptBeforeContentLoadedForMainFrameOnly","javaScriptCanOpenWindowsAutomatically","javaScriptEnabled","webviewDebuggingEnabled","mediaPlaybackRequiresUserAction","messagingEnabled","hasOnOpenWindowEvent","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","newSource","userAgent","injectedJavaScriptObject","onContentSizeChange","onRenderProcessGone","onContentProcessDidTerminate","onCustomMenuSelection","onFileDownload","onLoadingError","onLoadingFinish","onLoadingProgress","onLoadingStart","onHttpError","onMessage","onOpenWindow","onScroll","onShouldStartLoadWithRequest","get","goBack","ref","goForward","reload","stopLoading","injectJavaScript","javascript","requestFocus","postMessage","data","loadUrl","url","clearFormData","clearCache","includeDiskFiles","clearHistory","_react","_interopRequireWildcard","_invariant","_RNCWebViewNativeComponent","_NativeRNCWebView","_WebViewShared","_WebView","_jsxRuntime","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","n","__proto__","a","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_ref6","resolveAssetSource","Image","useWarnIfChanges","value","name","useRef","current","console","warn","WebViewComponent","forwardRef","_ref","_ref$fraudulentWebsit","_ref$javaScriptEnable","_ref$cacheEnabled","_ref$originWhitelist","originWhitelist","defaultOriginWhitelist","_ref$useSharedProcess","_ref$textInteractionE","_ref$injectedJavaScri","_ref$injectedJavaScri2","startInLoadingState","onNavigationStateChange","onLoadStart","onError","onLoad","onLoadEnd","onLoadProgress","onContentProcessDidTerminateProp","onHttpErrorProp","onMessageProp","onOpenWindowProp","renderLoading","renderError","style","containerStyle","source","nativeConfig","decelerationRateProp","onShouldStartLoadWithRequestProp","otherProps","_objectWithoutProperties2","webViewRef","onShouldStartLoadWithRequestCallback","useCallback","shouldStart","_url","lockIdentifier","arguments","length","undefined","RNCWebViewModule","shouldStartLoadWithLockIdentifier","_useWebViewLogic","useWebViewLogic","viewState","setViewState","lastErrorEvent","useImperativeHandle","Commands","otherView","defaultRenderLoading","_lastErrorEvent$code","_lastErrorEvent$descr","invariant","defaultRenderError","domain","code","description","error","webViewStyles","styles","container","webView","webViewContainerStyle","newDecelerationRate","processDecelerationRate","NativeWebView","component","RNCWebView","sourceResolved","entries","reduce","prev","_ref2","_ref3","_slicedToArray2","currKey","currValue","_defineProperty2","map","_ref4","_ref5","jsx","JSON","stringify","Array","isArray","props","jsxs","View","children","isFileUploadSupported","_asyncToGenerator2","apply","WebView","StyleSheet","create","flex","overflow","loadingOrErrorView","position","justifyContent","alignItems","height","width","backgroundColor","loadingProgressBar","errorText","fontSize","textAlign","marginBottom","errorTextTitle","fontWeight","flexStart","alignSelf","colorRed","color","_escapeStringRegexp","originWhitelistToRegex","escapeStringRegexp","createOnShouldStartLoadWithRequest","loadRequest","nativeEvent","compiledWhitelist","origin","result","exec","extractOrigin","some","x","RegExp","test","passesWhitelist","concat","_toConsumableArray2","compileWhitelist","Linking","canOpenURL","then","supported","openURL","catch","ActivityIndicator","errorDomain","errorCode","errorDesc","Text","onRenderProcessGoneProp","_useState","useState","_useState2","_useState3","_useState4","setLastErrorEvent","startUrl","updateNavigationState","event","persist","isDefaultPrevented","Platform","OS","progress","prevViewState","useMemo","condition","format","b","c","d","f","Error","args","argIndex","framesToPop"],"sourceRoot":""}