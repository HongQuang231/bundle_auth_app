{"version":3,"file":"node_modules_react-native-document-picker_src_index_tsx-_47181.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native-document-picker/src/NativeDocumentPicker.ts","webpack:///./node_modules/react-native-document-picker/src/fileTypes.ts","webpack:///./node_modules/react-native-document-picker/src/index.tsx","webpack:///./node_modules/invariant/browser.js"],"sourcesContent":["import type { TurboModule } from 'react-native'\nimport { TurboModuleRegistry } from 'react-native'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\nexport interface Spec extends TurboModule {\n  readonly getConstants: () => {}\n\n  // we use \"Object\" to still have backwards compability with already\n  // present methods on iOS, which use NSDictionary\n  pick(options: Object): Promise<DocumentPickerResponse[]>\n  releaseSecureAccess(uris: string[]): Promise<void>\n  pickDirectory(): Promise<DirectoryPickerResponse>\n}\n\nexport const NativeDocumentPicker = TurboModuleRegistry.getEnforcing<Spec>('RNDocumentPicker')\n","const mimeTypes = Object.freeze({\n  allFiles: '*/*',\n  audio: 'audio/*',\n  csv: 'text/csv',\n  doc: 'application/msword',\n  docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  images: 'image/*',\n  json: 'application/json',\n  pdf: 'application/pdf',\n  plainText: 'text/plain',\n  ppt: 'application/vnd.ms-powerpoint',\n  pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  video: 'video/*',\n  xls: 'application/vnd.ms-excel',\n  xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  zip: 'application/zip',\n} as const)\n\nconst utis = Object.freeze({\n  allFiles: 'public.item',\n  audio: 'public.audio',\n  csv: 'public.comma-separated-values-text',\n  doc: 'com.microsoft.word.doc',\n  docx: 'org.openxmlformats.wordprocessingml.document',\n  images: 'public.image',\n  json: 'public.json',\n  pdf: 'com.adobe.pdf',\n  plainText: 'public.plain-text',\n  ppt: 'com.microsoft.powerpoint.ppt',\n  pptx: 'org.openxmlformats.presentationml.presentation',\n  video: 'public.movie',\n  xls: 'com.microsoft.excel.xls',\n  xlsx: 'org.openxmlformats.spreadsheetml.sheet',\n  zip: 'public.zip-archive',\n} as const)\n\nconst extensions = Object.freeze({\n  allFiles: '*',\n  audio:\n    '.3g2 .3gp .aac .adt .adts .aif .aifc .aiff .asf .au .m3u .m4a .m4b .mid .midi .mp2 .mp3 .mp4 .rmi .snd .wav .wax .wma',\n  csv: '.csv',\n  doc: '.doc',\n  docx: '.docx',\n  images: '.jpeg .jpg .png',\n  json: '.json',\n  pdf: '.pdf',\n  plainText: '.txt',\n  ppt: '.ppt',\n  pptx: '.pptx',\n  video: '.mp4',\n  xls: '.xls',\n  xlsx: '.xlsx',\n  zip: '.zip .gz',\n} as const)\n\nexport type PlatformTypes = typeof mimeTypes | typeof utis | typeof extensions\n\nexport const perPlatformTypes = {\n  android: mimeTypes,\n  ios: utis,\n  windows: extensions,\n  // unsupported, but added to make TS happy\n  macos: extensions,\n  web: extensions,\n}\n\n// ensure shapes of platformTypes are the same: https://stackoverflow.com/a/67027347/2070942\n// let me know if there's a nicer way\n\ntype AssertEqualKeys<T1 extends object, T2 extends object> = [\n  keyof T1 extends keyof T2 ? 1 : 0,\n  keyof T2 extends keyof T1 ? 1 : 0,\n] extends [1, 1]\n  ? true\n  : false\n\nconst mimesAndUtisAreEqual: AssertEqualKeys<typeof mimeTypes, typeof utis> = true\nconst mimesAndExtensionsAreEqual: AssertEqualKeys<typeof mimeTypes, typeof extensions> = true\nexport const typesAreEqual = mimesAndUtisAreEqual && mimesAndExtensionsAreEqual\n","import { Platform, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\nimport { NativeDocumentPicker } from './NativeDocumentPicker'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string | null\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\nexport type TransitionStyle = 'coverVertical' | 'flipHorizontal' | 'crossDissolve' | 'partialCurl'\n\nexport type DocumentPickerOptions = {\n  type?: string | Array<PlatformTypes | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n  transitionStyle?: TransitionStyle\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport async function pickDirectory(\n  params?: Pick<DocumentPickerOptions, 'presentationStyle' | 'transitionStyle'>,\n): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'ios') {\n    const result = await pick({\n      ...params,\n      mode: 'open',\n      allowMultiSelection: false,\n      type: ['public.folder'],\n    })\n    return { uri: result[0].uri }\n  } else {\n    return NativeDocumentPicker.pickDirectory()\n  }\n}\n\nexport function pickSingle(opts?: DocumentPickerOptions): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick(opts?: DocumentPickerOptions): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams = {\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams = DocumentPickerOptions & {\n  type: Array<PlatformTypes | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n  transitionStyle: TransitionStyle\n}\n\nfunction doPick(options: DoPickParams): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return NativeDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return NativeDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err && typeof err === 'object' && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  isInProgress,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n"],"names":["_reactNative","require","exports","TurboModuleRegistry","getEnforcing","mimeTypes","Object","freeze","allFiles","audio","csv","doc","docx","images","json","pdf","plainText","ppt","pptx","video","xls","xlsx","zip","utis","extensions","android","ios","windows","macos","web","_invariant","_interopRequireDefault","_fileTypes","_NativeDocumentPicker","types","perPlatformTypes","Platform","OS","pickDirectory","_x","_pickDirectory","apply","arguments","_asyncToGenerator2","default","params","uri","pick","assign","mode","allowMultiSelection","type","NativeDocumentPicker","pickSingle","opts","then","results","options","_options$mode","_options$copyTo","invariant","every","length","includes","TypeError","copyTo","doPick","presentationStyle","transitionStyle","Array","isArray","releaseSecureAccess","uris","Promise","resolve","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isCancel","err","isErrorWithCode","isInProgress","errorCode","code","module","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop"],"sourceRoot":""}