{"version":3,"file":"node_modules_react-native-pager-view_src_index_tsx-_1a821.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native-pager-view/src/PagerView.tsx","webpack:///./node_modules/react-native-pager-view/src/index.tsx","webpack:///./node_modules/react-native-pager-view/src/specs/LEGACY_PagerViewNativeComponent.ts","webpack:///./node_modules/react-native-pager-view/src/specs/PagerViewNativeComponent.ts","webpack:///./node_modules/react-native-pager-view/src/utils.tsx"],"sourcesContent":["import React from 'react';\nimport { Platform, Keyboard, StyleProp, ViewStyle } from 'react-native';\nimport { I18nManager } from 'react-native';\nimport type * as ReactNative from 'react-native';\n\nimport {\n  LEGACY_childrenWithOverriddenStyle,\n  childrenWithOverriddenStyle,\n} from './utils';\n\nimport PagerViewNativeComponent, {\n  Commands as PagerViewNativeCommands,\n  OnPageScrollEventData,\n  OnPageScrollStateChangedEventData,\n  OnPageSelectedEventData,\n  NativeProps,\n} from './specs/PagerViewNativeComponent';\n\nimport LEGACY_PagerViewNativeComponent, {\n  Commands as LEGACY_PagerViewNativeCommands,\n} from './specs/LEGACY_PagerViewNativeComponent';\n\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `PagerView` will be treated as a separate page\n * and will be stretched to fill the `PagerView`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child. It is also important that each child have a `key` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <PagerView\n *       style={styles.PagerView}\n *       initialPage={0}>\n *       <View style={styles.pageStyle} key=\"1\">\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle} key=\"2\">\n *         <Text>Second page</Text>\n *       </View>\n *     </PagerView>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   PagerView: {\n *     flex: 1\n *   },\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\n\nclass PagerViewInternal extends React.Component<NativeProps> {\n  private isScrolling = false;\n  pagerView: React.ElementRef<typeof PagerViewNativeComponent> | null = null;\n\n  private get nativeCommandsWrapper() {\n    return this.props.useLegacy\n      ? LEGACY_PagerViewNativeCommands\n      : PagerViewNativeCommands;\n  }\n\n  private get deducedLayoutDirection() {\n    if (\n      !this.props.layoutDirection ||\n      //@ts-ignore fix it\n      this.props.layoutDirection === 'locale'\n    ) {\n      return I18nManager.isRTL ? 'rtl' : 'ltr';\n    } else {\n      return this.props.layoutDirection;\n    }\n  }\n\n  private _onPageScroll = (\n    e: ReactNative.NativeSyntheticEvent<OnPageScrollEventData>\n  ) => {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(e);\n    }\n\n    // Not implemented on iOS yet\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private _onPageScrollStateChanged = (\n    e: ReactNative.NativeSyntheticEvent<OnPageScrollStateChangedEventData>\n  ) => {\n    if (this.props.onPageScrollStateChanged) {\n      this.props.onPageScrollStateChanged(e);\n    }\n    this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  private _onPageSelected = (\n    e: ReactNative.NativeSyntheticEvent<OnPageSelectedEventData>\n  ) => {\n    if (this.props.onPageSelected) {\n      this.props.onPageSelected(e);\n    }\n  };\n\n  private _onMoveShouldSetResponderCapture = () => {\n    return this.isScrolling;\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will be animated.\n   */\n  public setPage = (selectedPage: number) => {\n    if (this.pagerView) {\n      this.nativeCommandsWrapper.setPage(this.pagerView, selectedPage);\n    }\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will *not* be animated.\n   */\n  public setPageWithoutAnimation = (selectedPage: number) => {\n    if (this.pagerView) {\n      this.nativeCommandsWrapper.setPageWithoutAnimation(\n        this.pagerView,\n        selectedPage\n      );\n    }\n  };\n\n  /**\n   * A helper function to enable/disable scroll imperatively\n   * The recommended way is using the scrollEnabled prop, however, there might be a case where a\n   * imperative solution is more useful (e.g. for not blocking an animation)\n   */\n  public setScrollEnabled = (scrollEnabled: boolean) => {\n    if (this.pagerView) {\n      this.nativeCommandsWrapper.setScrollEnabledImperatively(\n        this.pagerView,\n        scrollEnabled\n      );\n    }\n  };\n\n  render() {\n    // old iOS `UIPageViewController`-based implementation\n    if (Platform.OS === 'ios' && this.props.useLegacy) {\n      return (\n        <LEGACY_PagerViewNativeComponent\n          {...this.props}\n          ref={(ref) => {\n            this.pagerView = ref;\n          }}\n          style={this.props.style}\n          layoutDirection={this.deducedLayoutDirection}\n          onPageScroll={this._onPageScroll}\n          onPageScrollStateChanged={this._onPageScrollStateChanged}\n          onPageSelected={this._onPageSelected}\n          onMoveShouldSetResponderCapture={\n            this._onMoveShouldSetResponderCapture\n          }\n          children={LEGACY_childrenWithOverriddenStyle(this.props.children)}\n        />\n      );\n    }\n\n    const style: StyleProp<ViewStyle> = [\n      this.props.style,\n      this.props.pageMargin\n        ? {\n            marginHorizontal: -this.props.pageMargin / 2,\n          }\n        : null,\n      {\n        flexDirection: this.props.orientation === 'vertical' ? 'column' : 'row',\n      },\n    ];\n\n    // new iOS `UIScrollView`-based implementation, Android, and other platforms\n    return (\n      <PagerViewNativeComponent\n        {...this.props}\n        ref={(ref) => {\n          this.pagerView = ref;\n        }}\n        style={style}\n        layoutDirection={this.deducedLayoutDirection}\n        onPageScroll={this._onPageScroll}\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\n        onPageSelected={this._onPageSelected}\n        onMoveShouldSetResponderCapture={this._onMoveShouldSetResponderCapture}\n        children={childrenWithOverriddenStyle(\n          this.props.children,\n          this.props.pageMargin\n        )}\n      />\n    );\n  }\n}\n\n// Temporary solution. It should be removed once all things get fixed\ntype PagerViewProps = Omit<NativeProps, 'useLegacy'> & { useNext?: boolean };\n\nexport const PagerView = React.forwardRef<PagerViewInternal, PagerViewProps>(\n  (props, ref) => {\n    const { useNext, ...rest } = props;\n    return <PagerViewInternal {...rest} useLegacy={!useNext} ref={ref} />;\n  }\n);\n\n// React.forwardRef does not type returned component properly, thus breaking Ref<MyComponent> typing.\n// One way to overcome this is using separate typing for component \"interface\",\n// but that breaks backward compatibility in this case.\n// Approach of merging type is hacky, but produces a good typing for both ref attributes and component itself.\nexport type PagerView = PagerViewInternal & typeof PagerView;\n","import type * as ReactNative from 'react-native';\nimport { PagerView } from './PagerView';\nexport default PagerView;\n\nimport type {\n  OnPageScrollEventData as PagerViewOnPageScrollEventData,\n  OnPageSelectedEventData as PagerViewOnPageSelectedEventData,\n  OnPageScrollStateChangedEventData as PageScrollStateChangedNativeEventData,\n  NativeProps,\n} from './specs/PagerViewNativeComponent';\n\nexport type {\n  PagerViewOnPageScrollEventData,\n  PagerViewOnPageSelectedEventData,\n  PageScrollStateChangedNativeEventData,\n  NativeProps as PagerViewProps,\n};\n\nexport type PagerViewOnPageScrollEvent =\n  ReactNative.NativeSyntheticEvent<PagerViewOnPageScrollEventData>;\n\nexport type PagerViewOnPageSelectedEvent =\n  ReactNative.NativeSyntheticEvent<PagerViewOnPageSelectedEventData>;\n\nexport type PageScrollStateChangedNativeEvent =\n  ReactNative.NativeSyntheticEvent<PageScrollStateChangedNativeEventData>;\n","/*\n  Note: The types below are duplicated between this file and `src/specs/PagerViewNativeComponent.ts`.\n\n  This is on purpose. Firstly, we're declaring two native modules with two different iOS implementation flavors, but the same API.\n  Secondly, as these files serve as a reference point for React Native's new architecture Codegen process (which takes care of the\n  automatic generation of the native modules) we cannot extract the types into a separate file, or declare both native modules\n  in one file, as Codegen supports neither of these workarounds at the time of writing.\n\n  In order to make things as intuitive as possible, the duplicated types in this file are *not* exported, as they are meant for use\n  in this file only, by Codegen-related functions.\n*/\nimport type * as React from 'react';\nimport type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\nimport type {\n  DirectEventHandler,\n  Double,\n  Int32,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\n\ntype OnPageScrollEventData = Readonly<{\n  position: Double;\n  offset: Double;\n}>;\n\ntype OnPageSelectedEventData = Readonly<{\n  position: Double;\n}>;\n\ntype OnPageScrollStateChangedEventData = Readonly<{\n  pageScrollState: 'idle' | 'dragging' | 'settling';\n}>;\n\ninterface NativeProps extends ViewProps {\n  scrollEnabled?: WithDefault<boolean, true>;\n  layoutDirection?: WithDefault<'ltr' | 'rtl', 'ltr'>;\n  initialPage?: Int32;\n  orientation?: WithDefault<'horizontal' | 'vertical', 'horizontal'>;\n  offscreenPageLimit?: Int32;\n  pageMargin?: Int32;\n  overScrollMode?: WithDefault<'auto' | 'always' | 'never', 'auto'>;\n  overdrag?: WithDefault<boolean, false>;\n  keyboardDismissMode?: WithDefault<'none' | 'on-drag', 'none'>;\n  onPageScroll?: DirectEventHandler<OnPageScrollEventData>;\n  onPageSelected?: DirectEventHandler<OnPageSelectedEventData>;\n  onPageScrollStateChanged?: DirectEventHandler<OnPageScrollStateChangedEventData>;\n  useLegacy?: WithDefault<boolean, true>;\n}\n\ntype PagerViewViewType = HostComponent<NativeProps>;\n\ninterface NativeCommands {\n  setPage: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    selectedPage: Int32\n  ) => void;\n  setPageWithoutAnimation: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    selectedPage: Int32\n  ) => void;\n  setScrollEnabledImperatively: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    scrollEnabled: boolean\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'setPage',\n    'setPageWithoutAnimation',\n    'setScrollEnabledImperatively',\n  ],\n});\n\nexport default codegenNativeComponent<NativeProps>(\n  'LEGACY_RNCViewPager'\n) as HostComponent<NativeProps>;\n","import type * as React from 'react';\nimport type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\nimport type {\n  DirectEventHandler,\n  Double,\n  Int32,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\n\nexport type OnPageScrollEventData = Readonly<{\n  position: Double;\n  offset: Double;\n}>;\n\nexport type OnPageSelectedEventData = Readonly<{\n  position: Double;\n}>;\n\nexport type OnPageScrollStateChangedEventData = Readonly<{\n  pageScrollState: 'idle' | 'dragging' | 'settling';\n}>;\n\nexport interface NativeProps extends ViewProps {\n  scrollEnabled?: WithDefault<boolean, true>;\n  layoutDirection?: WithDefault<'ltr' | 'rtl', 'ltr'>;\n  initialPage?: Int32;\n  orientation?: WithDefault<'horizontal' | 'vertical', 'horizontal'>;\n  offscreenPageLimit?: Int32;\n  pageMargin?: Int32;\n  overScrollMode?: WithDefault<'auto' | 'always' | 'never', 'auto'>;\n  overdrag?: WithDefault<boolean, false>;\n  keyboardDismissMode?: WithDefault<'none' | 'on-drag', 'none'>;\n  onPageScroll?: DirectEventHandler<OnPageScrollEventData>;\n  onPageSelected?: DirectEventHandler<OnPageSelectedEventData>;\n  onPageScrollStateChanged?: DirectEventHandler<OnPageScrollStateChangedEventData>;\n  useLegacy?: WithDefault<boolean, true>;\n}\n\ntype PagerViewViewType = HostComponent<NativeProps>;\n\nexport interface NativeCommands {\n  setPage: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    selectedPage: Int32\n  ) => void;\n  setPageWithoutAnimation: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    selectedPage: Int32\n  ) => void;\n  setScrollEnabledImperatively: (\n    viewRef: React.ElementRef<PagerViewViewType>,\n    scrollEnabled: boolean\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'setPage',\n    'setPageWithoutAnimation',\n    'setScrollEnabledImperatively',\n  ],\n});\n\nexport default codegenNativeComponent<NativeProps>(\n  'RNCViewPager'\n) as HostComponent<NativeProps>;\n","import React, { Children, ReactNode } from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\n\nexport const LEGACY_childrenWithOverriddenStyle = (children?: ReactNode) => {\n  return Children.map(children, (child) => {\n    const element = child as React.ReactElement;\n    return (\n      // Add a wrapper to ensure layout is calculated correctly\n      <View style={StyleSheet.absoluteFill} collapsable={false}>\n        {/* @ts-ignore */}\n        {React.cloneElement(element, {\n          ...element.props,\n          // Override styles so that each page will fill the parent.\n          style: [element.props.style, StyleSheet.absoluteFill],\n        })}\n      </View>\n    );\n  });\n};\n\nexport const childrenWithOverriddenStyle = (\n  children?: ReactNode,\n  pageMargin = 0\n) => {\n  return Children.map(children, (child) => {\n    return (\n      <View\n        style={{\n          height: '100%',\n          width: '100%',\n          paddingHorizontal: pageMargin / 2,\n          position: Platform.OS === 'android' ? 'absolute' : undefined,\n        }}\n        collapsable={false}\n      >\n        {child}\n      </View>\n    );\n  });\n};\n"],"names":["_react","_interopRequireDefault","require","_reactNative","_utils","_PagerViewNativeComponent","_interopRequireWildcard","_LEGACY_PagerViewNativeComponent","_jsxRuntime","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_callSuper","o","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","PagerViewInternal","_React$Component","_this","_classCallCheck2","_len","arguments","length","args","Array","_key","concat","isScrolling","pagerView","_onPageScroll","props","onPageScroll","Platform","OS","keyboardDismissMode","Keyboard","dismiss","_onPageScrollStateChanged","onPageScrollStateChanged","nativeEvent","pageScrollState","_onPageSelected","onPageSelected","_onMoveShouldSetResponderCapture","setPage","selectedPage","nativeCommandsWrapper","setPageWithoutAnimation","setScrollEnabled","scrollEnabled","setScrollEnabledImperatively","_inherits2","_createClass2","key","this","useLegacy","LEGACY_PagerViewNativeCommands","PagerViewNativeCommands","layoutDirection","I18nManager","isRTL","value","_this2","jsx","assign","ref","style","deducedLayoutDirection","onMoveShouldSetResponderCapture","children","LEGACY_childrenWithOverriddenStyle","pageMargin","marginHorizontal","flexDirection","orientation","childrenWithOverriddenStyle","React","Component","exports","forwardRef","useNext","rest","_objectWithoutProperties2","_PagerView","PagerView","NativeComponentRegistry","ConditionallyIgnoredEventHandlers","dispatchCommand","__INTERNAL_VIEW_CONFIG","uiViewClassName","directEventTypes","topPageScroll","registrationName","topPageSelected","topPageScrollStateChanged","validAttributes","initialPage","offscreenPageLimit","overScrollMode","overdrag","Children","map","child","element","View","StyleSheet","absoluteFill","collapsable","cloneElement","undefined","height","width","paddingHorizontal","position"],"sourceRoot":""}