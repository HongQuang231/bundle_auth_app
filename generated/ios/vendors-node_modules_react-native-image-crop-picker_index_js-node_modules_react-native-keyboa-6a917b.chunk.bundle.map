{"version":3,"file":"vendors-node_modules_react-native-image-crop-picker_index_js-node_modules_react-native-keyboa-6a917b.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native-image-crop-picker/index.js","webpack:///./node_modules/react-native-iphone-x-helper/index.js","webpack:///./node_modules/react-native-keyboard-aware-scroll-view/index.js","webpack:///./node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareFlatList.js","webpack:///./node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js","webpack:///./node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareScrollView.js","webpack:///./node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareSectionList.js","webpack:///./node_modules/zustand/index.js","webpack:///./node_modules/zustand/react.js","webpack:///./node_modules/zustand/vanilla.js"],"sourcesContent":["import React from 'react';\n\nimport {NativeModules} from 'react-native';\n\nconst ImageCropPicker = NativeModules.ImageCropPicker;\n\nexport default ImageCropPicker;\nexport const openPicker = ImageCropPicker.openPicker;\nexport const openCamera = ImageCropPicker.openCamera;\nexport const openCropper = ImageCropPicker.openCropper;\nexport const clean = ImageCropPicker.clean;\nexport const cleanSingle = ImageCropPicker.cleanSingle;\n","import { Dimensions, Platform, StatusBar } from 'react-native';\n\nexport function isIphoneX() {\n    const dimen = Dimensions.get('window');\n    return (\n        Platform.OS === 'ios' &&\n        !Platform.isPad &&\n        !Platform.isTVOS &&\n        ((dimen.height === 780 || dimen.width === 780)\n          || (dimen.height === 812 || dimen.width === 812)\n          || (dimen.height === 844 || dimen.width === 844)\n          || (dimen.height === 896 || dimen.width === 896)\n          || (dimen.height === 926 || dimen.width === 926))\n    );\n}\n\nexport function ifIphoneX(iphoneXStyle, regularStyle) {\n    if (isIphoneX()) {\n        return iphoneXStyle;\n    }\n    return regularStyle;\n}\n\nexport function getStatusBarHeight(safe) {\n    return Platform.select({\n        ios: ifIphoneX(safe ? 44 : 30, 20),\n        android: StatusBar.currentHeight,\n        default: 0\n    });\n}\n\nexport function getBottomSpace() {\n    return isIphoneX() ? 34 : 0;\n}\n","/* @flow */\n\nimport listenToKeyboardEvents from './lib/KeyboardAwareHOC'\nimport KeyboardAwareScrollView from './lib/KeyboardAwareScrollView'\nimport KeyboardAwareFlatList from './lib/KeyboardAwareFlatList'\nimport KeyboardAwareSectionList from './lib/KeyboardAwareSectionList'\n\nexport {\n  listenToKeyboardEvents,\n  KeyboardAwareFlatList,\n  KeyboardAwareSectionList,\n  KeyboardAwareScrollView\n}\n","/* @flow */\n\nimport { FlatList } from 'react-native'\nimport listenToKeyboardEvents from './KeyboardAwareHOC'\n\nexport default listenToKeyboardEvents(FlatList)\n","/* @flow */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  Keyboard,\n  Platform,\n  UIManager,\n  TextInput,\n  findNodeHandle,\n  Animated\n} from 'react-native'\nimport { isIphoneX } from 'react-native-iphone-x-helper'\nimport type { KeyboardAwareInterface } from './KeyboardAwareInterface'\n\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = isIphoneX() ? 83 : 49\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\nconst _KAM_EXTRA_HEIGHT: number = 75\n\nconst supportedKeyboardEvents = [\n  'keyboardWillShow',\n  'keyboardDidShow',\n  'keyboardWillHide',\n  'keyboardDidHide',\n  'keyboardWillChangeFrame',\n  'keyboardDidChangeFrame'\n]\nconst keyboardEventToCallbackName = (eventName: string) =>\n  'on' + eventName[0].toUpperCase() + eventName.substring(1)\nconst keyboardEventPropTypes = supportedKeyboardEvents.reduce(\n  (acc: Object, eventName: string) => ({\n    ...acc,\n    [keyboardEventToCallbackName(eventName)]: PropTypes.func\n  }),\n  {}\n)\nconst keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(\n  (acc: Object, eventName: string) => ({\n    ...acc,\n    [keyboardEventToCallbackName(eventName)]: Function\n  }),\n  {}\n)\n\nexport type KeyboardAwareHOCProps = {\n  viewIsInsideTabBar?: boolean,\n  resetScrollToCoords?: {\n    x: number,\n    y: number\n  },\n  enableResetScrollToCoords?: boolean,\n  enableAutomaticScroll?: boolean,\n  extraHeight?: number,\n  extraScrollHeight?: number,\n  keyboardOpeningTime?: number,\n  onScroll?: Function,\n  update?: Function,\n  contentContainerStyle?: any,\n  enableOnAndroid?: boolean,\n  innerRef?: Function,\n  ...keyboardAwareHOCTypeEvents\n}\nexport type KeyboardAwareHOCState = {\n  keyboardSpace: number\n}\n\nexport type ElementLayout = {\n  x: number,\n  y: number,\n  width: number,\n  height: number\n}\n\nexport type ContentOffset = {\n  x: number,\n  y: number\n}\n\nexport type ScrollPosition = {\n  x: number,\n  y: number,\n  animated: boolean\n}\n\nexport type ScrollIntoViewOptions = ?{\n  getScrollPosition?: (\n    parentLayout: ElementLayout,\n    childLayout: ElementLayout,\n    contentOffset: ContentOffset\n  ) => ScrollPosition\n}\n\nexport type KeyboardAwareHOCOptions = ?{\n  enableOnAndroid: boolean,\n  contentContainerStyle: ?Object,\n  enableAutomaticScroll: boolean,\n  extraHeight: number,\n  extraScrollHeight: number,\n  enableResetScrollToCoords: boolean,\n  keyboardOpeningTime: number,\n  viewIsInsideTabBar: boolean,\n  refPropName: string,\n  extractNativeRef: Function\n}\n\nfunction getDisplayName(WrappedComponent: React$Component) {\n  return (\n    (WrappedComponent &&\n      (WrappedComponent.displayName || WrappedComponent.name)) ||\n    'Component'\n  )\n}\n\nconst ScrollIntoViewDefaultOptions: KeyboardAwareHOCOptions = {\n  enableOnAndroid: false,\n  contentContainerStyle: undefined,\n  enableAutomaticScroll: true,\n  extraHeight: _KAM_EXTRA_HEIGHT,\n  extraScrollHeight: 0,\n  enableResetScrollToCoords: true,\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n  viewIsInsideTabBar: false,\n\n  // The ref prop name that will be passed to the wrapped component to obtain a ref\n  // If your ScrollView is already wrapped, maybe the wrapper permit to get a ref\n  // For example, with glamorous-native ScrollView, you should use \"innerRef\"\n  refPropName: 'ref',\n  // Sometimes the ref you get is a ref to a wrapped view (ex: Animated.ScrollView)\n  // We need access to the imperative API of a real native ScrollView so we need extraction logic\n  extractNativeRef: (ref: Object) => {\n    // getNode() permit to support Animated.ScrollView automatically, but is deprecated since RN 0.62\n    // see https://github.com/facebook/react-native/issues/19650\n    // see https://stackoverflow.com/questions/42051368/scrollto-is-undefined-on-animated-scrollview/48786374\n    // see https://github.com/facebook/react-native/commit/66e72bb4e00aafbcb9f450ed5db261d98f99f82a\n    const shouldCallGetNode = !Platform.constants || (Platform.constants.reactNativeVersion.major === 0 && Platform.constants.reactNativeVersion.minor < 62)\n    if (ref.getNode && shouldCallGetNode) {\n      return ref.getNode()\n    } else {\n      return ref\n    }\n  }\n}\n\nfunction KeyboardAwareHOC(\n  ScrollableComponent: React$Component,\n  userOptions: KeyboardAwareHOCOptions = {}\n) {\n  const hocOptions: KeyboardAwareHOCOptions = {\n    ...ScrollIntoViewDefaultOptions,\n    ...userOptions\n  }\n\n  return class\n    extends React.Component<KeyboardAwareHOCProps, KeyboardAwareHOCState>\n    implements KeyboardAwareInterface {\n    _rnkasv_keyboardView: any\n    keyboardWillShowEvent: ?Function\n    keyboardWillHideEvent: ?Function\n    position: ContentOffset\n    defaultResetScrollToCoords: ?{ x: number, y: number }\n    mountedComponent: boolean\n    handleOnScroll: Function\n    state: KeyboardAwareHOCState\n    static displayName = `KeyboardAware${getDisplayName(ScrollableComponent)}`\n\n    static propTypes = {\n      viewIsInsideTabBar: PropTypes.bool,\n      resetScrollToCoords: PropTypes.shape({\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired\n      }),\n      enableResetScrollToCoords: PropTypes.bool,\n      enableAutomaticScroll: PropTypes.bool,\n      extraHeight: PropTypes.number,\n      extraScrollHeight: PropTypes.number,\n      keyboardOpeningTime: PropTypes.number,\n      onScroll: PropTypes.oneOfType([\n        PropTypes.func, // Normal listener\n        PropTypes.object // Animated.event listener\n      ]),\n      update: PropTypes.func,\n      contentContainerStyle: PropTypes.any,\n      enableOnAndroid: PropTypes.bool,\n      innerRef: PropTypes.func,\n      ...keyboardEventPropTypes\n    }\n\n    // HOC options are used to init default props, so that these options can be overriden with component props\n    static defaultProps = {\n      enableAutomaticScroll: hocOptions.enableAutomaticScroll,\n      extraHeight: hocOptions.extraHeight,\n      extraScrollHeight: hocOptions.extraScrollHeight,\n      enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\n      keyboardOpeningTime: hocOptions.keyboardOpeningTime,\n      viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\n      enableOnAndroid: hocOptions.enableOnAndroid\n    }\n\n    constructor(props: KeyboardAwareHOCProps) {\n      super(props)\n      this.keyboardWillShowEvent = undefined\n      this.keyboardWillHideEvent = undefined\n      this.callbacks = {}\n      this.position = { x: 0, y: 0 }\n      this.defaultResetScrollToCoords = null\n      const keyboardSpace: number = props.viewIsInsideTabBar\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n        : 0\n      this.state = { keyboardSpace }\n    }\n\n    componentDidMount() {\n      this.mountedComponent = true\n      // Keyboard events\n      if (Platform.OS === 'ios') {\n        this.keyboardWillShowEvent = Keyboard.addListener(\n          'keyboardWillShow',\n          this._updateKeyboardSpace\n        )\n        this.keyboardWillHideEvent = Keyboard.addListener(\n          'keyboardWillHide',\n          this._resetKeyboardSpace\n        )\n      } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\n        this.keyboardWillShowEvent = Keyboard.addListener(\n          'keyboardDidShow',\n          this._updateKeyboardSpace\n        )\n        this.keyboardWillHideEvent = Keyboard.addListener(\n          'keyboardDidHide',\n          this._resetKeyboardSpace\n        )\n      }\n\n      supportedKeyboardEvents.forEach((eventName: string) => {\n        const callbackName = keyboardEventToCallbackName(eventName)\n        if (this.props[callbackName]) {\n          this.callbacks[eventName] = Keyboard.addListener(\n            eventName,\n            this.props[callbackName]\n          )\n        }\n      })\n    }\n\n    componentDidUpdate(prevProps: KeyboardAwareHOCProps) {\n      if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\n        const keyboardSpace: number = this.props.viewIsInsideTabBar\n          ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n          : 0\n        if (this.state.keyboardSpace !== keyboardSpace) {\n          this.setState({ keyboardSpace })\n        }\n      }\n    }\n\n    componentWillUnmount() {\n      this.mountedComponent = false\n      this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\n      this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\n      Object.values(this.callbacks).forEach((callback: Object) =>\n        callback.remove()\n      )\n    }\n\n    getScrollResponder = () => {\n      return (\n        this._rnkasv_keyboardView &&\n        this._rnkasv_keyboardView.getScrollResponder &&\n        this._rnkasv_keyboardView.getScrollResponder()\n      )\n    }\n\n    scrollToPosition = (x: number, y: number, animated: boolean = true) => {\n      const responder = this.getScrollResponder()\n      if (!responder) {\n        return\n      }\n      if (responder.scrollResponderScrollTo) {\n        // React Native < 0.65\n        responder.scrollResponderScrollTo({ x, y, animated })\n      } else if (responder.scrollTo) {\n        // React Native >= 0.65\n        responder.scrollTo({ x, y, animated })\n      }\n    }\n\n    scrollToEnd = (animated?: boolean = true) => {\n      const responder = this.getScrollResponder()\n      if (!responder) {\n        return\n      }\n      if (responder.scrollResponderScrollToEnd) {\n        // React Native < 0.65\n        responder.scrollResponderScrollToEnd({ animated })\n      } else if (responder.scrollToEnd) {\n        // React Native >= 0.65\n        responder.scrollToEnd({ animated })\n      }\n    }\n\n    scrollForExtraHeightOnAndroid = (extraHeight: number) => {\n      this.scrollToPosition(0, this.position.y + extraHeight, true)\n    }\n\n    /**\n     * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\n     * @param extraHeight: takes an extra height in consideration.\n     */\n    scrollToFocusedInput = (\n      reactNode: any,\n      extraHeight?: number,\n      keyboardOpeningTime?: number\n    ) => {\n      if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight || 0\n      }\n      if (keyboardOpeningTime === undefined) {\n        keyboardOpeningTime = this.props.keyboardOpeningTime || 0\n      }\n      setTimeout(() => {\n        if (!this.mountedComponent) {\n          return\n        }\n        const responder = this.getScrollResponder()\n        responder &&\n          responder.scrollResponderScrollNativeHandleToKeyboard(\n            reactNode,\n            extraHeight,\n            true\n          )\n      }, keyboardOpeningTime)\n    }\n\n    scrollIntoView = async (\n      element: React.Element<*>,\n      options: ScrollIntoViewOptions = {}\n    ) => {\n      if (!this._rnkasv_keyboardView || !element) {\n        return\n      }\n\n      const [parentLayout, childLayout] = await Promise.all([\n        this._measureElement(this._rnkasv_keyboardView),\n        this._measureElement(element)\n      ])\n\n      const getScrollPosition =\n        options.getScrollPosition || this._defaultGetScrollPosition\n      const { x, y, animated } = getScrollPosition(\n        parentLayout,\n        childLayout,\n        this.position\n      )\n      this.scrollToPosition(x, y, animated)\n    }\n\n    _defaultGetScrollPosition = (\n      parentLayout: ElementLayout,\n      childLayout: ElementLayout,\n      contentOffset: ContentOffset\n    ): ScrollPosition => {\n      return {\n        x: 0,\n        y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\n        animated: true\n      }\n    }\n\n    _measureElement = (element: React.Element<*>): Promise<ElementLayout> => {\n      const node = findNodeHandle(element)\n      return new Promise((resolve: ElementLayout => void) => {\n        UIManager.measureInWindow(\n          node,\n          (x: number, y: number, width: number, height: number) => {\n            resolve({ x, y, width, height })\n          }\n        )\n      })\n    }\n\n    // Keyboard actions\n    _updateKeyboardSpace = (frames: Object) => {\n      // Automatically scroll to focused TextInput\n      if (this.props.enableAutomaticScroll) {\n        let keyboardSpace: number =\n          frames.endCoordinates.height + this.props.extraScrollHeight\n        if (this.props.viewIsInsideTabBar) {\n          keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\n        }\n        this.setState({ keyboardSpace })\n        const currentlyFocusedField =  TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField()\n        const responder = this.getScrollResponder()\n        if (!currentlyFocusedField || !responder) {\n          return\n        }\n        UIManager.viewIsDescendantOf(\n          currentlyFocusedField,\n          responder.getInnerViewNode(),\n          (isAncestor: boolean) => {\n            if (isAncestor) {\n              // Check if the TextInput will be hidden by the keyboard\n              UIManager.measureInWindow(\n                currentlyFocusedField,\n                (x: number, y: number, width: number, height: number) => {\n                  const textInputBottomPosition = y + height\n                  const keyboardPosition = frames.endCoordinates.screenY\n                  const totalExtraHeight =\n                    this.props.extraScrollHeight + this.props.extraHeight\n                  if (Platform.OS === 'ios') {\n                    if (\n                      textInputBottomPosition >\n                      keyboardPosition - totalExtraHeight\n                    ) {\n                      this._scrollToFocusedInputWithNodeHandle(\n                        currentlyFocusedField\n                      )\n                    }\n                  } else {\n                    // On android, the system would scroll the text input just\n                    // above the keyboard so we just neet to scroll the extra\n                    // height part\n                    if (textInputBottomPosition > keyboardPosition) {\n                      // Since the system already scrolled the whole view up\n                      // we should reduce that amount\n                      keyboardSpace =\n                        keyboardSpace -\n                        (textInputBottomPosition - keyboardPosition)\n                      this.setState({ keyboardSpace })\n                      this.scrollForExtraHeightOnAndroid(totalExtraHeight)\n                    } else if (\n                      textInputBottomPosition >\n                      keyboardPosition - totalExtraHeight\n                    ) {\n                      this.scrollForExtraHeightOnAndroid(\n                        totalExtraHeight -\n                          (keyboardPosition - textInputBottomPosition)\n                      )\n                    }\n                  }\n                }\n              )\n            }\n          }\n        )\n      }\n      if (!this.props.resetScrollToCoords) {\n        if (!this.defaultResetScrollToCoords) {\n          this.defaultResetScrollToCoords = this.position\n        }\n      }\n    }\n\n    _resetKeyboardSpace = () => {\n      const keyboardSpace: number = this.props.viewIsInsideTabBar\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\n        : 0\n      this.setState({ keyboardSpace })\n      // Reset scroll position after keyboard dismissal\n      if (this.props.enableResetScrollToCoords === false) {\n        this.defaultResetScrollToCoords = null\n        return\n      } else if (this.props.resetScrollToCoords) {\n        this.scrollToPosition(\n          this.props.resetScrollToCoords.x,\n          this.props.resetScrollToCoords.y,\n          true\n        )\n      } else {\n        if (this.defaultResetScrollToCoords) {\n          this.scrollToPosition(\n            this.defaultResetScrollToCoords.x,\n            this.defaultResetScrollToCoords.y,\n            true\n          )\n          this.defaultResetScrollToCoords = null\n        } else {\n          this.scrollToPosition(0, 0, true)\n        }\n      }\n    }\n\n    _scrollToFocusedInputWithNodeHandle = (\n      nodeID: number,\n      extraHeight?: number,\n      keyboardOpeningTime?: number\n    ) => {\n      if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight\n      }\n      const reactNode = findNodeHandle(nodeID)\n      this.scrollToFocusedInput(\n        reactNode,\n        extraHeight + this.props.extraScrollHeight,\n        keyboardOpeningTime !== undefined\n          ? keyboardOpeningTime\n          : this.props.keyboardOpeningTime || 0\n      )\n    }\n\n    _handleOnScroll = (\n      e: SyntheticEvent<*> & { nativeEvent: { contentOffset: number } }\n    ) => {\n      this.position = e.nativeEvent.contentOffset\n    }\n\n    _handleRef = (ref: React.Component<*>) => {\n      this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref\n      if (this.props.innerRef) {\n        this.props.innerRef(this._rnkasv_keyboardView)\n      }\n    }\n\n    update = () => {\n      const currentlyFocusedField =  TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField()\n      const responder = this.getScrollResponder()\n\n      if (!currentlyFocusedField || !responder) {\n        return\n      }\n\n      this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField)\n    }\n\n    render() {\n      const { enableOnAndroid, contentContainerStyle, onScroll } = this.props\n      let newContentContainerStyle\n      if (Platform.OS === 'android' && enableOnAndroid) {\n        newContentContainerStyle = [].concat(contentContainerStyle).concat({\n          paddingBottom:\n            ((contentContainerStyle || {}).paddingBottom || 0) +\n            this.state.keyboardSpace\n        })\n      }\n      const refProps = { [hocOptions.refPropName]: this._handleRef }\n      return (\n        <ScrollableComponent\n          {...refProps}\n          keyboardDismissMode='interactive'\n          contentInset={{ bottom: this.state.keyboardSpace }}\n          automaticallyAdjustContentInsets={false}\n          showsVerticalScrollIndicator={true}\n          scrollEventThrottle={1}\n          {...this.props}\n          contentContainerStyle={\n            newContentContainerStyle || contentContainerStyle\n          }\n          keyboardSpace={this.state.keyboardSpace}\n          getScrollResponder={this.getScrollResponder}\n          scrollToPosition={this.scrollToPosition}\n          scrollToEnd={this.scrollToEnd}\n          scrollForExtraHeightOnAndroid={this.scrollForExtraHeightOnAndroid}\n          scrollToFocusedInput={this.scrollToFocusedInput}\n          scrollIntoView={this.scrollIntoView}\n          resetKeyboardSpace={this._resetKeyboardSpace}\n          handleOnScroll={this._handleOnScroll}\n          update={this.update}\n          onScroll={Animated.forkEvent(onScroll, this._handleOnScroll)}\n        />\n      )\n    }\n  }\n}\n\n// Allow to pass options, without breaking change, and curried for composition\n// listenToKeyboardEvents(ScrollView);\n// listenToKeyboardEvents(options)(Comp);\nconst listenToKeyboardEvents = (configOrComp: any) => {\n  if (typeof configOrComp === 'object' && !configOrComp.displayName) {\n    return (Comp: Function) => KeyboardAwareHOC(Comp, configOrComp)\n  } else {\n    return KeyboardAwareHOC(configOrComp)\n  }\n}\n\nexport default listenToKeyboardEvents\n","/* @flow */\n\nimport { ScrollView } from 'react-native'\nimport listenToKeyboardEvents from './KeyboardAwareHOC'\n\nexport default listenToKeyboardEvents(ScrollView)\n","/* @flow */\n\nimport { SectionList } from 'react-native'\nimport listenToKeyboardEvents from './KeyboardAwareHOC'\n\nexport default listenToKeyboardEvents(SectionList)\n","'use strict';\n\nvar vanilla = require('zustand/vanilla');\nvar react = require('zustand/react');\n\n\n\nObject.keys(vanilla).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {\n\t\tenumerable: true,\n\t\tget: function () { return vanilla[k]; }\n\t});\n});\nObject.keys(react).forEach(function (k) {\n\tif (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) Object.defineProperty(exports, k, {\n\t\tenumerable: true,\n\t\tget: function () { return react[k]; }\n\t});\n});\n","'use strict';\n\nvar React = require('react');\nvar vanilla = require('zustand/vanilla');\n\nconst identity = (arg) => arg;\nfunction useStore(api, selector = identity) {\n  const slice = React.useSyncExternalStore(\n    api.subscribe,\n    () => selector(api.getState()),\n    () => selector(api.getInitialState())\n  );\n  React.useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  const api = vanilla.createStore(createState);\n  const useBoundStore = (selector) => useStore(api, selector);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\n\nexports.create = create;\nexports.useStore = useStore;\n","'use strict';\n\nconst createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const api = { setState, getState, getInitialState, subscribe };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\n\nexports.createStore = createStore;\n"],"names":["_interopRequireDefault","require","ImageCropPicker","NativeModules","exports","openPicker","openCamera","openCropper","clean","cleanSingle","isIphoneX","safe","Platform","select","ios","ifIphoneX","android","StatusBar","currentHeight","default","_reactNative","dimen","Dimensions","get","OS","isPad","isTVOS","height","width","iphoneXStyle","regularStyle","_KeyboardAwareHOC","_KeyboardAwareScrollView","_KeyboardAwareFlatList","_KeyboardAwareSectionList","listenToKeyboardEvents","FlatList","_react","_propTypes","_reactNativeIphoneXHelper","_jsxRuntime","_isNativeReflectConstruct","t","Boolean","prototype","valueOf","call","Reflect","construct","_KAM_DEFAULT_TAB_BAR_HEIGHT","supportedKeyboardEvents","keyboardEventToCallbackName","eventName","toUpperCase","substring","keyboardEventPropTypes","reduce","acc","Object","assign","_defineProperty2","PropTypes","func","Function","ScrollIntoViewDefaultOptions","enableOnAndroid","contentContainerStyle","undefined","enableAutomaticScroll","extraHeight","extraScrollHeight","enableResetScrollToCoords","keyboardOpeningTime","viewIsInsideTabBar","refPropName","extractNativeRef","ref","shouldCallGetNode","constants","reactNativeVersion","major","minor","getNode","KeyboardAwareHOC","ScrollableComponent","_Class","WrappedComponent","userOptions","arguments","length","hocOptions","_React$Component","props","_this","o","e","_ref","_classCallCheck2","_getPrototypeOf2","_possibleConstructorReturn2","constructor","apply","getScrollResponder","_rnkasv_keyboardView","scrollToPosition","x","y","animated","responder","scrollResponderScrollTo","scrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollForExtraHeightOnAndroid","position","scrollToFocusedInput","reactNode","setTimeout","mountedComponent","scrollResponderScrollNativeHandleToKeyboard","scrollIntoView","_asyncToGenerator2","element","options","_yield$Promise$all","Promise","all","_measureElement","_yield$Promise$all2","_slicedToArray2","parentLayout","childLayout","_getScrollPosition","getScrollPosition","_defaultGetScrollPosition","_x","contentOffset","Math","max","node","findNodeHandle","resolve","UIManager","measureInWindow","_updateKeyboardSpace","frames","keyboardSpace","endCoordinates","setState","currentlyFocusedField","TextInput","State","currentlyFocusedInput","viewIsDescendantOf","getInnerViewNode","isAncestor","textInputBottomPosition","keyboardPosition","screenY","totalExtraHeight","_scrollToFocusedInputWithNodeHandle","resetScrollToCoords","defaultResetScrollToCoords","_resetKeyboardSpace","nodeID","_handleOnScroll","nativeEvent","_handleRef","innerRef","update","keyboardWillShowEvent","keyboardWillHideEvent","callbacks","state","_inherits2","_createClass2","key","value","_this2","this","Keyboard","addListener","forEach","callbackName","prevProps","remove","values","callback","newContentContainerStyle","_this$props","onScroll","concat","paddingBottom","refProps","jsx","keyboardDismissMode","contentInset","bottom","automaticallyAdjustContentInsets","showsVerticalScrollIndicator","scrollEventThrottle","resetKeyboardSpace","handleOnScroll","Animated","forkEvent","React","Component","displayName","name","propTypes","bool","shape","number","isRequired","oneOfType","object","any","defaultProps","configOrComp","Comp","ScrollView","SectionList","vanilla","react","keys","k","hasOwnProperty","defineProperty","enumerable","identity","arg","useStore","api","selector","slice","useSyncExternalStore","subscribe","getState","getInitialState","useDebugValue","createImpl","createState","createStore","useBoundStore","create","createStoreImpl","listeners","Set","partial","replace","nextState","is","previousState","listener","initialState","add","delete"],"sourceRoot":""}