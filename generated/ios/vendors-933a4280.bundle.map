{"version":3,"file":"vendors-933a4280.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypes.ios.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypesIOS.ios.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/Rect.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/StyleSheet.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/flattenStyle.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/normalizeColor.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/processAspectRatio.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/processColor.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/processColorArray.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/processFontVariant.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/processTransform.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/processTransformOrigin.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/splitLayoutProps.js","webpack:///./node_modules/react-native/Libraries/Text/Text.js","webpack:///./node_modules/react-native/Libraries/Text/TextAncestor.js","webpack:///./node_modules/react-native/Libraries/Text/TextNativeComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ProcessedColorValue} from './processColor';\nimport type {ColorValue, NativeColorValue} from './StyleSheet';\n\n/** The actual type of the opaque NativeColorValue on iOS platform */\ntype LocalNativeColorValue = {\n  semantic?: Array<string>,\n  dynamic?: {\n    light: ?(ColorValue | ProcessedColorValue),\n    dark: ?(ColorValue | ProcessedColorValue),\n    highContrastLight?: ?(ColorValue | ProcessedColorValue),\n    highContrastDark?: ?(ColorValue | ProcessedColorValue),\n  },\n};\n\nexport const PlatformColor = (...names: Array<string>): ColorValue => {\n  // $FlowExpectedError[incompatible-return] LocalNativeColorValue is the iOS LocalNativeColorValue type\n  return ({semantic: names}: LocalNativeColorValue);\n};\n\nexport type DynamicColorIOSTuplePrivate = {\n  light: ColorValue,\n  dark: ColorValue,\n  highContrastLight?: ColorValue,\n  highContrastDark?: ColorValue,\n};\n\nexport const DynamicColorIOSPrivate = (\n  tuple: DynamicColorIOSTuplePrivate,\n): ColorValue => {\n  return ({\n    dynamic: {\n      light: tuple.light,\n      dark: tuple.dark,\n      highContrastLight: tuple.highContrastLight,\n      highContrastDark: tuple.highContrastDark,\n    },\n    /* $FlowExpectedError[incompatible-return]\n     * LocalNativeColorValue is the actual type of the opaque NativeColorValue on iOS platform */\n  }: LocalNativeColorValue);\n};\n\nconst _normalizeColorObject = (\n  color: LocalNativeColorValue,\n): ?LocalNativeColorValue => {\n  if ('semantic' in color) {\n    // an ios semantic color\n    return color;\n  } else if ('dynamic' in color && color.dynamic !== undefined) {\n    const normalizeColor = require('./normalizeColor');\n\n    // a dynamic, appearance aware color\n    const dynamic = color.dynamic;\n    const dynamicColor: LocalNativeColorValue = {\n      dynamic: {\n        // $FlowFixMe[incompatible-use]\n        light: normalizeColor(dynamic.light),\n        // $FlowFixMe[incompatible-use]\n        dark: normalizeColor(dynamic.dark),\n        // $FlowFixMe[incompatible-use]\n        highContrastLight: normalizeColor(dynamic.highContrastLight),\n        // $FlowFixMe[incompatible-use]\n        highContrastDark: normalizeColor(dynamic.highContrastDark),\n      },\n    };\n    return dynamicColor;\n  }\n  return null;\n};\n\nexport const normalizeColorObject: (\n  color: NativeColorValue,\n  /* $FlowExpectedError[incompatible-type]\n   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on iOS platform */\n) => ?ProcessedColorValue = _normalizeColorObject;\n\nconst _processColorObject = (\n  color: LocalNativeColorValue,\n): ?LocalNativeColorValue => {\n  if ('dynamic' in color && color.dynamic != null) {\n    const processColor = require('./processColor').default;\n    const dynamic = color.dynamic;\n    const dynamicColor: LocalNativeColorValue = {\n      dynamic: {\n        // $FlowFixMe[incompatible-use]\n        light: processColor(dynamic.light),\n        // $FlowFixMe[incompatible-use]\n        dark: processColor(dynamic.dark),\n        // $FlowFixMe[incompatible-use]\n        highContrastLight: processColor(dynamic.highContrastLight),\n        // $FlowFixMe[incompatible-use]\n        highContrastDark: processColor(dynamic.highContrastDark),\n      },\n    };\n    return dynamicColor;\n  }\n  return color;\n};\n\nexport const processColorObject: (\n  color: NativeColorValue,\n  /* $FlowExpectedError[incompatible-type]\n   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on iOS platform */\n) => ?NativeColorValue = _processColorObject;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ColorValue} from './StyleSheet';\n\nimport {DynamicColorIOSPrivate} from './PlatformColorValueTypes.ios';\n\nexport type DynamicColorIOSTuple = {\n  light: ColorValue,\n  dark: ColorValue,\n  highContrastLight?: ColorValue,\n  highContrastDark?: ColorValue,\n};\n\nexport const DynamicColorIOS = (tuple: DynamicColorIOSTuple): ColorValue => {\n  return DynamicColorIOSPrivate({\n    light: tuple.light,\n    dark: tuple.dark,\n    highContrastLight: tuple.highContrastLight,\n    highContrastDark: tuple.highContrastDark,\n  });\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nexport type Rect = $ReadOnly<{|\n  bottom?: ?number,\n  left?: ?number,\n  right?: ?number,\n  top?: ?number,\n|}>;\n\nexport type RectOrSize = Rect | number;\n\nexport function createSquare(size: number): Rect {\n  return {bottom: size, left: size, right: size, top: size};\n}\n\nexport function normalizeRect(rectOrSize: ?RectOrSize): ?Rect {\n  return typeof rectOrSize === 'number' ? createSquare(rectOrSize) : rectOrSize;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {\n  ____ColorValue_Internal,\n  ____DangerouslyImpreciseStyle_Internal,\n  ____DangerouslyImpreciseStyleProp_Internal,\n  ____ImageStyle_Internal,\n  ____ImageStyleProp_Internal,\n  ____Styles_Internal,\n  ____TextStyle_Internal,\n  ____TextStyleProp_Internal,\n  ____ViewStyle_Internal,\n  ____ViewStyleProp_Internal,\n} from './StyleSheetTypes';\n\nconst ReactNativeStyleAttributes = require('../Components/View/ReactNativeStyleAttributes');\nconst PixelRatio = require('../Utilities/PixelRatio').default;\nconst flatten = require('./flattenStyle');\n\nexport type {NativeColorValue} from './StyleSheetTypes';\n\n/**\n * This type should be used as the type for anything that is a color. It is\n * most useful when using DynamicColorIOS which can be a string or a dynamic\n * color object.\n *\n * type props = {backgroundColor: ColorValue};\n */\nexport type ColorValue = ____ColorValue_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to a <View>'s `style` prop. This ensures call sites of the component\n * can't pass styles that View doesn't support such as `fontSize`.`\n *\n * type Props = {style: ViewStyleProp}\n * const MyComponent = (props: Props) => <View style={props.style} />\n */\nexport type ViewStyleProp = ____ViewStyleProp_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to a <Text>'s `style` prop. This ensures call sites of the component\n * can't pass styles that Text doesn't support such as `resizeMode`.`\n *\n * type Props = {style: TextStyleProp}\n * const MyComponent = (props: Props) => <Text style={props.style} />\n */\nexport type TextStyleProp = ____TextStyleProp_Internal;\n\n/**\n * This type should be used as the type for a prop that is passed through\n * to an <Image>'s `style` prop. This ensures call sites of the component\n * can't pass styles that Image doesn't support such as `fontSize`.`\n *\n * type Props = {style: ImageStyleProp}\n * const MyComponent = (props: Props) => <Image style={props.style} />\n */\nexport type ImageStyleProp = ____ImageStyleProp_Internal;\n\n/**\n * WARNING: You probably shouldn't be using this type. This type\n * is similar to the ones above except it allows styles that are accepted\n * by all of View, Text, or Image. It is therefore very unsafe to pass this\n * through to an underlying component. Using this is almost always a mistake\n * and using one of the other more restrictive types is likely the right choice.\n */\nexport type DangerouslyImpreciseStyleProp =\n  ____DangerouslyImpreciseStyleProp_Internal;\n\n/**\n * Utility type for getting the values for specific style keys.\n *\n * The following is bad because position is more restrictive than 'string':\n * ```\n * type Props = {position: string};\n * ```\n *\n * You should use the following instead:\n *\n * ```\n * type Props = {position: TypeForStyleKey<'position'>};\n * ```\n *\n * This will correctly give you the type 'absolute' | 'relative'\n */\nexport type TypeForStyleKey<\n  +key: $Keys<____DangerouslyImpreciseStyle_Internal>,\n> = $ElementType<____DangerouslyImpreciseStyle_Internal, key>;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for View.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using ViewStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to a View that can't be precomputed with\n * StyleSheet.create.\n */\nexport type ViewStyle = ____ViewStyle_Internal;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for Text.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using TextStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to a Text that can't be precomputed with\n * StyleSheet.create.\n */\nexport type TextStyle = ____TextStyle_Internal;\n\n/**\n * This type is an object of the different possible style\n * properties that can be specified for Image.\n *\n * Note that this isn't a safe way to type a style prop for a component as\n * results from StyleSheet.create return an internal identifier, not\n * an object of styles.\n *\n * If you want to type the style prop of a function,\n * consider using ImageStyleProp.\n *\n * A reasonable usage of this type is for helper functions that return an\n * object of styles to pass to an Image that can't be precomputed with\n * StyleSheet.create.\n */\nexport type ImageStyle = ____ImageStyle_Internal;\n\n/**\n * WARNING: You probably shouldn't be using this type. This type is an object\n * with all possible style keys and their values. Note that this isn't\n * a safe way to type a style prop for a component as results from\n * StyleSheet.create return an internal identifier, not an object of styles.\n *\n * If you want to type the style prop of a function, consider using\n * ViewStyleProp, TextStyleProp, or ImageStyleProp.\n *\n * This should only be used by very core utilities that operate on an object\n * containing any possible style value.\n */\nexport type DangerouslyImpreciseStyle = ____DangerouslyImpreciseStyle_Internal;\n\nlet hairlineWidth: number = PixelRatio.roundToNearestPixel(0.4);\nif (hairlineWidth === 0) {\n  hairlineWidth = 1 / PixelRatio.get();\n}\n\nconst absoluteFill = {\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n};\nif (__DEV__) {\n  Object.freeze(absoluteFill);\n}\n\n/**\n * A StyleSheet is an abstraction similar to CSS StyleSheets\n *\n * Create a new StyleSheet:\n *\n * ```\n * const styles = StyleSheet.create({\n *   container: {\n *     borderRadius: 4,\n *     borderWidth: 0.5,\n *     borderColor: '#d6d7da',\n *   },\n *   title: {\n *     fontSize: 19,\n *     fontWeight: 'bold',\n *   },\n *   activeTitle: {\n *     color: 'red',\n *   },\n * });\n * ```\n *\n * Use a StyleSheet:\n *\n * ```\n * <View style={styles.container}>\n *   <Text style={[styles.title, this.props.isActive && styles.activeTitle]} />\n * </View>\n * ```\n *\n * Code quality:\n *\n *  - By moving styles away from the render function, you're making the code\n *    easier to understand.\n *  - Naming the styles is a good way to add meaning to the low level components\n *  in the render function, and encourage reuse.\n *  - In most IDEs, using `StyleSheet.create()` will offer static type checking\n *  and suggestions to help you write valid styles.\n *\n */\nmodule.exports = {\n  /**\n   * This is defined as the width of a thin line on the platform. It can be\n   * used as the thickness of a border or division between two elements.\n   * Example:\n   * ```\n   *   {\n   *     borderBottomColor: '#bbb',\n   *     borderBottomWidth: StyleSheet.hairlineWidth\n   *   }\n   * ```\n   *\n   * This constant will always be a round number of pixels (so a line defined\n   * by it look crisp) and will try to match the standard width of a thin line\n   * on the underlying platform. However, you should not rely on it being a\n   * constant size, because on different platforms and screen densities its\n   * value may be calculated differently.\n   *\n   * A line with hairline width may not be visible if your simulator is downscaled.\n   */\n  hairlineWidth,\n\n  /**\n   * A very common pattern is to create overlays with position absolute and zero positioning,\n   * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated\n   * styles.\n   */\n  absoluteFill: (absoluteFill: any), // TODO: This should be updated after we fix downstream Flow sites.\n\n  /**\n   * Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be\n   * used to create a customized entry in a `StyleSheet`, e.g.:\n   *\n   *   const styles = StyleSheet.create({\n   *     wrapper: {\n   *       ...StyleSheet.absoluteFillObject,\n   *       top: 10,\n   *       backgroundColor: 'transparent',\n   *     },\n   *   });\n   */\n  absoluteFillObject: absoluteFill,\n\n  /**\n   * Combines two styles such that `style2` will override any styles in `style1`.\n   * If either style is falsy, the other one is returned without allocating an\n   * array, saving allocations and maintaining reference equality for\n   * PureComponent checks.\n   */\n  compose<T: DangerouslyImpreciseStyleProp>(\n    style1: ?T,\n    style2: ?T,\n  ): ?T | $ReadOnlyArray<T> {\n    if (style1 != null && style2 != null) {\n      return ([style1, style2]: $ReadOnlyArray<T>);\n    } else {\n      return style1 != null ? style1 : style2;\n    }\n  },\n\n  /**\n   * Flattens an array of style objects, into one aggregated style object.\n   *\n   * Example:\n   * ```\n   * const styles = StyleSheet.create({\n   *   listItem: {\n   *     flex: 1,\n   *     fontSize: 16,\n   *     color: 'white'\n   *   },\n   *   selectedListItem: {\n   *     color: 'green'\n   *   }\n   * });\n   *\n   * StyleSheet.flatten([styles.listItem, styles.selectedListItem])\n   * // returns { flex: 1, fontSize: 16, color: 'green' }\n   * ```\n   */\n  flatten,\n\n  /**\n   * WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will\n   * not be reliably announced. The whole thing might be deleted, who knows? Use\n   * at your own risk.\n   *\n   * Sets a function to use to pre-process a style property value. This is used\n   * internally to process color and transform values. You should not use this\n   * unless you really know what you are doing and have exhausted other options.\n   */\n  setStyleAttributePreprocessor(\n    property: string,\n    process: (nextProp: mixed) => mixed,\n  ) {\n    let value;\n\n    if (ReactNativeStyleAttributes[property] === true) {\n      value = {process};\n    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {\n      value = {...ReactNativeStyleAttributes[property], process};\n    } else {\n      console.error(`${property} is not a valid style attribute`);\n      return;\n    }\n\n    if (\n      __DEV__ &&\n      typeof value.process === 'function' &&\n      typeof ReactNativeStyleAttributes[property]?.process === 'function' &&\n      value.process !== ReactNativeStyleAttributes[property]?.process\n    ) {\n      console.warn(`Overwriting ${property} style attribute preprocessor`);\n    }\n\n    ReactNativeStyleAttributes[property] = value;\n  },\n\n  /**\n   * An identity function for creating style sheets.\n   */\n  // $FlowFixMe[unsupported-variance-annotation]\n  create<+S: ____Styles_Internal>(obj: S): $ReadOnly<S> {\n    // TODO: This should return S as the return type. But first,\n    // we need to codemod all the callsites that are typing this\n    // return value as a number (even though it was opaque).\n    if (__DEV__) {\n      for (const key in obj) {\n        if (obj[key]) {\n          Object.freeze(obj[key]);\n        }\n      }\n    }\n    return obj;\n  },\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {DangerouslyImpreciseStyleProp} from './StyleSheet';\nimport type {____FlattenStyleProp_Internal} from './StyleSheetTypes';\n\nfunction flattenStyle<TStyleProp: DangerouslyImpreciseStyleProp>(\n  style: ?TStyleProp,\n  // $FlowFixMe[underconstrained-implicit-instantiation]\n): ?____FlattenStyleProp_Internal<TStyleProp> {\n  if (style === null || typeof style !== 'object') {\n    return undefined;\n  }\n\n  if (!Array.isArray(style)) {\n    // $FlowFixMe[incompatible-return]\n    return style;\n  }\n\n  const result: {[string]: $FlowFixMe} = {};\n  for (let i = 0, styleLength = style.length; i < styleLength; ++i) {\n    // $FlowFixMe[underconstrained-implicit-instantiation]\n    const computedStyle = flattenStyle(style[i]);\n    if (computedStyle) {\n      // $FlowFixMe[invalid-in-rhs]\n      for (const key in computedStyle) {\n        // $FlowFixMe[incompatible-use]\n        result[key] = computedStyle[key];\n      }\n    }\n  }\n  // $FlowFixMe[incompatible-return]\n  return result;\n}\n\nmodule.exports = flattenStyle;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n/* eslint no-bitwise: 0 */\n\nimport type {ProcessedColorValue} from './processColor';\nimport type {ColorValue} from './StyleSheet';\n\nimport _normalizeColor from '@react-native/normalize-colors';\n\nfunction normalizeColor(\n  color: ?(ColorValue | ProcessedColorValue),\n): ?ProcessedColorValue {\n  if (typeof color === 'object' && color != null) {\n    const {normalizeColorObject} = require('./PlatformColorValueTypes');\n    const normalizedColor = normalizeColorObject(color);\n    if (normalizedColor != null) {\n      return normalizedColor;\n    }\n  }\n\n  if (typeof color === 'string' || typeof color === 'number') {\n    return _normalizeColor(color);\n  }\n}\n\nmodule.exports = normalizeColor;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nfunction processAspectRatio(aspectRatio?: number | string): ?number {\n  if (typeof aspectRatio === 'number') {\n    return aspectRatio;\n  }\n  if (typeof aspectRatio !== 'string') {\n    if (__DEV__) {\n      invariant(\n        !aspectRatio,\n        'aspectRatio must either be a number, a ratio string or `auto`. You passed: %s',\n        aspectRatio,\n      );\n    }\n    return;\n  }\n\n  const matches = aspectRatio.split('/').map(s => s.trim());\n\n  if (matches.includes('auto')) {\n    if (__DEV__) {\n      invariant(\n        matches.length,\n        'aspectRatio does not support `auto <ratio>`. You passed: %s',\n        aspectRatio,\n      );\n    }\n    return;\n  }\n\n  const hasNonNumericValues = matches.some(n => Number.isNaN(Number(n)));\n  if (__DEV__) {\n    invariant(\n      !hasNonNumericValues && (matches.length === 1 || matches.length === 2),\n      'aspectRatio must either be a number, a ratio string or `auto`. You passed: %s',\n      aspectRatio,\n    );\n  }\n\n  if (hasNonNumericValues) {\n    return;\n  }\n\n  if (matches.length === 2) {\n    return Number(matches[0]) / Number(matches[1]);\n  }\n\n  return Number(matches[0]);\n}\n\nmodule.exports = processAspectRatio;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ColorValue, NativeColorValue} from './StyleSheet';\n\nconst Platform = require('../Utilities/Platform');\nconst normalizeColor = require('./normalizeColor');\n\nexport type ProcessedColorValue = number | NativeColorValue;\n\n/* eslint no-bitwise: 0 */\nfunction processColor(color?: ?(number | ColorValue)): ?ProcessedColorValue {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor === 'object') {\n    const processColorObject =\n      require('./PlatformColorValueTypes').processColorObject;\n\n    const processedColorObj = processColorObject(normalizedColor);\n\n    if (processedColorObj != null) {\n      return processedColorObj;\n    }\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  // Converts 0xrrggbbaa into 0xaarrggbb\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\n\nexport default processColor;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ColorValue} from './StyleSheet';\n\nimport processColor, {type ProcessedColorValue} from './processColor';\n\nconst TRANSPARENT = 0; // rgba(0, 0, 0, 0)\n\nfunction processColorArray(\n  colors: ?$ReadOnlyArray<ColorValue>,\n): ?$ReadOnlyArray<ProcessedColorValue> {\n  return colors == null ? null : colors.map(processColorElement);\n}\n\nfunction processColorElement(color: ColorValue): ProcessedColorValue {\n  const value = processColor(color);\n  // For invalid colors, fallback to transparent.\n  if (value == null) {\n    console.error('Invalid value in color array:', color);\n    return TRANSPARENT;\n  }\n  return value;\n}\n\nmodule.exports = processColorArray;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {____FontVariantArray_Internal} from './StyleSheetTypes';\n\nfunction processFontVariant(\n  fontVariant: ____FontVariantArray_Internal | string,\n): ?____FontVariantArray_Internal {\n  if (Array.isArray(fontVariant)) {\n    return fontVariant;\n  }\n\n  // $FlowFixMe[incompatible-type]\n  const match: ?____FontVariantArray_Internal = fontVariant\n    .split(' ')\n    .filter(Boolean);\n\n  return match;\n}\n\nmodule.exports = processFontVariant;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst stringifySafe = require('../Utilities/stringifySafe').default;\nconst invariant = require('invariant');\n\n/**\n * Generate a transform matrix based on the provided transforms, and use that\n * within the style object instead.\n *\n * This allows us to provide an API that is similar to CSS, where transforms may\n * be applied in an arbitrary order, and yet have a universal, singular\n * interface to native code.\n */\nfunction processTransform(\n  transform: Array<Object> | string,\n): Array<Object> | Array<number> {\n  if (typeof transform === 'string') {\n    const regex = new RegExp(/(\\w+)\\(([^)]+)\\)/g);\n    let transformArray: Array<Object> = [];\n    let matches;\n\n    while ((matches = regex.exec(transform))) {\n      const {key, value} = _getKeyAndValueFromCSSTransform(\n        matches[1],\n        matches[2],\n      );\n\n      if (value !== undefined) {\n        transformArray.push({[key]: value});\n      }\n    }\n    transform = transformArray;\n  }\n\n  if (__DEV__) {\n    _validateTransforms(transform);\n  }\n\n  return transform;\n}\n\nconst _getKeyAndValueFromCSSTransform: (\n  key:\n    | string\n    | $TEMPORARY$string<'matrix'>\n    | $TEMPORARY$string<'perspective'>\n    | $TEMPORARY$string<'rotate'>\n    | $TEMPORARY$string<'rotateX'>\n    | $TEMPORARY$string<'rotateY'>\n    | $TEMPORARY$string<'rotateZ'>\n    | $TEMPORARY$string<'scale'>\n    | $TEMPORARY$string<'scaleX'>\n    | $TEMPORARY$string<'scaleY'>\n    | $TEMPORARY$string<'skewX'>\n    | $TEMPORARY$string<'skewY'>\n    | $TEMPORARY$string<'translate'>\n    | $TEMPORARY$string<'translate3d'>\n    | $TEMPORARY$string<'translateX'>\n    | $TEMPORARY$string<'translateY'>,\n  args: string,\n) => {key: string, value?: number[] | number | string} = (key, args) => {\n  const argsWithUnitsRegex = new RegExp(/([+-]?\\d+(\\.\\d+)?)([a-zA-Z]+)?/g);\n\n  switch (key) {\n    case 'matrix':\n      return {key, value: args.match(/[+-]?\\d+(\\.\\d+)?/g)?.map(Number)};\n    case 'translate':\n    case 'translate3d':\n      const parsedArgs = [];\n      let missingUnitOfMeasurement = false;\n\n      let matches;\n      while ((matches = argsWithUnitsRegex.exec(args))) {\n        const value = Number(matches[1]);\n        const unitOfMeasurement = matches[3];\n\n        if (value !== 0 && !unitOfMeasurement) {\n          missingUnitOfMeasurement = true;\n        }\n\n        parsedArgs.push(value);\n      }\n\n      if (__DEV__) {\n        invariant(\n          !missingUnitOfMeasurement,\n          `Transform with key ${key} must have units unless the provided value is 0, found %s`,\n          `${key}(${args})`,\n        );\n\n        if (key === 'translate') {\n          invariant(\n            parsedArgs?.length === 1 || parsedArgs?.length === 2,\n            'Transform with key translate must be an string with 1 or 2 parameters, found %s: %s',\n            parsedArgs?.length,\n            `${key}(${args})`,\n          );\n        } else {\n          invariant(\n            parsedArgs?.length === 3,\n            'Transform with key translate3d must be an string with 3 parameters, found %s: %s',\n            parsedArgs?.length,\n            `${key}(${args})`,\n          );\n        }\n      }\n\n      if (parsedArgs?.length === 1) {\n        parsedArgs.push(0);\n      }\n\n      return {key: 'translate', value: parsedArgs};\n    case 'translateX':\n    case 'translateY':\n    case 'perspective':\n      const argMatches = argsWithUnitsRegex.exec(args);\n\n      if (!argMatches?.length) {\n        return {key, value: undefined};\n      }\n\n      const value = Number(argMatches[1]);\n      const unitOfMeasurement = argMatches[3];\n\n      if (__DEV__) {\n        invariant(\n          value === 0 || unitOfMeasurement,\n          `Transform with key ${key} must have units unless the provided value is 0, found %s`,\n          `${key}(${args})`,\n        );\n      }\n\n      return {key, value};\n\n    default:\n      return {key, value: !isNaN(args) ? Number(args) : args};\n  }\n};\n\nfunction _validateTransforms(transform: Array<Object>): void {\n  transform.forEach(transformation => {\n    const keys = Object.keys(transformation);\n    invariant(\n      keys.length === 1,\n      'You must specify exactly one property per transform object. Passed properties: %s',\n      stringifySafe(transformation),\n    );\n    const key = keys[0];\n    const value = transformation[key];\n    _validateTransform(key, value, transformation);\n  });\n}\n\nfunction _validateTransform(\n  key:\n    | string\n    | $TEMPORARY$string<'matrix'>\n    | $TEMPORARY$string<'perspective'>\n    | $TEMPORARY$string<'rotate'>\n    | $TEMPORARY$string<'rotateX'>\n    | $TEMPORARY$string<'rotateY'>\n    | $TEMPORARY$string<'rotateZ'>\n    | $TEMPORARY$string<'scale'>\n    | $TEMPORARY$string<'scaleX'>\n    | $TEMPORARY$string<'scaleY'>\n    | $TEMPORARY$string<'skewX'>\n    | $TEMPORARY$string<'skewY'>\n    | $TEMPORARY$string<'translate'>\n    | $TEMPORARY$string<'translateX'>\n    | $TEMPORARY$string<'translateY'>,\n  value: any | number | string,\n  transformation: any,\n) {\n  invariant(\n    !value.getValue,\n    'You passed an Animated.Value to a normal component. ' +\n      'You need to wrap that component in an Animated. For example, ' +\n      'replace <View /> by <Animated.View />.',\n  );\n\n  const multivalueTransforms = ['matrix', 'translate'];\n  if (multivalueTransforms.indexOf(key) !== -1) {\n    invariant(\n      Array.isArray(value),\n      'Transform with key of %s must have an array as the value: %s',\n      key,\n      stringifySafe(transformation),\n    );\n  }\n  switch (key) {\n    case 'matrix':\n      invariant(\n        value.length === 9 || value.length === 16,\n        'Matrix transform must have a length of 9 (2d) or 16 (3d). ' +\n          'Provided matrix has a length of %s: %s',\n        /* $FlowFixMe[prop-missing] (>=0.84.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.84 was deployed. To\n         * see the error, delete this comment and run Flow. */\n        value.length,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'translate':\n      invariant(\n        value.length === 2 || value.length === 3,\n        'Transform with key translate must be an array of length 2 or 3, found %s: %s',\n        /* $FlowFixMe[prop-missing] (>=0.84.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.84 was deployed. To\n         * see the error, delete this comment and run Flow. */\n        value.length,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'rotateX':\n    case 'rotateY':\n    case 'rotateZ':\n    case 'rotate':\n    case 'skewX':\n    case 'skewY':\n      invariant(\n        typeof value === 'string',\n        'Transform with key of \"%s\" must be a string: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      invariant(\n        value.indexOf('deg') > -1 || value.indexOf('rad') > -1,\n        'Rotate transform must be expressed in degrees (deg) or radians ' +\n          '(rad): %s',\n        stringifySafe(transformation),\n      );\n      break;\n    case 'perspective':\n      invariant(\n        typeof value === 'number',\n        'Transform with key of \"%s\" must be a number: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      invariant(\n        value !== 0,\n        'Transform with key of \"%s\" cannot be zero: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'translateX':\n    case 'translateY':\n    case 'scale':\n    case 'scaleX':\n    case 'scaleY':\n      invariant(\n        typeof value === 'number',\n        'Transform with key of \"%s\" must be a number: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      break;\n    default:\n      invariant(\n        false,\n        'Invalid transform %s: %s',\n        key,\n        stringifySafe(transformation),\n      );\n  }\n}\n\nmodule.exports = processTransform;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport invariant from 'invariant';\n\nconst INDEX_X = 0;\nconst INDEX_Y = 1;\nconst INDEX_Z = 2;\n\n/* eslint-disable no-labels */\nexport default function processTransformOrigin(\n  transformOrigin: Array<string | number> | string,\n): Array<string | number> {\n  if (typeof transformOrigin === 'string') {\n    const transformOriginString = transformOrigin;\n    const regex = /(top|bottom|left|right|center|\\d+(?:%|px)|0)/gi;\n    const transformOriginArray: Array<string | number> = ['50%', '50%', 0];\n\n    let index = INDEX_X;\n    let matches;\n    outer: while ((matches = regex.exec(transformOriginString))) {\n      let nextIndex = index + 1;\n\n      const value = matches[0];\n      const valueLower = value.toLowerCase();\n\n      switch (valueLower) {\n        case 'left':\n        case 'right': {\n          invariant(\n            index === INDEX_X,\n            'Transform-origin %s can only be used for x-position',\n            value,\n          );\n          transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';\n          break;\n        }\n        case 'top':\n        case 'bottom': {\n          invariant(\n            index !== INDEX_Z,\n            'Transform-origin %s can only be used for y-position',\n            value,\n          );\n          transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';\n\n          // Handle [[ center | left | right ] && [ center | top | bottom ]] <length>?\n          if (index === INDEX_X) {\n            const horizontal = regex.exec(transformOriginString);\n            if (horizontal == null) {\n              break outer;\n            }\n\n            switch (horizontal[0].toLowerCase()) {\n              case 'left':\n                transformOriginArray[INDEX_X] = 0;\n                break;\n              case 'right':\n                transformOriginArray[INDEX_X] = '100%';\n                break;\n              case 'center':\n                transformOriginArray[INDEX_X] = '50%';\n                break;\n              default:\n                invariant(\n                  false,\n                  'Could not parse transform-origin: %s',\n                  transformOriginString,\n                );\n            }\n            nextIndex = INDEX_Z;\n          }\n\n          break;\n        }\n        case 'center': {\n          invariant(\n            index !== INDEX_Z,\n            'Transform-origin value %s cannot be used for z-position',\n            value,\n          );\n          transformOriginArray[index] = '50%';\n          break;\n        }\n        default: {\n          if (value.endsWith('%')) {\n            transformOriginArray[index] = value;\n          } else {\n            transformOriginArray[index] = parseFloat(value); // Remove `px`\n          }\n          break;\n        }\n      }\n\n      index = nextIndex;\n    }\n\n    transformOrigin = transformOriginArray;\n  }\n\n  if (__DEV__) {\n    _validateTransformOrigin(transformOrigin);\n  }\n\n  return transformOrigin;\n}\n\nfunction _validateTransformOrigin(transformOrigin: Array<string | number>) {\n  invariant(\n    transformOrigin.length === 3,\n    'Transform origin must have exactly 3 values.',\n  );\n  const [x, y, z] = transformOrigin;\n  invariant(\n    typeof x === 'number' || (typeof x === 'string' && x.endsWith('%')),\n    'Transform origin x-position must be a number. Passed value: %s.',\n    x,\n  );\n  invariant(\n    typeof y === 'number' || (typeof y === 'string' && y.endsWith('%')),\n    'Transform origin y-position must be a number. Passed value: %s.',\n    y,\n  );\n  invariant(\n    typeof z === 'number',\n    'Transform origin z-position must be a number. Passed value: %s.',\n    z,\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {____ViewStyle_Internal} from './StyleSheetTypes';\n\nexport default function splitLayoutProps(props: ?____ViewStyle_Internal): {\n  outer: ?____ViewStyle_Internal,\n  inner: ?____ViewStyle_Internal,\n} {\n  let outer: ?____ViewStyle_Internal = null;\n  let inner: ?____ViewStyle_Internal = null;\n\n  if (props != null) {\n    // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.\n    outer = {};\n    // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.\n    inner = {};\n\n    for (const prop of Object.keys(props)) {\n      switch (prop) {\n        case 'margin':\n        case 'marginHorizontal':\n        case 'marginVertical':\n        case 'marginBottom':\n        case 'marginTop':\n        case 'marginLeft':\n        case 'marginRight':\n        case 'flex':\n        case 'flexGrow':\n        case 'flexShrink':\n        case 'flexBasis':\n        case 'alignSelf':\n        case 'height':\n        case 'minHeight':\n        case 'maxHeight':\n        case 'width':\n        case 'minWidth':\n        case 'maxWidth':\n        case 'position':\n        case 'left':\n        case 'right':\n        case 'bottom':\n        case 'top':\n        case 'transform':\n        case 'transformOrigin':\n        case 'rowGap':\n        case 'columnGap':\n        case 'gap':\n          // $FlowFixMe[cannot-write]\n          // $FlowFixMe[incompatible-use]\n          // $FlowFixMe[prop-missing]\n          outer[prop] = props[prop];\n          break;\n        default:\n          // $FlowFixMe[cannot-write]\n          // $FlowFixMe[incompatible-use]\n          // $FlowFixMe[prop-missing]\n          inner[prop] = props[prop];\n          break;\n      }\n    }\n  }\n\n  return {outer, inner};\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {TextProps} from './TextProps';\n\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport flattenStyle from '../StyleSheet/flattenStyle';\nimport processColor from '../StyleSheet/processColor';\nimport Platform from '../Utilities/Platform';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: React.AbstractComponent<\n  TextProps,\n  React.ElementRef<typeof NativeText | typeof NativeVirtualText>,\n> = React.forwardRef((props: TextProps, forwardedRef) => {\n  const {\n    accessible,\n    accessibilityLabel,\n    accessibilityState,\n    allowFontScaling,\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-label': ariaLabel,\n    'aria-selected': ariaSelected,\n    ellipsizeMode,\n    id,\n    nativeID,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onResponderGrant,\n    onResponderMove,\n    onResponderRelease,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onStartShouldSetResponder,\n    pressRetentionOffset,\n    suppressHighlighting,\n    ...restProps\n  } = props;\n\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  let _accessibilityState;\n  if (\n    accessibilityState != null ||\n    ariaBusy != null ||\n    ariaChecked != null ||\n    ariaDisabled != null ||\n    ariaExpanded != null ||\n    ariaSelected != null\n  ) {\n    _accessibilityState = {\n      busy: ariaBusy ?? accessibilityState?.busy,\n      checked: ariaChecked ?? accessibilityState?.checked,\n      disabled: ariaDisabled ?? accessibilityState?.disabled,\n      expanded: ariaExpanded ?? accessibilityState?.expanded,\n      selected: ariaSelected ?? accessibilityState?.selected,\n    };\n  }\n\n  const _disabled =\n    restProps.disabled != null\n      ? restProps.disabled\n      : _accessibilityState?.disabled;\n\n  const nativeTextAccessibilityState =\n    _disabled !== _accessibilityState?.disabled\n      ? {..._accessibilityState, disabled: _disabled}\n      : _accessibilityState;\n\n  const isPressable =\n    (onPress != null ||\n      onLongPress != null ||\n      onStartShouldSetResponder != null) &&\n    _disabled !== true;\n\n  const initialized = useLazyInitialization(isPressable);\n  const config = useMemo(\n    () =>\n      initialized\n        ? {\n            disabled: !isPressable,\n            pressRectOffset: pressRetentionOffset,\n            onLongPress,\n            onPress,\n            onPressIn(event: PressEvent) {\n              // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it\n              // in the best case, and cause issues with text selection in the worst case. Forcing\n              // the isHighlighted prop to false on all platforms except iOS.\n              setHighlighted(\n                (suppressHighlighting == null || !suppressHighlighting) &&\n                  Platform.OS === 'ios',\n              );\n              onPressIn?.(event);\n            },\n            onPressOut(event: PressEvent) {\n              setHighlighted(false);\n              onPressOut?.(event);\n            },\n            onResponderTerminationRequest_DEPRECATED:\n              onResponderTerminationRequest,\n            onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder,\n          }\n        : null,\n    [\n      initialized,\n      isPressable,\n      pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      suppressHighlighting,\n    ],\n  );\n\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event: PressEvent) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event: PressEvent) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event: PressEvent) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event: PressEvent) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onClick: eventHandlers.onClick,\n            onResponderTerminationRequest:\n              eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n    ],\n  );\n\n  // TODO: Move this processing to the view configuration.\n  const selectionColor =\n    restProps.selectionColor == null\n      ? null\n      : processColor(restProps.selectionColor);\n\n  let style = restProps.style;\n\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      style = [restProps.style, {color: 'magenta'}];\n    }\n  }\n\n  let numberOfLines = restProps.numberOfLines;\n  if (numberOfLines != null && !(numberOfLines >= 0)) {\n    console.error(\n      `'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`,\n    );\n    numberOfLines = 0;\n  }\n\n  const hasTextAncestor = useContext(TextAncestor);\n\n  const _accessible = Platform.select({\n    ios: accessible !== false,\n    default: accessible,\n  });\n\n  // $FlowFixMe[underconstrained-implicit-instantiation]\n  style = flattenStyle(style);\n\n  if (typeof style?.fontWeight === 'number') {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.fontWeight = style?.fontWeight.toString();\n  }\n\n  let _selectable = restProps.selectable;\n  if (style?.userSelect != null) {\n    // $FlowFixMe[invalid-computed-prop]\n    _selectable = userSelectToSelectableMap[style.userSelect];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.userSelect;\n  }\n\n  if (style?.verticalAlign != null) {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.textAlignVertical =\n      // $FlowFixMe[invalid-computed-prop]\n      verticalAlignToTextAlignVerticalMap[style.verticalAlign];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.verticalAlign;\n  }\n\n  const _hasOnPressOrOnLongPress =\n    props.onPress != null || props.onLongPress != null;\n\n  return hasTextAncestor ? (\n    <NativeVirtualText\n      {...restProps}\n      {...eventHandlersForText}\n      accessibilityLabel={ariaLabel ?? accessibilityLabel}\n      accessibilityState={_accessibilityState}\n      isHighlighted={isHighlighted}\n      isPressable={isPressable}\n      nativeID={id ?? nativeID}\n      numberOfLines={numberOfLines}\n      ref={forwardedRef}\n      selectable={_selectable}\n      selectionColor={selectionColor}\n      style={style}\n    />\n  ) : (\n    <TextAncestor.Provider value={true}>\n      <NativeText\n        {...restProps}\n        {...eventHandlersForText}\n        accessibilityLabel={ariaLabel ?? accessibilityLabel}\n        accessibilityState={nativeTextAccessibilityState}\n        accessible={\n          accessible == null && Platform.OS === 'android'\n            ? _hasOnPressOrOnLongPress\n            : _accessible\n        }\n        allowFontScaling={allowFontScaling !== false}\n        disabled={_disabled}\n        ellipsizeMode={ellipsizeMode ?? 'tail'}\n        isHighlighted={isHighlighted}\n        nativeID={id ?? nativeID}\n        numberOfLines={numberOfLines}\n        ref={forwardedRef}\n        selectable={_selectable}\n        selectionColor={selectionColor}\n        style={style}\n      />\n    </TextAncestor.Provider>\n  );\n});\n\nText.displayName = 'Text';\n\n/**\n * Returns false until the first time `newValue` is true, after which this will\n * always return true. This is necessary to lazily initialize `Pressability` so\n * we do not eagerly create one for every pressable `Text` component.\n */\nfunction useLazyInitialization(newValue: boolean): boolean {\n  const [oldValue, setValue] = useState(newValue);\n  if (!oldValue && newValue) {\n    setValue(newValue);\n  }\n  return oldValue;\n}\n\nconst userSelectToSelectableMap = {\n  auto: true,\n  text: true,\n  none: false,\n  contain: true,\n  all: true,\n};\n\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center',\n};\n\nmodule.exports = Text;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\n\n/**\n * Whether the current element is the descendant of a <Text> element.\n */\nconst TextAncestorContext: React$Context<$FlowFixMe> =\n  React.createContext(false);\nif (__DEV__) {\n  TextAncestorContext.displayName = 'TextAncestorContext';\n}\nmodule.exports = TextAncestorContext;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport {createViewConfig} from '../NativeComponent/ViewConfig';\nimport UIManager from '../ReactNative/UIManager';\nimport createReactNativeComponentClass from '../Renderer/shims/createReactNativeComponentClass';\nimport {type HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport {type ProcessedColorValue} from '../StyleSheet/processColor';\nimport {type PressEvent} from '../Types/CoreEventTypes';\nimport {type TextProps} from './TextProps';\n\ntype NativeTextProps = $ReadOnly<{\n  ...TextProps,\n  isHighlighted?: ?boolean,\n  selectionColor?: ?ProcessedColorValue,\n  onClick?: ?(event: PressEvent) => mixed,\n  // This is only needed for platforms that optimize text hit testing, e.g.,\n  // react-native-windows. It can be used to only hit test virtual text spans\n  // that have pressable events attached to them.\n  isPressable?: ?boolean,\n}>;\n\nconst textViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    dynamicTypeRamp: true,\n    maxFontSizeMultiplier: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n    onInlineViewLayout: true,\n    dataDetectorType: true,\n    android_hyphenationFrequency: true,\n    lineBreakStrategyIOS: true,\n  },\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout',\n    },\n    topInlineViewLayout: {\n      registrationName: 'onInlineViewLayout',\n    },\n  },\n  uiViewClassName: 'RCTText',\n};\n\nconst virtualTextViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    maxFontSizeMultiplier: true,\n  },\n  uiViewClassName: 'RCTVirtualText',\n};\n\nexport const NativeText: HostComponent<NativeTextProps> =\n  (createReactNativeComponentClass('RCTText', () =>\n    createViewConfig(textViewConfig),\n  ): any);\n\nexport const NativeVirtualText: HostComponent<NativeTextProps> =\n  !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText')\n    ? NativeText\n    : (createReactNativeComponentClass('RCTVirtualText', () =>\n        createViewConfig(virtualTextViewConfig),\n      ): any);\n"],"names":["exports","_len","arguments","length","names","Array","_key","semantic","tuple","dynamic","light","dark","highContrastLight","highContrastDark","color","undefined","normalizeColor","require","processColor","_PlatformColorValueTypes","DynamicColorIOSPrivate","createSquare","size","bottom","left","right","top","rectOrSize","ReactNativeStyleAttributes","PixelRatio","flatten","hairlineWidth","roundToNearestPixel","get","absoluteFill","position","module","absoluteFillObject","compose","style1","style2","setStyleAttributePreprocessor","property","process","value","console","error","Object","assign","create","obj","flattenStyle","style","isArray","result","i","styleLength","computedStyle","key","_normalizeColors","_interopRequireDefault","normalizedColor","normalizeColorObject","_normalizeColor","aspectRatio","matches","split","map","s","trim","includes","some","n","Number","isNaN","Platform","processedColorObj","processColorObject","OS","_processColor","TRANSPARENT","processColorElement","colors","fontVariant","filter","Boolean","_defineProperty2","_getKeyAndValueFromCSSTransform","args","_args$match","argsWithUnitsRegex","RegExp","match","parsedArgs","exec","unitOfMeasurement","push","argMatches","transform","regex","transformArray","_getKeyAndValueFromCS","default","transformOrigin","transformOriginString","transformOriginArray","index","INDEX_X","outer","nextIndex","valueLower","toLowerCase","invariant","INDEX_Z","INDEX_Y","horizontal","endsWith","parseFloat","__DEV__","_invariant","props","inner","prop","keys","_usePressability","_interopRequireWildcard","_flattenStyle","_Platform","_TextAncestor","_TextNativeComponent","_react","React","_jsxRuntime","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","has","__proto__","a","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","set","Text","forwardRef","forwardedRef","_accessibilityState2","_accessibilityState3","_style","_style3","_style4","_accessibilityState","accessible","accessibilityLabel","accessibilityState","allowFontScaling","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","ellipsizeMode","id","nativeID","onLongPress","onPress","onPressIn","onPressOut","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","pressRetentionOffset","suppressHighlighting","restProps","_objectWithoutProperties2","_useState","useState","_useState2","_slicedToArray2","isHighlighted","setHighlighted","busy","checked","disabled","expanded","selected","_disabled","nativeTextAccessibilityState","isPressable","initialized","newValue","_useState3","_useState4","oldValue","setValue","useLazyInitialization","config","useMemo","pressRectOffset","event","onResponderTerminationRequest_DEPRECATED","onStartShouldSetResponder_DEPRECATED","eventHandlers","usePressability","eventHandlersForText","onClick","selectionColor","numberOfLines","_style2","hasTextAncestor","useContext","TextAncestor","_accessible","select","ios","fontWeight","toString","_selectable","selectable","userSelect","userSelectToSelectableMap","verticalAlign","textAlignVertical","verticalAlignToTextAlignVerticalMap","_hasOnPressOrOnLongPress","jsx","NativeVirtualText","ref","Provider","children","NativeText","displayName","auto","text","none","contain","all","middle","TextAncestorContext","createContext","_ViewConfig","_UIManager","_createReactNativeComponentClass","textViewConfig","validAttributes","dynamicTypeRamp","maxFontSizeMultiplier","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","onInlineViewLayout","dataDetectorType","android_hyphenationFrequency","lineBreakStrategyIOS","directEventTypes","topTextLayout","registrationName","topInlineViewLayout","uiViewClassName","virtualTextViewConfig","createReactNativeComponentClass","createViewConfig","global","RN$Bridgeless","UIManager","hasViewManagerConfig"],"sourceRoot":""}