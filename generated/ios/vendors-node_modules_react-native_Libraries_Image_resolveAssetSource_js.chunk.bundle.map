{"version":3,"file":"vendors-node_modules_react-native_Libraries_Image_resolveAssetSource_js.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js","webpack:///./node_modules/react-native/Libraries/Image/AssetSourceResolver.js","webpack:///./node_modules/react-native/Libraries/Image/AssetUtils.js","webpack:///./node_modules/react-native/Libraries/Image/resolveAssetSource.js","webpack:///./node_modules/react-native/Libraries/NativeModules/specs/NativeSourceCode.js","webpack:///./node_modules/react-native/Libraries/Utilities/Dimensions.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativePlatformConstantsIOS.js","webpack:///./node_modules/react-native/Libraries/Utilities/PixelRatio.js","webpack:///./node_modules/react-native/Libraries/Utilities/Platform.ios.js","webpack:///./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js","webpack:///./node_modules/react-native/src/private/specs/modules/NativeDeviceInfo.js","webpack:///./node_modules/react-native/src/private/specs/modules/NativePlatformConstantsIOS.js","webpack:///./node_modules/react-native/src/private/specs/modules/NativeSourceCode.js","webpack:///./node_modules/@babel/runtime/helpers/classPrivateFieldLooseBase.js","webpack:///./node_modules/@babel/runtime/helpers/classPrivateFieldLooseKey.js","webpack:///./node_modules/@babel/runtime/helpers/get.js","webpack:///./node_modules/@babel/runtime/helpers/superPropBase.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {IEventEmitter} from '../vendor/emitter/EventEmitter';\n\nimport {beginEvent, endEvent} from '../Performance/Systrace';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\n\n// FIXME: use typed events\ntype RCTDeviceEventDefinitions = $FlowFixMe;\n\n/**\n * Global EventEmitter used by the native platform to emit events to JavaScript.\n * Events are identified by globally unique event names.\n *\n * NativeModules that emit events should instead subclass `NativeEventEmitter`.\n */\nclass RCTDeviceEventEmitter extends EventEmitter<RCTDeviceEventDefinitions> {\n  // Add systrace to RCTDeviceEventEmitter.emit method for debugging\n  emit<TEvent: $Keys<RCTDeviceEventDefinitions>>(\n    eventType: TEvent,\n    ...args: RCTDeviceEventDefinitions[TEvent]\n  ): void {\n    beginEvent(() => `RCTDeviceEventEmitter.emit#${eventType}`);\n    super.emit(eventType, ...args);\n    endEvent();\n  }\n}\nconst instance = new RCTDeviceEventEmitter();\n\nObject.defineProperty(global, '__rctDeviceEventEmitter', {\n  configurable: true,\n  value: instance,\n});\n\nexport default (instance: IEventEmitter<RCTDeviceEventDefinitions>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from '@react-native/assets-registry/registry';\n\nconst PixelRatio = require('../Utilities/PixelRatio').default;\nconst Platform = require('../Utilities/Platform');\nconst {pickScale} = require('./AssetUtils');\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n} = require('@react-native/assets-registry/path-support');\nconst invariant = require('invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawableFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawableFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return this.jsbundleUrl != null && this.jsbundleUrl?.startsWith('file://');\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(this.serverUrl != null, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(\n      // Assets can have relative paths outside of the project root.\n      // When bundling them we replace `../` with `_` to make sure they\n      // don't end up outside of the expected assets directory.\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\n    );\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale: (scales: Array<number>, deviceScale?: number) => number =\n    pickScale;\n}\n\nmodule.exports = AssetSourceResolver;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport PixelRatio from '../Utilities/PixelRatio';\n\nlet cacheBreaker;\nlet warnIfCacheBreakerUnset = true;\n\nexport function pickScale(scales: Array<number>, deviceScale?: number): number {\n  const requiredDeviceScale = deviceScale ?? PixelRatio.get();\n\n  // Packager guarantees that `scales` array is sorted\n  for (let i = 0; i < scales.length; i++) {\n    if (scales[i] >= requiredDeviceScale) {\n      return scales[i];\n    }\n  }\n\n  // If nothing matches, device scale is larger than any available\n  // scales, so we return the biggest one. Unless the array is empty,\n  // in which case we default to 1\n  return scales[scales.length - 1] || 1;\n}\n\nexport function setUrlCacheBreaker(appendage: string) {\n  cacheBreaker = appendage;\n}\n\nexport function getUrlCacheBreaker(): string {\n  if (cacheBreaker == null) {\n    if (__DEV__ && warnIfCacheBreakerUnset) {\n      warnIfCacheBreakerUnset = false;\n      console.warn(\n        'AssetUtils.getUrlCacheBreaker: Cache breaker value is unset',\n      );\n    }\n    return '';\n  }\n  return cacheBreaker;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// Utilities for resolving an asset into a `source` for e.g. `Image`\n\nimport type {ResolvedAssetSource} from './AssetSourceResolver';\nimport type {ImageSource} from './ImageSource';\n\nimport SourceCode from '../NativeModules/specs/NativeSourceCode';\n\nconst AssetSourceResolver = require('./AssetSourceResolver');\nconst {pickScale} = require('./AssetUtils');\nconst AssetRegistry = require('@react-native/assets-registry/registry');\n\ntype CustomSourceTransformer = (\n  resolver: AssetSourceResolver,\n) => ?ResolvedAssetSource;\n\nlet _customSourceTransformers: Array<CustomSourceTransformer> = [];\nlet _serverURL: ?string;\nlet _scriptURL: ?string;\nlet _sourceCodeScriptURL: ?string;\n\nfunction getSourceCodeScriptURL(): ?string {\n  if (_sourceCodeScriptURL != null) {\n    return _sourceCodeScriptURL;\n  }\n\n  _sourceCodeScriptURL = SourceCode.getConstants().scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): ?string {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL?.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: ?string): ?string {\n  let normalizedScriptURL = scriptURL;\n\n  if (normalizedScriptURL != null) {\n    if (normalizedScriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    normalizedScriptURL = normalizedScriptURL.substring(\n      0,\n      normalizedScriptURL.lastIndexOf('/') + 1,\n    );\n    if (!normalizedScriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      normalizedScriptURL = 'file://' + normalizedScriptURL;\n    }\n  }\n\n  return normalizedScriptURL;\n}\n\nfunction getScriptURL(): ?string {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\n/**\n * `transformer` can optionally be used to apply a custom transformation when\n * resolving an asset source. This methods overrides all other custom transformers\n * that may have been previously registered.\n */\nfunction setCustomSourceTransformer(\n  transformer: CustomSourceTransformer,\n): void {\n  _customSourceTransformers = [transformer];\n}\n\n/**\n * Adds a `transformer` into the chain of custom source transformers, which will\n * be applied in the order registered, until one returns a non-null value.\n */\nfunction addCustomSourceTransformer(\n  transformer: CustomSourceTransformer,\n): void {\n  _customSourceTransformers.push(transformer);\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: ?ImageSource): ?ResolvedAssetSource {\n  if (source == null || typeof source === 'object') {\n    // $FlowFixMe[incompatible-exact] `source` doesn't exactly match `ResolvedAssetSource`\n    // $FlowFixMe[incompatible-return] `source` doesn't exactly match `ResolvedAssetSource`\n    return source;\n  }\n\n  const asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    getDevServerURL(),\n    getScriptURL(),\n    asset,\n  );\n\n  // Apply (chained) custom source transformers, if any\n  if (_customSourceTransformers) {\n    for (const customSourceTransformer of _customSourceTransformers) {\n      const transformedSource = customSourceTransformer(resolver);\n      if (transformedSource != null) {\n        return transformedSource;\n      }\n    }\n  }\n\n  return resolver.defaultAsset();\n}\n\nresolveAssetSource.pickScale = pickScale;\nresolveAssetSource.setCustomSourceTransformer = setCustomSourceTransformer;\nresolveAssetSource.addCustomSourceTransformer = addCustomSourceTransformer;\nmodule.exports = resolveAssetSource;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeSourceCode';\nimport NativeSourceCode from '../../../src/private/specs/modules/NativeSourceCode';\nexport default NativeSourceCode;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport NativeDeviceInfo, {\n  type DimensionsPayload,\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\nconst eventEmitter = new EventEmitter<{\n  change: [DimensionsPayload],\n}>();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsPayload;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preferred API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n   */\n  static get(dim: string): DisplayMetrics | DisplayMetricsAndroid {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<DimensionsPayload>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: 'change',\n    handler: Function,\n  ): EventSubscription {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    return eventEmitter.addListener(type, handler);\n  }\n}\n\n// Subscribe before calling getConstants to make sure we don't miss any updates in between.\nRCTDeviceEventEmitter.addListener(\n  'didUpdateDimensions',\n  (update: DimensionsPayload) => {\n    Dimensions.set(update);\n  },\n);\nDimensions.set(NativeDeviceInfo.getConstants().Dimensions);\n\nexport default Dimensions;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeDeviceInfo';\nimport NativeDeviceInfo from '../../src/private/specs/modules/NativeDeviceInfo';\nexport default NativeDeviceInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativePlatformConstantsIOS';\nimport NativePlatformConstantsIOS from '../../src/private/specs/modules/NativePlatformConstantsIOS';\nexport default NativePlatformConstantsIOS;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Dimensions = require('./Dimensions').default;\n\n/**\n * PixelRatio class gives access to the device pixel density.\n *\n * ## Fetching a correctly sized image\n *\n * You should get a higher resolution image if you are on a high pixel density\n * device. A good rule of thumb is to multiply the size of the image you display\n * by the pixel ratio.\n *\n * ```\n * var image = getImage({\n *   width: PixelRatio.getPixelSizeForLayoutSize(200),\n *   height: PixelRatio.getPixelSizeForLayoutSize(100),\n * });\n * <Image source={image} style={{width: 200, height: 100}} />\n * ```\n *\n * ## Pixel grid snapping\n *\n * In iOS, you can specify positions and dimensions for elements with arbitrary\n * precision, for example 29.674825. But, ultimately the physical display only\n * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334\n * for iPhone 6. iOS tries to be as faithful as possible to the user value by\n * spreading one original pixel into multiple ones to trick the eye. The\n * downside of this technique is that it makes the resulting element look\n * blurry.\n *\n * In practice, we found out that developers do not want this feature and they\n * have to work around it by doing manual rounding in order to avoid having\n * blurry elements. In React Native, we are rounding all the pixels\n * automatically.\n *\n * We have to be careful when to do this rounding. You never want to work with\n * rounded and unrounded values at the same time as you're going to accumulate\n * rounding errors. Having even one rounding error is deadly because a one\n * pixel border may vanish or be twice as big.\n *\n * In React Native, everything in JavaScript and within the layout engine works\n * with arbitrary precision numbers. It's only when we set the position and\n * dimensions of the native element on the main thread that we round. Also,\n * rounding is done relative to the root rather than the parent, again to avoid\n * accumulating rounding errors.\n *\n */\nclass PixelRatio {\n  /**\n   * Returns the device pixel density. Some examples:\n   *\n   *   - PixelRatio.get() === 1\n   *     - mdpi Android devices (160 dpi)\n   *   - PixelRatio.get() === 1.5\n   *     - hdpi Android devices (240 dpi)\n   *   - PixelRatio.get() === 2\n   *     - iPhone 4, 4S\n   *     - iPhone 5, 5c, 5s\n   *     - iPhone 6\n   *     - iPhone 7\n   *     - iPhone 8\n   *     - iPhone SE\n   *     - xhdpi Android devices (320 dpi)\n   *   - PixelRatio.get() === 3\n   *     - iPhone 6 Plus\n   *     - iPhone 7 Plus\n   *     - iPhone 8 Plus\n   *     - iPhone X\n   *     - xxhdpi Android devices (480 dpi)\n   *   - PixelRatio.get() === 3.5\n   *     - Nexus 6\n   */\n  static get(): number {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the\n   * absolute font size, so any elements that heavily depend on that should use this to do\n   * calculations.\n   *\n   * If a font scale is not set, this returns the device pixel ratio.\n   *\n   * This reflects the user preference set in:\n   *  - Settings > Display > Font size on Android,\n   *  - Settings > Display & Brightness > Text Size on iOS.\n   */\n  static getFontScale(): number {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   *\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize: number): number {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize: number): number {\n    const ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n  // No-op for iOS, but used on the web. Should not be documented.\n  static startDetecting() {}\n}\n\nexport default PixelRatio;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {\n  Platform as PlatformType,\n  PlatformSelectSpec,\n} from './Platform.flow';\n\nimport NativePlatformConstantsIOS from './NativePlatformConstantsIOS';\n\nconst Platform: PlatformType = {\n  __constants: null,\n  OS: 'ios',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version(): string {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.osVersion;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants(): {|\n    forceTouchAvailable: boolean,\n    interfaceIdiom: string,\n    isTesting: boolean,\n    isDisableAnimations?: boolean,\n    osVersion: string,\n    reactNativeVersion: {|\n      major: number,\n      minor: number,\n      patch: number,\n      prerelease: ?number,\n    |},\n    systemName: string,\n    isMacCatalyst?: boolean,\n  |} {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsIOS.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isPad(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.interfaceIdiom === 'pad';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.interfaceIdiom === 'tv';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isVision(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.interfaceIdiom === 'vision';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting(): boolean {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isDisableAnimations(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isDisableAnimations ?? this.isTesting;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isMacCatalyst(): boolean {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isMacCatalyst ?? false;\n  },\n  select: <T>(spec: PlatformSelectSpec<T>): T =>\n    // $FlowFixMe[incompatible-return]\n    'ios' in spec ? spec.ios : 'native' in spec ? spec.native : spec.default,\n};\n\nmodule.exports = Platform;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: TEventToArgsMap[TEvent]) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: TEventToArgsMap[TEvent]\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\n// $FlowFixMe[deprecated-type]\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  #registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: TEventToArgsMap[TEvent]) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    if (typeof listener !== 'function') {\n      throw new TypeError(\n        'EventEmitter.addListener(...): 2nd argument must be a function.',\n      );\n    }\n    const registrations = allocate<\n      TEventToArgsMap,\n      TEvent,\n      TEventToArgsMap[TEvent],\n    >(this.#registry, eventType);\n    const registration: Registration<TEventToArgsMap[TEvent]> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: TEventToArgsMap[TEvent]\n  ): void {\n    const registrations: ?Set<Registration<TEventToArgsMap[TEvent]>> =\n      this.#registry[eventType];\n    if (registrations != null) {\n      // Copy `registrations` to take a snapshot when we invoke `emit`, in case\n      // registrations are added or removed when listeners are invoked.\n      for (const registration of Array.from(registrations)) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this.#registry = {};\n    } else {\n      delete this.#registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this.#registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: TEventToArgsMap[TEvent],\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../../../Libraries/TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n\nexport type DisplayMetricsAndroid = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n  densityDpi: number,\n|};\n\nexport type DisplayMetrics = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n|};\n\nexport type DimensionsPayload = {|\n  window?: DisplayMetrics,\n  screen?: DisplayMetrics,\n  windowPhysicalPixels?: DisplayMetricsAndroid,\n  screenPhysicalPixels?: DisplayMetricsAndroid,\n|};\n\nexport type DeviceInfoConstants = {|\n  +Dimensions: DimensionsPayload,\n  +isIPhoneX_deprecated?: boolean,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => DeviceInfoConstants;\n}\n\nconst NativeModule: Spec = TurboModuleRegistry.getEnforcing<Spec>('DeviceInfo');\nlet constants: ?DeviceInfoConstants = null;\n\nconst NativeDeviceInfo = {\n  getConstants(): DeviceInfoConstants {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n    return constants;\n  },\n};\n\nexport default NativeDeviceInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../../../Libraries/TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n\nexport type PlatformConstantsIOS = {|\n  isTesting: boolean,\n  isDisableAnimations?: boolean,\n  reactNativeVersion: {|\n    major: number,\n    minor: number,\n    patch: number,\n    prerelease: ?number,\n  |},\n  forceTouchAvailable: boolean,\n  osVersion: string,\n  systemName: string,\n  interfaceIdiom: string,\n  isMacCatalyst?: boolean,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => PlatformConstantsIOS;\n}\n\nexport default (TurboModuleRegistry.getEnforcing<Spec>(\n  'PlatformConstants',\n): Spec);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../../../Libraries/TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n\nexport type SourceCodeConstants = {|\n  scriptURL: string,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => SourceCodeConstants;\n}\n\nconst NativeModule = TurboModuleRegistry.getEnforcing<Spec>('SourceCode');\nlet constants = null;\n\nconst NativeSourceCode = {\n  getConstants(): SourceCodeConstants {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n\n    return constants;\n  },\n};\n\nexport default NativeSourceCode;\n","function _classPrivateFieldBase(e, t) {\n  if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\");\n  return e;\n}\nmodule.exports = _classPrivateFieldBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var id = 0;\nfunction _classPrivateFieldKey(e) {\n  return \"__private_\" + id++ + \"_\" + e;\n}\nmodule.exports = _classPrivateFieldKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var superPropBase = require(\"./superPropBase.js\");\nfunction _get() {\n  return (module.exports = _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {\n    var p = superPropBase(e, t);\n    if (p) {\n      var n = Object.getOwnPropertyDescriptor(p, t);\n      return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;\n    }\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _get.apply(null, arguments);\n}\nmodule.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\nfunction _superPropBase(t, o) {\n  for (; !{}.hasOwnProperty.call(t, o) && null !== (t = getPrototypeOf(t)););\n  return t;\n}\nmodule.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["_Systrace","require","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","RCTDeviceEventEmitter","_EventEmitter","_classCallCheck2","arguments","_inherits2","_createClass2","key","value","eventType","_get2","beginEvent","_len","length","args","Array","_key","_get3","concat","endEvent","_interopRequireDefault","EventEmitter","instance","Object","defineProperty","global","configurable","exports","PixelRatio","Platform","pickScale","_require2","getAndroidResourceFolderName","getAndroidResourceIdentifier","getBasePath","invariant","getScaledAssetPath","asset","scale","scales","get","scaleSuffix","name","type","AssetSourceResolver","serverUrl","jsbundleUrl","this","_this$jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","_this$jsbundleUrl2","path","replace","_this$jsbundleUrl3","source","__packager_asset","width","height","uri","module","cacheBreaker","deviceScale","requiredDeviceScale","i","appendage","_PixelRatio","_serverURL","_scriptURL","_sourceCodeScriptURL","_NativeSourceCode","AssetRegistry","_customSourceTransformers","getSourceCodeScriptURL","SourceCode","getConstants","scriptURL","resolveAssetSource","getAssetByID","resolver","undefined","sourceCodeScriptURL","match","getDevServerURL","normalizedScriptURL","substring","lastIndexOf","includes","_coerceLocalScriptURL","customSourceTransformer","transformedSource","defaultAsset","setCustomSourceTransformer","transformer","addCustomSourceTransformer","push","r","__esModule","_getRequireWildcardCache","has","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","set","_interopRequireWildcard","WeakMap","keys","forEach","_exportNames","enumerable","NativeSourceCode","dimensions","_RCTDeviceEventEmitter","_NativeDeviceInfo","_invariant","eventEmitter","dimensionsInitialized","Dimensions","dim","dims","screen","window","windowPhysicalPixels","fontScale","screenPhysicalPixels","emit","handler","addListener","update","NativeDeviceInfo","_NativePlatformConstantsIOS","NativePlatformConstantsIOS","layoutSize","Math","round","ratio","__constants","Version","constants","osVersion","isPad","interfaceIdiom","isTV","isVision","isTesting","isDisableAnimations","_this$constants$isDis","isMacCatalyst","_this$constants$isMac","select","spec","ios","native","_registry","writable","listener","context","TypeError","registrations","registry","Set","allocate","_classPrivateFieldLooseBase2","registration","remove","delete","add","from","size","NativeModule","getEnforcing","TurboModuleRegistry","id","superPropBase","_get","bind","p","getPrototypeOf"],"sourceRoot":""}