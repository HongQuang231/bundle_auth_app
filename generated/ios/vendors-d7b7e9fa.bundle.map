{"version":3,"file":"vendors-d7b7e9fa.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native-paper/src/assets/back-chevron.png","webpack:///./node_modules/react-native-paper/src/components/ActivityIndicator.tsx","webpack:///./node_modules/react-native-paper/src/components/Appbar/Appbar.tsx","webpack:///./node_modules/react-native-paper/src/components/Appbar/AppbarAction.tsx","webpack:///./node_modules/react-native-paper/src/components/Appbar/AppbarBackAction.tsx","webpack:///./node_modules/react-native-paper/src/components/Appbar/AppbarBackIcon.tsx","webpack:///./node_modules/react-native-paper/src/components/Appbar/AppbarContent.tsx","webpack:///./node_modules/react-native-paper/src/components/Appbar/AppbarHeader.tsx","webpack:///./node_modules/react-native-paper/src/components/Appbar/index.ts","webpack:///./node_modules/react-native-paper/src/components/Appbar/utils.ts","webpack:///./node_modules/react-native-paper/src/components/Avatar/Avatar.tsx","webpack:///./node_modules/react-native-paper/src/components/Avatar/AvatarIcon.tsx","webpack:///./node_modules/react-native-paper/src/components/Avatar/AvatarImage.tsx","webpack:///./node_modules/react-native-paper/src/components/Avatar/AvatarText.tsx","webpack:///./node_modules/react-native-paper/src/components/Badge.tsx","webpack:///./node_modules/react-native-paper/src/components/Banner.tsx","webpack:///./node_modules/react-native-paper/src/components/BottomNavigation/BottomNavigation.tsx","webpack:///./node_modules/react-native-paper/src/components/BottomNavigation/BottomNavigationBar.tsx","webpack:///./node_modules/react-native-paper/src/components/BottomNavigation/BottomNavigationRouteScreen.tsx","webpack:///./node_modules/react-native-paper/src/components/BottomNavigation/utils.ts","webpack:///./node_modules/react-native-paper/src/components/Button/Button.tsx","webpack:///./node_modules/react-native-paper/src/components/Button/utils.tsx","webpack:///./node_modules/react-native-paper/src/components/Card/Card.tsx","webpack:///./node_modules/react-native-paper/src/components/Card/CardActions.tsx","webpack:///./node_modules/react-native-paper/src/components/Card/CardContent.tsx","webpack:///./node_modules/react-native-paper/src/components/Card/CardCover.tsx","webpack:///./node_modules/react-native-paper/src/components/Card/CardTitle.tsx","webpack:///./node_modules/react-native-paper/src/components/Card/utils.tsx"],"sourcesContent":["var AssetRegistry = require('react-native/Libraries/Image/AssetRegistry');\nmodule.exports = AssetRegistry.registerAsset({\n  __packager_asset: true,\n  scales: [1],\n  name: \"back-chevron\",\n  type: \"png\",\n  hash: \"8ccb536a761f422222395d647a6016e0\",\n  httpServerLocation: \"assets/node_modules/react-native-paper/src/assets\",\n  \n  height: 63,\n  width: 63,\n});","import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../core/theming';\nimport type { ThemeProp } from '../types';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Whether to show the indicator or hide it.\n   */\n  animating?: boolean;\n  /**\n   * The color of the spinner.\n   */\n  color?: string;\n  /**\n   * Size of the indicator.\n   */\n  size?: 'small' | 'large' | number;\n  /**\n   * Whether the indicator should hide when not animating.\n   */\n  hidesWhenStopped?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\nconst DURATION = 2400;\n\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, MD2Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={MD2Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ActivityIndicator = ({\n  animating = true,\n  color: indicatorColor,\n  hidesWhenStopped = true,\n  size: indicatorSize = 'small',\n  style,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(\n    new Animated.Value(!animating && hidesWhenStopped ? 0 : 1)\n  );\n\n  const rotation = React.useRef<Animated.CompositeAnimation | undefined>(\n    undefined\n  );\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  const startRotation = React.useCallback(() => {\n    // Show indicator\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      isInteraction: false,\n      useNativeDriver: true,\n    }).start();\n\n    // Circular animation in loop\n    if (rotation.current) {\n      timer.setValue(0);\n      // $FlowFixMe\n      Animated.loop(rotation.current).start();\n    }\n  }, [scale, fade, timer]);\n\n  const stopRotation = () => {\n    if (rotation.current) {\n      rotation.current.stop();\n    }\n  };\n\n  React.useEffect(() => {\n    if (rotation.current === undefined) {\n      // Circular animation in loop\n      rotation.current = Animated.timing(timer, {\n        duration: DURATION,\n        easing: Easing.linear,\n        // Animated.loop does not work if useNativeDriver is true on web\n        useNativeDriver: Platform.OS !== 'web',\n        toValue: 1,\n        isInteraction: false,\n      });\n    }\n\n    if (animating) {\n      startRotation();\n    } else if (hidesWhenStopped) {\n      // Hide indicator first and then stop rotation\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start(stopRotation);\n    } else {\n      stopRotation();\n    }\n  }, [animating, fade, hidesWhenStopped, startRotation, scale, timer]);\n\n  const color = indicatorColor || theme.colors?.primary;\n  const size =\n    typeof indicatorSize === 'string'\n      ? indicatorSize === 'small'\n        ? 24\n        : 48\n      : indicatorSize\n      ? indicatorSize\n      : 24;\n\n  const frames = (60 * DURATION) / 1000;\n  const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n  const containerStyle = {\n    width: size,\n    height: size / 2,\n    overflow: 'hidden' as const,\n  };\n\n  return (\n    <View\n      style={[styles.container, style]}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityState={{ busy: animating }}\n    >\n      <Animated.View\n        style={[{ width: size, height: size, opacity: fade }]}\n        collapsable={false}\n      >\n        {[0, 1].map((index) => {\n          // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n          const inputRange = Array.from(\n            new Array(frames),\n            (_, frameIndex) => frameIndex / (frames - 1)\n          );\n          const outputRange = Array.from(new Array(frames), (_, frameIndex) => {\n            let progress = (2 * frameIndex) / (frames - 1);\n            const rotation = index ? +(360 - 15) : -(180 - 15);\n\n            if (progress > 1.0) {\n              progress = 2.0 - progress;\n            }\n\n            const direction = index ? -1 : +1;\n\n            return `${direction * (180 - 30) * easing(progress) + rotation}deg`;\n          });\n\n          const layerStyle = {\n            width: size,\n            height: size,\n            transform: [\n              {\n                rotate: timer.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [`${0 + 30 + 15}deg`, `${2 * 360 + 30 + 15}deg`],\n                }),\n              },\n            ],\n          };\n\n          const viewportStyle = {\n            width: size,\n            height: size,\n            transform: [\n              {\n                translateY: index ? -size / 2 : 0,\n              },\n              {\n                rotate: timer.interpolate({ inputRange, outputRange }),\n              },\n            ],\n          };\n\n          const offsetStyle = index ? { top: size / 2 } : null;\n\n          const lineStyle = {\n            width: size,\n            height: size,\n            borderColor: color,\n            borderWidth: size / 10,\n            borderRadius: size / 2,\n          };\n\n          return (\n            <Animated.View key={index} style={[styles.layer]}>\n              <Animated.View style={layerStyle}>\n                <Animated.View\n                  style={[containerStyle, offsetStyle]}\n                  collapsable={false}\n                >\n                  <Animated.View style={viewportStyle}>\n                    <Animated.View style={containerStyle} collapsable={false}>\n                      <Animated.View style={lineStyle} />\n                    </Animated.View>\n                  </Animated.View>\n                </Animated.View>\n              </Animated.View>\n            </Animated.View>\n          );\n        })}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  layer: {\n    ...StyleSheet.absoluteFillObject,\n\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default ActivityIndicator;\n","import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n  ColorValue,\n} from 'react-native';\n\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport {\n  AppbarModes,\n  DEFAULT_APPBAR_HEIGHT,\n  getAppbarBackgroundColor,\n  modeAppbarHeight,\n  renderAppbarContent,\n} from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { MD3Elevation, ThemeProp } from '../../types';\nimport Surface from '../Surface';\n\nexport type Props = Omit<\n  Partial<React.ComponentPropsWithRef<typeof View>>,\n  'style'\n> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the Appbar.\n   * - `small` - Appbar with default height (64).\n   * - `medium` - Appbar with medium height (112).\n   * - `large` - Appbar with large height (152).\n   * - `center-aligned` - Appbar with default height and center-aligned title.\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether Appbar background should have the elevation along with primary color pigment.\n   */\n  elevated?: boolean;\n  /**\n   * Safe area insets for the Appbar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   */\n  safeAreaInsets?: {\n    bottom?: number;\n    top?: number;\n    left?: number;\n    right?: number;\n  };\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more informations\n *\n * ## Usage\n * ### Top bar\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Appbar.Header>\n *     <Appbar.BackAction onPress={() => {}} />\n *     <Appbar.Content title=\"Title\" />\n *     <Appbar.Action icon=\"calendar\" onPress={() => {}} />\n *     <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *   </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * ### Bottom bar\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { Appbar, FAB, useTheme } from 'react-native-paper';\n * import { useSafeAreaInsets } from 'react-native-safe-area-context';\n *\n * const BOTTOM_APPBAR_HEIGHT = 80;\n * const MEDIUM_FAB_HEIGHT = 56;\n *\n * const MyComponent = () => {\n *   const { bottom } = useSafeAreaInsets();\n *   const theme = useTheme();\n *\n *   return (\n *     <Appbar\n *       style={[\n *         styles.bottom,\n *         {\n *           height: BOTTOM_APPBAR_HEIGHT + bottom,\n *           backgroundColor: theme.colors.elevation.level2,\n *         },\n *       ]}\n *       safeAreaInsets={{ bottom }}\n *     >\n *       <Appbar.Action icon=\"archive\" onPress={() => {}} />\n *       <Appbar.Action icon=\"email\" onPress={() => {}} />\n *       <Appbar.Action icon=\"label\" onPress={() => {}} />\n *       <Appbar.Action icon=\"delete\" onPress={() => {}} />\n *       <FAB\n *         mode=\"flat\"\n *         size=\"medium\"\n *         icon=\"plus\"\n *         onPress={() => {}}\n *         style={[\n *           styles.fab,\n *           { top: (BOTTOM_APPBAR_HEIGHT - MEDIUM_FAB_HEIGHT) / 2 },\n *         ]}\n *       />\n *     </Appbar>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     backgroundColor: 'aquamarine',\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n *   fab: {\n *     position: 'absolute',\n *     right: 16,\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nconst Appbar = ({\n  children,\n  dark,\n  style,\n  mode = 'small',\n  elevated,\n  safeAreaInsets,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3 } = theme;\n  const flattenedStyle = StyleSheet.flatten(style);\n  const {\n    backgroundColor: customBackground,\n    elevation = isV3 ? (elevated ? 2 : 0) : 4,\n    ...restStyle\n  } = (flattenedStyle || {}) as Exclude<typeof flattenedStyle, number> & {\n    elevation?: number;\n    backgroundColor?: ColorValue;\n  };\n\n  const backgroundColor = getAppbarBackgroundColor(\n    theme,\n    elevation,\n    customBackground,\n    elevated\n  );\n\n  const isMode = (modeToCompare: AppbarModes) => {\n    return isV3 && mode === modeToCompare;\n  };\n\n  let isDark = false;\n\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else if (!isV3) {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  const isV3CenterAlignedMode = isV3 && isMode('center-aligned');\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if ((!isV3 && Platform.OS === 'ios') || isV3CenterAlignedMode) {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent &&\n      leftItemsCount < 2 &&\n      rightItemsCount < (isV3 ? 3 : 2);\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n\n  const filterAppbarActions = React.useCallback(\n    (isLeading = false) =>\n      React.Children.toArray(children).filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        isLeading ? child.props.isLeading : !child.props.isLeading\n      ),\n    [children]\n  );\n\n  const spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;\n\n  const insets = {\n    paddingBottom: safeAreaInsets?.bottom,\n    paddingTop: safeAreaInsets?.top,\n    paddingLeft: safeAreaInsets?.left,\n    paddingRight: safeAreaInsets?.right,\n  };\n\n  return (\n    <Surface\n      style={[\n        { backgroundColor },\n        styles.appbar,\n        {\n          height: isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT,\n        },\n        insets,\n        restStyle,\n        !theme.isV3 && { elevation },\n      ]}\n      elevation={elevation as MD3Elevation}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={spacingStyle} /> : null}\n      {(!isV3 || isMode('small') || isMode('center-aligned')) &&\n        renderAppbarContent({\n          children,\n          isDark,\n          theme,\n          isV3,\n          shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent,\n        })}\n      {(isMode('medium') || isMode('large')) && (\n        <View\n          style={[\n            styles.columnContainer,\n            isMode('center-aligned') && styles.centerAlignedContainer,\n          ]}\n        >\n          {/* Appbar top row with controls */}\n          <View style={styles.controlsRow}>\n            {/* Left side of row container, can contain AppbarBackAction or AppbarAction if it's leading icon  */}\n            {renderAppbarContent({\n              children,\n              isDark,\n              isV3,\n              renderOnly: ['Appbar.BackAction'],\n              mode,\n            })}\n            {renderAppbarContent({\n              children: filterAppbarActions(true),\n              isDark,\n              isV3,\n              renderOnly: ['Appbar.Action'],\n              mode,\n            })}\n            {/* Right side of row container, can contain other AppbarAction if they are not leading icons */}\n            <View style={styles.rightActionControls}>\n              {renderAppbarContent({\n                children: filterAppbarActions(false),\n                isDark,\n                isV3,\n                renderExcept: [\n                  'Appbar',\n                  'Appbar.BackAction',\n                  'Appbar.Content',\n                  'Appbar.Header',\n                ],\n                mode,\n              })}\n            </View>\n          </View>\n          {/* Middle of the row, can contain only AppbarContent */}\n          {renderAppbarContent({\n            children,\n            isDark,\n            isV3,\n            renderOnly: ['Appbar.Content'],\n            mode,\n          })}\n        </View>\n      )}\n      {shouldAddRightSpacing ? <View style={spacingStyle} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n  v3Spacing: {\n    width: 52,\n  },\n  controlsRow: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  rightActionControls: {\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'flex-end',\n  },\n  columnContainer: {\n    flexDirection: 'column',\n    flex: 1,\n    paddingTop: 8,\n  },\n  centerAlignedContainer: {\n    paddingTop: 0,\n  },\n});\n\nexport default Appbar;\n\n// @component-docs ignore-next-line\nexport { Appbar };\n","import * as React from 'react';\nimport type {\n  StyleProp,\n  ViewStyle,\n  View,\n  Animated,\n  ColorValue,\n} from 'react-native';\n\nimport color from 'color';\nimport type { ThemeProp } from 'src/types';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { black } from '../../styles/themes/v2/colors';\nimport { forwardRef } from '../../utils/forwardRef';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Whether it's the leading button.\n   */\n  isLeading?: boolean;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * A component used to display an action item in the appbar.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarAction = forwardRef<View, Props>(\n  (\n    {\n      size = 24,\n      color: iconColor,\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      isLeading,\n      theme: themeOverrides,\n      rippleColor,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n\n    const actionIconColor = iconColor\n      ? iconColor\n      : theme.isV3\n      ? isLeading\n        ? theme.colors.onSurface\n        : theme.colors.onSurfaceVariant\n      : color(black).alpha(0.54).rgb().string();\n\n    return (\n      <IconButton\n        size={size}\n        onPress={onPress}\n        iconColor={actionIconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        ref={ref}\n        rippleColor={rippleColor}\n        {...rest}\n      />\n    );\n  }\n);\n\nAppbarAction.displayName = 'Appbar.Action';\n\nexport default AppbarAction;\n\n// @component-docs ignore-next-line\nexport { AppbarAction };\n","import * as React from 'react';\nimport type {\n  GestureResponderEvent,\n  StyleProp,\n  ViewStyle,\n  View,\n  Animated,\n} from 'react-native';\n\nimport type { $Omit } from './../../types';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackIcon from './AppbarBackIcon';\nimport { forwardRef } from '../../utils/forwardRef';\n\nexport type Props = $Omit<\n  React.ComponentPropsWithoutRef<typeof AppbarAction>,\n  'icon'\n> & {\n  /**\n   *  Custom color for back icon.\n   */\n  color?: string;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  ref?: React.RefObject<View>;\n};\n\n/**\n * A component used to display a back button in the appbar.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarBackAction = forwardRef<View, Props>(\n  ({ accessibilityLabel = 'Back', ...rest }: Props, ref) => (\n    <AppbarAction\n      accessibilityLabel={accessibilityLabel}\n      {...rest}\n      icon={AppbarBackIcon}\n      isLeading\n      ref={ref}\n    />\n  )\n);\n\nAppbarBackAction.displayName = 'Appbar.BackAction';\n\nexport default AppbarBackAction;\n\n// @component-docs ignore-next-line\nexport { AppbarBackAction };\n","import * as React from 'react';\nimport { Platform, I18nManager, View, Image, StyleSheet } from 'react-native';\n\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\nconst AppbarBackIcon = ({ size, color }: { size: number; color: string }) => {\n  const iosIconSize = size - 3;\n\n  return Platform.OS === 'ios' ? (\n    <View\n      style={[\n        styles.wrapper,\n        {\n          width: size,\n          height: size,\n          transform: [{ scaleX: I18nManager.getConstants().isRTL ? -1 : 1 }],\n        },\n      ]}\n    >\n      <Image\n        source={require('../../assets/back-chevron.png')}\n        style={[\n          styles.icon,\n          { tintColor: color, width: iosIconSize, height: iosIconSize },\n        ]}\n        accessibilityIgnoresInvertColors\n      />\n    </View>\n  ) : (\n    <MaterialCommunityIcon\n      name=\"arrow-left\"\n      color={color}\n      size={size}\n      direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    resizeMode: 'contain',\n  },\n});\n\nexport default AppbarBackIcon;\n\n// @component-docs ignore-next-line\nexport { AppbarBackIcon };\n","import * as React from 'react';\nimport {\n  AccessibilityRole,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  Pressable,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { modeTextVariant } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { $RemoveChildren, MD3TypescaleKey, ThemeProp } from '../../types';\nimport Text, { TextRef } from '../Typography/Text';\n\ntype TitleString = {\n  title: string;\n  titleStyle?: StyleProp<TextStyle>;\n};\n\ntype TitleElement = { title: React.ReactNode; titleStyle?: never };\n\nexport type Props = $RemoveChildren<typeof View> & {\n  // For `title` and `titleStyle` props their types are duplicated due to the generation of documentation.\n  // Appropriate type for them are either `TitleString` or `TitleElement`, depends on `title` type.\n  /**\n   * Text or component for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title, if `title` is a string.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<TextRef>;\n  /**\n   * @deprecated Deprecated in v5.x\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * @deprecated Deprecated in v5.x\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * If true, disable all interactions for this component.\n   */\n  disabled?: boolean;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Specifies the largest possible scale a title font can reach.\n   */\n  titleMaxFontSizeMultiplier?: number;\n  /**\n   * @internal\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n} & (TitleString | TitleElement);\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  disabled,\n  style,\n  titleRef,\n  titleStyle,\n  title,\n  titleMaxFontSizeMultiplier,\n  mode = 'small',\n  theme: themeOverrides,\n  testID = 'appbar-content',\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3, colors } = theme;\n\n  const titleTextColor = titleColor\n    ? titleColor\n    : isV3\n    ? colors.onSurface\n    : white;\n\n  const subtitleColor = color(titleTextColor).alpha(0.7).rgb().string();\n\n  const modeContainerStyles = {\n    small: styles.v3DefaultContainer,\n    medium: styles.v3MediumContainer,\n    large: styles.v3LargeContainer,\n    'center-aligned': styles.v3DefaultContainer,\n  };\n\n  const variant = modeTextVariant[mode] as MD3TypescaleKey;\n\n  const contentWrapperProps = {\n    pointerEvents: 'box-none' as ViewProps['pointerEvents'],\n    style: [styles.container, isV3 && modeContainerStyles[mode], style],\n    testID,\n    ...rest,\n  };\n\n  const content = (\n    <>\n      {typeof title === 'string' ? (\n        <Text\n          {...(isV3 && { variant })}\n          ref={titleRef}\n          style={[\n            {\n              color: titleTextColor,\n              ...(isV3\n                ? theme.fonts[variant]\n                : Platform.OS === 'ios'\n                ? theme.fonts.regular\n                : theme.fonts.medium),\n            },\n            !isV3 && styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityRole={\n            onPress\n              ? 'none'\n              : Platform.OS === 'web'\n              ? ('heading' as 'header')\n              : 'header'\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"header\"\n          testID={`${testID}-title-text`}\n          maxFontSizeMultiplier={titleMaxFontSizeMultiplier}\n        >\n          {title}\n        </Text>\n      ) : (\n        title\n      )}\n      {!isV3 && subtitle ? (\n        <Text\n          style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n          numberOfLines={1}\n        >\n          {subtitle}\n        </Text>\n      ) : null}\n    </>\n  );\n\n  if (onPress) {\n    return (\n      // eslint-disable-next-line react-native-a11y/has-accessibility-props\n      <Pressable\n        accessibilityRole={touchableRole}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={touchableRole}\n        accessibilityComponentType=\"button\"\n        onPress={onPress}\n        disabled={disabled}\n        {...contentWrapperProps}\n      >\n        {content}\n      </Pressable>\n    );\n  }\n\n  return <View {...contentWrapperProps}>{content}</View>;\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  v3DefaultContainer: {\n    paddingHorizontal: 0,\n  },\n  v3MediumContainer: {\n    paddingHorizontal: 0,\n    justifyContent: 'flex-end',\n    paddingBottom: 24,\n  },\n  v3LargeContainer: {\n    paddingHorizontal: 0,\n    paddingTop: 36,\n    justifyContent: 'flex-end',\n    paddingBottom: 28,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nconst iosTouchableRole: readonly AccessibilityRole[] = ['button', 'header'];\nconst touchableRole: AccessibilityRole = Platform.select({\n  ios: iosTouchableRole as unknown as 'button',\n  default: iosTouchableRole[0],\n});\n\nexport default AppbarContent;\n\n// @component-docs ignore-next-line\nexport { AppbarContent };\n","import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport { Appbar } from './Appbar';\nimport {\n  DEFAULT_APPBAR_HEIGHT,\n  getAppbarBackgroundColor,\n  modeAppbarHeight,\n  getAppbarBorders,\n} from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport shadow from '../../styles/shadow';\nimport type { ThemeProp } from '../../types';\n\nexport type Props = React.ComponentProps<typeof Appbar> & {\n  /**\n   * Whether the background color is a dark color. A dark header will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Extra padding to add at the top of header to account for translucent status bar.\n   * This is automatically handled on iOS >= 11 including iPhone X using `SafeAreaView`.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to disable the default behaviour, and customize the height.\n   */\n  statusBarHeight?: number;\n  /**\n   * Content of the header.\n   */\n  children: React.ReactNode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the Appbar.\n   * - `small` - Appbar with default height (64).\n   * - `medium` - Appbar with medium height (112).\n   * - `large` - Appbar with large height (152).\n   * - `center-aligned` - Appbar with default height and center-aligned title.\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether Appbar background should have the elevation along with primary color pigment.\n   */\n  elevated?: boolean;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const _goBack = () => console.log('Went back');\n *\n *   const _handleSearch = () => console.log('Searching');\n *\n *   const _handleMore = () => console.log('Shown more');\n *\n *   return (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={_goBack} />\n *       <Appbar.Content title=\"Title\" />\n *       <Appbar.Action icon=\"magnify\" onPress={_handleSearch} />\n *       <Appbar.Action icon=\"dots-vertical\" onPress={_handleMore} />\n *     </Appbar.Header>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarHeader = ({\n  // Don't use default props since we check it to know whether we should use SafeAreaView\n  statusBarHeight,\n  style,\n  dark,\n  mode = Platform.OS === 'ios' ? 'center-aligned' : 'small',\n  elevated = false,\n  theme: themeOverrides,\n  testID = 'appbar-header',\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3 } = theme;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const {\n    height = isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT,\n    elevation = isV3 ? (elevated ? 2 : 0) : 4,\n    backgroundColor: customBackground,\n    zIndex = isV3 && elevated ? 1 : 0,\n    ...restStyle\n  } = (flattenedStyle || {}) as Exclude<typeof flattenedStyle, number> & {\n    height?: number;\n    elevation?: number;\n    backgroundColor?: ColorValue;\n    zIndex?: number;\n  };\n\n  const borderRadius = getAppbarBorders(restStyle);\n\n  const backgroundColor = getAppbarBackgroundColor(\n    theme,\n    elevation,\n    customBackground,\n    elevated\n  );\n\n  const { top, left, right } = useSafeAreaInsets();\n\n  return (\n    <View\n      testID={`${testID}-root-layer`}\n      style={[\n        {\n          backgroundColor,\n          zIndex,\n          elevation,\n          paddingTop: statusBarHeight ?? top,\n          paddingHorizontal: Math.max(left, right),\n        },\n        borderRadius,\n        shadow(elevation) as ViewStyle,\n      ]}\n    >\n      <Appbar\n        testID={testID}\n        style={[{ height, backgroundColor }, styles.appbar, restStyle]}\n        dark={dark}\n        {...(isV3 && {\n          mode,\n        })}\n        {...rest}\n        theme={theme}\n      />\n    </View>\n  );\n};\n\nAppbarHeader.displayName = 'Appbar.Header';\n\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0,\n  },\n});\n\nexport default AppbarHeader;\n\n// @component-docs ignore-next-line\nexport { AppbarHeader };\n","import AppbarComponent from './Appbar';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport AppbarContent from './AppbarContent';\nimport AppbarHeader from './AppbarHeader';\n\nconst Appbar = Object.assign(\n  // @component ./Appbar.tsx\n  AppbarComponent,\n  {\n    // @component ./AppbarContent.tsx\n    Content: AppbarContent,\n    // @component ./AppbarAction.tsx\n    Action: AppbarAction,\n    // @component ./AppbarBackAction.tsx\n    BackAction: AppbarBackAction,\n    // @component ./AppbarHeader.tsx\n    Header: AppbarHeader,\n  }\n);\n\nexport default Appbar;\n","import React from 'react';\nimport type { ColorValue, StyleProp, ViewStyle } from 'react-native';\nimport { StyleSheet, Animated } from 'react-native';\n\nimport overlay from '../../styles/overlay';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme, ThemeProp } from '../../types';\n\nexport type AppbarModes = 'small' | 'medium' | 'large' | 'center-aligned';\n\nconst borderStyleProperties = [\n  'borderRadius',\n  'borderTopLeftRadius',\n  'borderTopRightRadius',\n  'borderBottomRightRadius',\n  'borderBottomLeftRadius',\n];\n\nexport const getAppbarBackgroundColor = (\n  theme: InternalTheme,\n  elevation: number,\n  customBackground?: ColorValue,\n  elevated?: boolean\n) => {\n  const { isV3, dark: isDarkTheme, mode, colors } = theme;\n  const isAdaptiveMode = mode === 'adaptive';\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return overlay(elevation, colors?.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return theme.colors.elevation.level2;\n  }\n\n  return colors.surface;\n};\n\nexport const getAppbarColor = ({\n  color,\n  isDark,\n  isV3,\n}: BaseProps & { color: string }) => {\n  if (typeof color !== 'undefined') {\n    return color;\n  }\n\n  if (isDark) {\n    return white;\n  }\n\n  if (isV3) {\n    return undefined;\n  }\n\n  return black;\n};\n\nexport const getAppbarBorders = (\n  style:\n    | Animated.Value\n    | Animated.AnimatedInterpolation<string | number>\n    | Animated.WithAnimatedObject<ViewStyle>\n) => {\n  const borders: Record<string, number> = {};\n\n  for (const property of borderStyleProperties) {\n    const value = style[property as keyof typeof style];\n    if (value) {\n      borders[property] = value;\n    }\n  }\n\n  return borders;\n};\n\ntype BaseProps = {\n  isDark: boolean;\n  isV3: boolean;\n};\n\ntype RenderAppbarContentProps = BaseProps & {\n  children: React.ReactNode;\n  shouldCenterContent?: boolean;\n  isV3: boolean;\n  renderOnly?: (string | boolean)[];\n  renderExcept?: string[];\n  mode?: AppbarModes;\n  theme?: ThemeProp;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\nconst MD3_DEFAULT_APPBAR_HEIGHT = 64;\n\nexport const modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT,\n};\n\nexport const modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge',\n} as const;\n\nexport const renderAppbarContent = ({\n  children,\n  isDark,\n  shouldCenterContent = false,\n  isV3,\n  renderOnly,\n  renderExcept,\n  mode = 'small',\n  theme,\n}: RenderAppbarContentProps) => {\n  return React.Children.toArray(children as React.ReactNode | React.ReactNode[])\n    .filter((child) => child != null && typeof child !== 'boolean')\n    .filter((child) =>\n      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n      renderExcept ? !renderExcept.includes(child.type.displayName) : child\n    )\n    .filter((child) =>\n      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n      renderOnly ? renderOnly.includes(child.type.displayName) : child\n    )\n    .map((child, i) => {\n      if (\n        !React.isValidElement(child) ||\n        ![\n          'Appbar.Content',\n          'Appbar.Action',\n          'Appbar.BackAction',\n          'Tooltip',\n        ].includes(\n          // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n          child.type.displayName\n        )\n      ) {\n        return child;\n      }\n\n      const props: {\n        color?: string;\n        style?: StyleProp<ViewStyle>;\n        mode?: AppbarModes;\n        theme?: ThemeProp;\n      } = {\n        theme,\n        color: getAppbarColor({ color: child.props.color, isDark, isV3 }),\n      };\n\n      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n      if (child.type.displayName === 'Appbar.Content') {\n        props.mode = mode;\n        props.style = [\n          isV3\n            ? i === 0 && !shouldCenterContent && styles.v3Spacing\n            : i !== 0 && styles.v2Spacing,\n          shouldCenterContent && styles.centerAlignedContent,\n          child.props.style,\n        ];\n        props.color;\n      }\n      return React.cloneElement(child, props);\n    });\n};\n\nconst styles = StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center',\n  },\n  v2Spacing: {\n    marginLeft: 8,\n  },\n  v3Spacing: {\n    marginLeft: 12,\n  },\n});\n","// @component ./AvatarIcon.tsx\nexport { default as Icon } from './AvatarIcon';\n\n// @component ./AvatarImage.tsx\nexport { default as Image } from './AvatarImage';\n\n// @component ./AvatarText.tsx\nexport { default as Text } from './AvatarText';\n","import * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Icon, { IconSource } from '../Icon';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nconst Avatar = ({\n  icon,\n  size = defaultSize,\n  style,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { backgroundColor = theme.colors?.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    rest.color ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Icon source={icon} color={textColor} size={size * 0.6} />\n    </View>\n  );\n};\n\nAvatar.displayName = 'Avatar.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default Avatar;\n","import * as React from 'react';\nimport {\n  Image,\n  ImageProps,\n  ImageSourcePropType,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\n\nconst defaultSize = 64;\n\nexport type AvatarImageSource =\n  | ImageSourcePropType\n  | ((props: { size: number }) => React.ReactNode);\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Image to display for the `Avatar`.\n   * It accepts a standard React Native Image `source` prop\n   * Or a function that returns an `Image`.\n   */\n  source: AvatarImageSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Invoked on load error.\n   */\n  onError?: ImageProps['onError'];\n  /**\n   * Invoked on mount and on layout changes.\n   */\n  onLayout?: ImageProps['onLayout'];\n  /**\n   * Invoked when load completes successfully.\n   */\n  onLoad?: ImageProps['onLoad'];\n  /**\n   * Invoked when load either succeeds or fails.\n   */\n  onLoadEnd?: ImageProps['onLoadEnd'];\n  /**\n   * Invoked on load start.\n   */\n  onLoadStart?: ImageProps['onLoadStart'];\n  /**\n   * Invoked on download progress.\n   */\n  onProgress?: ImageProps['onProgress'];\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />\n * );\n * export default MyComponent\n * ```\n */\nconst AvatarImage = ({\n  size = defaultSize,\n  source,\n  style,\n  onError,\n  onLayout,\n  onLoad,\n  onLoadEnd,\n  onLoadStart,\n  onProgress,\n  theme: themeOverrides,\n  testID,\n  ...rest\n}: Props) => {\n  const { colors } = useInternalTheme(themeOverrides);\n  const { backgroundColor = colors?.primary } = StyleSheet.flatten(style) || {};\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {typeof source === 'function' && source({ size })}\n      {typeof source !== 'function' && (\n        <Image\n          testID={testID}\n          source={source}\n          style={{ width: size, height: size, borderRadius: size / 2 }}\n          onError={onError}\n          onLayout={onLayout}\n          onLoad={onLoad}\n          onLoadEnd={onLoadEnd}\n          onLoadStart={onLoadStart}\n          onProgress={onProgress}\n          accessibilityIgnoresInvertColors\n        />\n      )}\n    </View>\n  );\n};\n\nAvatarImage.displayName = 'Avatar.Image';\n\nexport default AvatarImage;\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Text from '../Typography/Text';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  labelStyle,\n  color: customColor,\n  theme: themeOverrides,\n  maxFontSizeMultiplier,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { backgroundColor = theme.colors?.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const { fontScale } = useWindowDimensions();\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size / fontScale,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default AvatarText;\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  useWindowDimensions,\n} from 'react-native';\n\nimport { useInternalTheme } from '../core/theming';\nimport { black, white } from '../styles/themes/v2/colors';\nimport type { ThemeProp } from '../types';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\nexport type Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme: themeOverrides,\n  visible = true,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { fontScale } = useWindowDimensions();\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const {\n    backgroundColor = theme.isV3\n      ? theme.colors.error\n      : theme.colors?.notification,\n    ...restStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = theme.isV3\n    ? theme.colors.onError\n    : getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  const paddingHorizontal = theme.isV3 ? 3 : 4;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...(!theme.isV3 && theme.fonts.regular),\n          lineHeight: size / fontScale,\n          height: size,\n          minWidth: size,\n          borderRadius,\n          paddingHorizontal,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default Badge;\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    overflow: 'hidden',\n  },\n});\n","import * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\nimport type { LayoutChangeEvent } from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport Button from './Button/Button';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport { useInternalTheme } from '../core/theming';\nimport type { $Omit, $RemoveChildren, ThemeProp } from '../types';\n\nconst DEFAULT_MAX_WIDTH = 960;\n\nexport type Props = $Omit<$RemoveChildren<typeof Surface>, 'mode'> & {\n  /**\n   * Whether banner is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Content that will be displayed inside banner.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Banner`. Can be an image.\n   */\n  icon?: IconSource;\n  /**\n   * Action items to shown in the banner.\n   * An action item should contain the following properties:\n   *\n   * - `label`: label of the action button (required)\n   * - `onPress`: callback that is called when button is pressed (required)\n   *\n   * To customize button you can pass other props that button component takes.\n   */\n  actions?: Array<\n    {\n      label: string;\n    } & $RemoveChildren<typeof Button>\n  >;\n  /**\n   * Style of banner's inner content.\n   * Use this prop to apply custom width for wide layouts.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Banner shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * @optional\n   * Optional callback that will be called after the opening animation finished running normally\n   */\n  onShowAnimationFinished?: Animated.EndCallback;\n  /**\n   * @optional\n   * Optional callback that will be called after the closing animation finished running normally\n   */\n  onHideAnimationFinished?: Animated.EndCallback;\n};\n\n/**\n * Banner displays a prominent message and related actions.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(true);\n *\n *   return (\n *     <Banner\n *       visible={visible}\n *       actions={[\n *         {\n *           label: 'Fix it',\n *           onPress: () => setVisible(false),\n *         },\n *         {\n *           label: 'Learn more',\n *           onPress: () => setVisible(false),\n *         },\n *       ]}\n *       icon={({size}) => (\n *         <Image\n *           source={{\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\n *           }}\n *           style={{\n *             width: size,\n *             height: size,\n *           }}\n *         />\n *       )}>\n *       There was a problem processing a transaction on your credit card.\n *     </Banner>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Banner = ({\n  visible,\n  icon,\n  children,\n  actions = [],\n  contentStyle,\n  elevation = 1,\n  style,\n  theme: themeOverrides,\n  onShowAnimationFinished = () => {},\n  onHideAnimationFinished = () => {},\n  maxFontSizeMultiplier,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { current: position } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const [layout, setLayout] = React.useState<{\n    height: number;\n    measured: boolean;\n  }>({\n    height: 0,\n    measured: false,\n  });\n\n  const showCallback = useLatestCallback(onShowAnimationFinished);\n  const hideCallback = useLatestCallback(onHideAnimationFinished);\n\n  const { scale } = theme.animation;\n\n  const opacity = position.interpolate({\n    inputRange: [0, 0.1, 1],\n    outputRange: [0, 1, 1],\n  });\n\n  React.useEffect(() => {\n    if (visible) {\n      // show\n      Animated.timing(position, {\n        duration: 250 * scale,\n        toValue: 1,\n        useNativeDriver: false,\n      }).start(showCallback);\n    } else {\n      // hide\n      Animated.timing(position, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: false,\n      }).start(hideCallback);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible, position, scale]);\n\n  const handleLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    const { height } = nativeEvent.layout;\n    setLayout({ height, measured: true });\n  };\n\n  // The banner animation has 2 parts:\n  // 1. Blank spacer element which animates its height to move the content\n  // 2. Actual banner which animates its translateY\n  // In initial render, we position everything normally and measure the height of the banner\n  // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n  // We need this because we need to move the content below as if banner's height was being animated\n  // However we can't animated banner's height directly as it'll also resize the content inside\n  const height = Animated.multiply(position, layout.height);\n\n  const translateY = Animated.multiply(\n    Animated.add(position, -1),\n    layout.height\n  );\n  return (\n    <Surface\n      {...rest}\n      style={[!theme.isV3 && styles.elevation, { opacity }, style]}\n      theme={theme}\n      {...(theme.isV3 && { elevation })}\n    >\n      <View style={[styles.wrapper, contentStyle]}>\n        <Animated.View style={{ height }} />\n        <Animated.View\n          onLayout={handleLayout}\n          style={[\n            layout.measured || !visible\n              ? // If we have measured banner's height or it's invisible,\n                // Position it absolutely, the layout will be taken care of the spacer\n                [styles.absolute, { transform: [{ translateY }] }]\n              : // Otherwise position it normally\n                null,\n            !layout.measured && !visible\n              ? // If we haven't measured banner's height yet and it's invisible,\n                // hide it with opacity: 0 so user doesn't see it\n                styles.transparent\n              : null,\n          ]}\n        >\n          <View style={styles.content}>\n            {icon ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={40} />\n              </View>\n            ) : null}\n            <Text\n              style={[\n                styles.message,\n                {\n                  color: theme.isV3\n                    ? theme.colors.onSurface\n                    : theme.colors.text,\n                },\n              ]}\n              accessibilityLiveRegion={visible ? 'polite' : 'none'}\n              accessibilityRole=\"alert\"\n              maxFontSizeMultiplier={maxFontSizeMultiplier}\n            >\n              {children}\n            </Text>\n          </View>\n          <View style={styles.actions}>\n            {actions.map(({ label, ...others }, i) => (\n              <Button\n                key={/* eslint-disable-line react/no-array-index-key */ i}\n                compact\n                mode=\"text\"\n                style={styles.button}\n                textColor={theme.colors?.primary}\n                theme={theme}\n                {...others}\n              >\n                {label}\n              </Button>\n            ))}\n          </View>\n        </Animated.View>\n      </View>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%',\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0,\n  },\n  icon: {\n    margin: 8,\n  },\n  message: {\n    flex: 1,\n    margin: 8,\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4,\n  },\n  button: {\n    margin: 4,\n  },\n  elevation: {\n    elevation: 1,\n  },\n  transparent: {\n    opacity: 0,\n  },\n});\n\nexport default Banner;\n","import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  EasingFunction,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport BottomNavigationBar from './BottomNavigationBar';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\nimport { useInternalTheme } from '../../core/theming';\nimport type { ThemeProp } from '../../types';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport type { IconSource } from '../Icon';\nimport { Props as TouchableRippleProps } from '../TouchableRipple/TouchableRipple';\n\nexport type BaseRoute = {\n  key: string;\n  title?: string;\n  focusedIcon?: IconSource;\n  unfocusedIcon?: IconSource;\n  badge?: string | number | boolean;\n  /**\n   * @deprecated In v5.x works only with theme version 2.\n   */\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n  lazy?: boolean;\n};\n\ntype NavigationState<Route extends BaseRoute> = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps<Route extends BaseRoute> = TouchableRippleProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: ColorValue;\n};\n\nexport type Props<Route extends BaseRoute> = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `false` with theme version 3 and `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   * Note that you need at least 2 tabs be able to run this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * Whether tabs should be spread across the entire width.\n   */\n  compact?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `focusedIcon`:  icon to use as the focused tab icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   * - `unfocusedIcon`:  icon to use as the unfocused tab icon, can be a string, an image source or a react component @supported Available in v5.x with theme version 3\n   * - `color`: color to use as background color for shifting bottom navigation @deprecatedProperty In v5.x works only with theme version 2.\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Favorites', focusedIcon: 'heart', unfocusedIcon: 'heart-outline'},\n   *     { key: 'albums', title: 'Albums', focusedIcon: 'album' },\n   *     { key: 'recents', title: 'Recents', focusedIcon: 'history' },\n   *     { key: 'notifications', title: 'Notifications', focusedIcon: 'bell', unfocusedIcon: 'bell-outline' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState<Route>;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `Pressable` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps<Route>) => React.ReactNode;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get lazy for the current screen. Uses true by default.\n   */\n  getLazy?: (props: { route: Route }) => boolean | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Function to execute on tab long press. It receives the route for the pressed tab, useful for things like custom action when longed pressed.\n   */\n  onTabLongPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * The scene animation effect. Specify `'shifting'` for a different effect.\n   * By default, 'opacity' will be used.\n   */\n  sceneAnimationType?: 'opacity' | 'shifting';\n  /**\n   * The scene animation Easing.\n   */\n  sceneAnimationEasing?: EasingFunction | undefined;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  activeIndicatorStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * BottomNavigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile. If you want to use the navigation bar only see [`BottomNavigation.Bar`](BottomNavigationBar).\n *\n * By default BottomNavigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/docs/guides/theming#dark-theme) for more information.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const NotificationsRoute = () => <Text>Notifications</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Favorites', focusedIcon: 'heart', unfocusedIcon: 'heart-outline'},\n *     { key: 'albums', title: 'Albums', focusedIcon: 'album' },\n *     { key: 'recents', title: 'Recents', focusedIcon: 'history' },\n *     { key: 'notifications', title: 'Notifications', focusedIcon: 'bell', unfocusedIcon: 'bell-outline' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *     notifications: NotificationsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = <Route extends BaseRoute>({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable,\n  getLabelText,\n  getBadge,\n  getColor,\n  getAccessibilityLabel,\n  getTestID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = Platform.OS === 'android',\n  barStyle,\n  labeled = true,\n  style,\n  activeIndicatorStyle,\n  sceneAnimationEnabled = false,\n  sceneAnimationType = 'opacity',\n  sceneAnimationEasing,\n  onTabPress,\n  onTabLongPress,\n  onIndexChange,\n  shifting: shiftingProp,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n  compact: compactProp,\n  testID = 'bottom-navigation',\n  theme: themeOverrides,\n  getLazy = ({ route }: { route: Route }) => route.lazy,\n}: Props<Route>) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { scale } = theme.animation;\n  const compact = compactProp ?? !theme.isV3;\n  let shifting =\n    shiftingProp ?? (theme.isV3 ? false : navigationState.routes.length > 3);\n\n  if (shifting && navigationState.routes.length < 2) {\n    shifting = false;\n    console.warn(\n      'BottomNavigation needs at least 2 tabs to run shifting animation'\n    );\n  }\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Active state of individual tab item positions:\n   * -1 if they're before the active tab, 0 if they're active, 1 if they're after the active tab\n   */\n  const tabsPositionAnims = useAnimatedValueArray(\n    navigationState.routes.map((_, i) =>\n      i === navigationState.index ? 0 : i >= navigationState.index ? 1 : -1\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      Animated.parallel([\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsPositionAnims[i], {\n            toValue: i === index ? 0 : i >= index ? 1 : -1,\n            duration: theme.isV3 || shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n            easing: sceneAnimationEasing,\n          })\n        ),\n      ]).start(({ finished }) => {\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      scale,\n      tabsPositionAnims,\n      sceneAnimationEasing,\n      theme,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const prevNavigationState = React.useRef<NavigationState<Route>>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = useLatestCallback(\n    (event: { route: Route } & TabPressEvent) => {\n      onTabPress?.(event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      const index = navigationState.routes.findIndex(\n        (route) => event.route.key === route.key\n      );\n\n      if (index !== navigationState.index) {\n        prevNavigationState.current = navigationState;\n        onIndexChange(index);\n      }\n    }\n  );\n\n  const jumpTo = useLatestCallback((key: string) => {\n    const index = navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    prevNavigationState.current = navigationState;\n    onIndexChange(index);\n  });\n\n  const { routes } = navigationState;\n  const { colors } = theme;\n\n  return (\n    <View style={[styles.container, style]} testID={testID}>\n      <View style={[styles.content, { backgroundColor: colors?.background }]}>\n        {routes.map((route, index) => {\n          if (getLazy({ route }) !== false && !loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n          const previouslyFocused =\n            prevNavigationState.current?.index === index;\n          const countAlphaOffscreen =\n            sceneAnimationEnabled && (focused || previouslyFocused);\n          const renderToHardwareTextureAndroid =\n            sceneAnimationEnabled && focused;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsPositionAnims[index].interpolate({\n                inputRange: [-1, 0, 1],\n                outputRange: [0, 1, 0],\n              })\n            : focused\n            ? 1\n            : 0;\n\n          const offsetTarget = focused ? 0 : FAR_FAR_AWAY;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, offsetTarget],\n              })\n            : offsetTarget;\n\n          const left =\n            sceneAnimationType === 'shifting'\n              ? tabsPositionAnims[index].interpolate({\n                  inputRange: [-1, 0, 1],\n                  outputRange: [-50, 0, 50],\n                })\n              : 0;\n\n          const zIndex = focused ? 1 : 0;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { zIndex }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View\n                {...(Platform.OS === 'android' && {\n                  needsOffscreenAlphaCompositing: countAlphaOffscreen,\n                })}\n                renderToHardwareTextureAndroid={renderToHardwareTextureAndroid}\n                style={[\n                  styles.content,\n                  {\n                    opacity,\n                    transform: [{ translateX: left }, { translateY: top }],\n                  },\n                ]}\n              >\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <BottomNavigationBar\n        navigationState={navigationState}\n        renderIcon={renderIcon}\n        renderLabel={renderLabel}\n        renderTouchable={renderTouchable}\n        getLabelText={getLabelText}\n        getBadge={getBadge}\n        getColor={getColor}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getTestID={getTestID}\n        activeColor={activeColor}\n        inactiveColor={inactiveColor}\n        keyboardHidesNavigationBar={keyboardHidesNavigationBar}\n        style={barStyle}\n        activeIndicatorStyle={activeIndicatorStyle}\n        labeled={labeled}\n        animationEasing={sceneAnimationEasing}\n        onTabPress={handleTabPress}\n        onTabLongPress={onTabLongPress}\n        shifting={shifting}\n        safeAreaInsets={safeAreaInsets}\n        labelMaxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n        compact={compact}\n        testID={`${testID}-bar`}\n        theme={theme}\n      />\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = <Route extends BaseRoute>(scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\n// @component ./BottomNavigationBar.tsx\nBottomNavigation.Bar = BottomNavigationBar;\n\nexport default BottomNavigation;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n});\n","import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  EasingFunction,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Pressable,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport {\n  getActiveTintColor,\n  getInactiveTintColor,\n  getLabelColor,\n} from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport useLayout from '../../utils/useLayout';\nimport Badge from '../Badge';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { Props as TouchableRippleProps } from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\ntype BaseRoute = {\n  key: string;\n  title?: string;\n  focusedIcon?: IconSource;\n  unfocusedIcon?: IconSource;\n  badge?: string | number | boolean;\n  /**\n   * @deprecated In v5.x works only with theme version 2.\n   */\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n  lazy?: boolean;\n};\n\ntype NavigationState<Route extends BaseRoute> = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps<Route extends BaseRoute> = TouchableRippleProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: ColorValue;\n};\n\nexport type Props<Route extends BaseRoute> = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `false` with theme version 3 and `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   * Note that you need at least 2 tabs be able to run this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * Whether tabs should be spread across the entire width.\n   */\n  compact?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `focusedIcon`:  icon to use as the focused tab icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   * - `unfocusedIcon`:  icon to use as the unfocused tab icon, can be a string, an image source or a react component @supported Available in v5.x with theme version 3\n   * - `color`: color to use as background color for shifting bottom navigation @deprecatedProperty In v5.x works only with theme version 2.\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Favorites', focusedIcon: 'heart', unfocusedIcon: 'heart-outline'},\n   *     { key: 'albums', title: 'Albums', focusedIcon: 'album' },\n   *     { key: 'recents', title: 'Recents', focusedIcon: 'history' },\n   *     { key: 'notifications', title: 'Notifications', focusedIcon: 'bell', unfocusedIcon: 'bell-outline' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation.Bar` is a controlled component, which means the `index` needs to be updated via the `onTabPress` callback.\n   */\n  navigationState: NavigationState<Route>;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `Pressable` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps<Route>) => React.ReactNode;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab. Use this to update the navigation state.\n   */\n  onTabPress: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Function to execute on tab long press. It receives the route for the pressed tab\n   */\n  onTabLongPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * The scene animation Easing.\n   */\n  animationEasing?: EasingFunction | undefined;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  activeIndicatorStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst OUTLINE_WIDTH = 64;\n\nconst Touchable = <Route extends BaseRoute>({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps<Route>) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <Pressable style={style} {...rest}>\n      {children}\n    </Pressable>\n  );\n\n/**\n * A navigation bar which can easily be integrated with [React Navigation's Bottom Tabs Navigator](https://reactnavigation.org/docs/bottom-tab-navigator/).\n *\n * ## Usage\n * ```js\n * import React from 'react';\n * import { View, StyleSheet } from 'react-native';\n *\n * import { CommonActions } from '@react-navigation/native';\n * import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n * import { Text, BottomNavigation } from 'react-native-paper';\n * import Icon from 'react-native-vector-icons/MaterialCommunityIcons';\n *\n * const Tab = createBottomTabNavigator();\n *\n * export default function MyComponent() {\n *   return (\n *     <Tab.Navigator\n *       screenOptions={{\n *         headerShown: false,\n *       }}\n *       tabBar={({ navigation, state, descriptors, insets }) => (\n *         <BottomNavigation.Bar\n *           navigationState={state}\n *          safeAreaInsets={insets}\n *           onTabPress={({ route, preventDefault }) => {\n *             const event = navigation.emit({\n *               type: 'tabPress',\n *               target: route.key,\n *               canPreventDefault: true,\n *             });\n *\n *             if (event.defaultPrevented) {\n *               preventDefault();\n *             } else {\n *              navigation.dispatch({\n *                 ...CommonActions.navigate(route.name, route.params),\n *                 target: state.key,\n *               });\n *             }\n *           }}\n *           renderIcon={({ route, focused, color }) => {\n *             const { options } = descriptors[route.key];\n *             if (options.tabBarIcon) {\n *               return options.tabBarIcon({ focused, color, size: 24 });\n *             }\n *\n *             return null;\n *           }}\n *           getLabelText={({ route }) => {\n *             const { options } = descriptors[route.key];\n *             const label =\n *               options.tabBarLabel !== undefined\n *                 ? options.tabBarLabel\n *                 : options.title !== undefined\n *                 ? options.title\n *                 : route.title;\n *\n *             return label;\n *           }}\n *         />\n *       )}\n *     >\n *       <Tab.Screen\n *         name=\"Home\"\n *         component={HomeScreen}\n *         options={{\n *           tabBarLabel: 'Home',\n *           tabBarIcon: ({ color, size }) => {\n *             return <Icon name=\"home\" size={size} color={color} />;\n *           },\n *         }}\n *       />\n *       <Tab.Screen\n *         name=\"Settings\"\n *         component={SettingsScreen}\n *         options={{\n *           tabBarLabel: 'Settings',\n *           tabBarIcon: ({ color, size }) => {\n *             return <Icon name=\"cog\" size={size} color={color} />;\n *           },\n *         }}\n *       />\n *     </Tab.Navigator>\n *   );\n * }\n *\n * function HomeScreen() {\n *   return (\n *     <View style={styles.container}>\n *       <Text variant=\"headlineMedium\">Home!</Text>\n *     </View>\n *   );\n * }\n *\n * function SettingsScreen() {\n *   return (\n *     <View style={styles.container}>\n *       <Text variant=\"headlineMedium\">Settings!</Text>\n *     </View>\n *   );\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'center',\n *     alignItems: 'center',\n *   },\n * });\n * ```\n */\nconst BottomNavigationBar = <Route extends BaseRoute>({\n  navigationState,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps<Route>) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = Platform.OS === 'android',\n  style,\n  activeIndicatorStyle,\n  labeled = true,\n  animationEasing,\n  onTabPress,\n  onTabLongPress,\n  shifting: shiftingProp,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n  compact: compactProp,\n  testID = 'bottom-navigation-bar',\n  theme: themeOverrides,\n}: Props<Route>) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { bottom, left, right } = useSafeAreaInsets();\n  const { scale } = theme.animation;\n  const compact = compactProp ?? !theme.isV3;\n  let shifting =\n    shiftingProp ?? (theme.isV3 ? false : navigationState.routes.length > 3);\n\n  if (shifting && navigationState.routes.length < 2) {\n    shifting = false;\n    console.warn(\n      'BottomNavigation.Bar needs at least 2 tabs to run shifting animation'\n    );\n  }\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors?.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: theme.isV3 || shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: theme.isV3 || shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n            easing: animationEasing,\n          })\n        ),\n      ]).start(() => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n      });\n    },\n    [\n      rippleAnim,\n      theme.isV3,\n      shifting,\n      scale,\n      navigationState.routes,\n      tabsAnims,\n      animationEasing,\n      indexAnim,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  React.useEffect(() => {\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex]);\n\n  const eventForIndex = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    return event;\n  };\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode, isV3 } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 } =\n    (StyleSheet.flatten(style) || {}) as {\n      elevation?: number;\n      backgroundColor?: ColorValue;\n    };\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors?.surface)\n    : colors?.primary;\n\n  const v2BackgroundColorInterpolation = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const backgroundColor = isV3\n    ? customBackground || theme.colors.elevation.level2\n    : shifting\n    ? v2BackgroundColorInterpolation\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n\n  const activeTintColor = getActiveTintColor({\n    activeColor,\n    defaultColor: textColor,\n    theme,\n  });\n\n  const inactiveTintColor = getInactiveTintColor({\n    inactiveColor,\n    defaultColor: textColor,\n    theme,\n  });\n  const touchColor = color(activeTintColor).alpha(0.12).rgb().string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? left,\n    right: safeAreaInsets?.right ?? right,\n    bottom: safeAreaInsets?.bottom ?? bottom,\n  };\n\n  return (\n    <Surface\n      {...(theme.isV3 && { elevation: 0 })}\n      testID={testID}\n      style={[\n        !theme.isV3 && styles.elevation,\n        styles.bar,\n        keyboardHidesNavigationBar // eslint-disable-next-line react-native/no-inline-styles\n          ? {\n              // When the keyboard is shown, slide down the navigation bar\n              transform: [\n                {\n                  translateY: visibleAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [layout.height, 0],\n                  }),\n                },\n              ],\n              // Absolutely position the navigation bar so that the content is below it\n              // This is needed to avoid gap at bottom when the navigation bar is hidden\n              position: keyboardVisible ? 'absolute' : undefined,\n            }\n          : null,\n        style,\n      ]}\n      pointerEvents={\n        layout.measured\n          ? keyboardHidesNavigationBar && keyboardVisible\n            ? 'none'\n            : 'auto'\n          : 'none'\n      }\n      onLayout={onLayout}\n    >\n      <Animated.View\n        style={[styles.barContent, { backgroundColor }]}\n        testID={`${testID}-content`}\n      >\n        <View\n          style={[\n            styles.items,\n            {\n              marginBottom: insets.bottom,\n              marginHorizontal: Math.max(insets.left, insets.right),\n            },\n            compact && {\n              maxWidth: maxTabBarWidth,\n            },\n          ]}\n          accessibilityRole={'tablist'}\n          testID={`${testID}-content-wrapper`}\n        >\n          {shifting && !isV3 ? (\n            <Animated.View\n              pointerEvents=\"none\"\n              style={[\n                styles.ripple,\n                {\n                  // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                  // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                  top: (BAR_HEIGHT - rippleSize) / 2,\n                  left:\n                    (Math.min(layout.width, maxTabBarWidth) / routes.length) *\n                      (navigationState.index + 0.5) -\n                    rippleSize / 2,\n                  height: rippleSize,\n                  width: rippleSize,\n                  borderRadius: rippleSize / 2,\n                  backgroundColor: getColor({\n                    route: routes[navigationState.index],\n                  }),\n                  transform: [\n                    {\n                      // Scale to twice the size  to ensure it covers the whole navigation bar\n                      scale: rippleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0, 8],\n                      }),\n                    },\n                  ],\n                  opacity: rippleAnim.interpolate({\n                    inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                    outputRange: [0, 0, 1, 1],\n                  }),\n                },\n              ]}\n              testID={`${testID}-content-ripple`}\n            />\n          ) : null}\n          {routes.map((route, index) => {\n            const focused = navigationState.index === index;\n            const active = tabsAnims[index];\n\n            // Scale the label up\n            const scale =\n              labeled && shifting\n                ? active.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0.5, 1],\n                  })\n                : 1;\n\n            // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n            const translateY = labeled\n              ? shifting\n                ? active.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [7, 0],\n                  })\n                : 0\n              : 7;\n\n            // We render the active icon and label on top of inactive ones and cross-fade them on change.\n            // This trick gives the illusion that we are animating between active and inactive colors.\n            // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n            const activeOpacity = active;\n            const inactiveOpacity = active.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            });\n\n            const v3ActiveOpacity = focused ? 1 : 0;\n            const v3InactiveOpacity = shifting\n              ? inactiveOpacity\n              : focused\n              ? 0\n              : 1;\n\n            // Scale horizontally the outline pill\n            const outlineScale = focused\n              ? active.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [0.5, 1],\n                })\n              : 0;\n\n            const badge = getBadge({ route });\n\n            const activeLabelColor = getLabelColor({\n              tintColor: activeTintColor,\n              hasColor: Boolean(activeColor),\n              focused,\n              defaultColor: textColor,\n              theme,\n            });\n\n            const inactiveLabelColor = getLabelColor({\n              tintColor: inactiveTintColor,\n              hasColor: Boolean(inactiveColor),\n              focused,\n              defaultColor: textColor,\n              theme,\n            });\n\n            const badgeStyle = {\n              top: !isV3 ? -2 : typeof badge === 'boolean' ? 4 : 2,\n              right:\n                (badge != null && typeof badge !== 'boolean'\n                  ? String(badge).length * -2\n                  : 0) - (!isV3 ? 2 : 0),\n            };\n\n            const isV3Shifting = isV3 && shifting && labeled;\n\n            const font = isV3 ? theme.fonts.labelMedium : {};\n\n            return renderTouchable({\n              key: route.key,\n              route,\n              borderless: true,\n              centered: true,\n              rippleColor: isV3 ? 'transparent' : touchColor,\n              onPress: () => onTabPress(eventForIndex(index)),\n              onLongPress: () => onTabLongPress?.(eventForIndex(index)),\n              testID: getTestID({ route }),\n              accessibilityLabel: getAccessibilityLabel({ route }),\n              accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n              accessibilityState: { selected: focused },\n              style: [styles.item, isV3 && styles.v3Item],\n              children: (\n                <View\n                  pointerEvents=\"none\"\n                  style={\n                    isV3 &&\n                    (labeled\n                      ? styles.v3TouchableContainer\n                      : styles.v3NoLabelContainer)\n                  }\n                >\n                  <Animated.View\n                    style={[\n                      styles.iconContainer,\n                      isV3 && styles.v3IconContainer,\n                      (!isV3 || isV3Shifting) && {\n                        transform: [{ translateY }],\n                      },\n                    ]}\n                  >\n                    {isV3 && focused && (\n                      <Animated.View\n                        style={[\n                          styles.outline,\n                          {\n                            transform: [\n                              {\n                                scaleX: outlineScale,\n                              },\n                            ],\n                            backgroundColor: theme.colors.secondaryContainer,\n                          },\n                          activeIndicatorStyle,\n                        ]}\n                      />\n                    )}\n                    <Animated.View\n                      style={[\n                        styles.iconWrapper,\n                        isV3 && styles.v3IconWrapper,\n                        { opacity: isV3 ? v3ActiveOpacity : activeOpacity },\n                      ]}\n                    >\n                      {renderIcon ? (\n                        renderIcon({\n                          route,\n                          focused: true,\n                          color: activeTintColor,\n                        })\n                      ) : (\n                        <Icon\n                          source={route.focusedIcon as IconSource}\n                          color={activeTintColor}\n                          size={24}\n                        />\n                      )}\n                    </Animated.View>\n                    <Animated.View\n                      style={[\n                        styles.iconWrapper,\n                        isV3 && styles.v3IconWrapper,\n                        {\n                          opacity: isV3 ? v3InactiveOpacity : inactiveOpacity,\n                        },\n                      ]}\n                    >\n                      {renderIcon ? (\n                        renderIcon({\n                          route,\n                          focused: false,\n                          color: inactiveTintColor,\n                        })\n                      ) : (\n                        <Icon\n                          source={\n                            theme.isV3 && route.unfocusedIcon !== undefined\n                              ? route.unfocusedIcon\n                              : (route.focusedIcon as IconSource)\n                          }\n                          color={inactiveTintColor}\n                          size={24}\n                        />\n                      )}\n                    </Animated.View>\n                    <View style={[styles.badgeContainer, badgeStyle]}>\n                      {typeof badge === 'boolean' ? (\n                        <Badge visible={badge} size={isV3 ? 6 : 8} />\n                      ) : (\n                        <Badge visible={badge != null} size={16}>\n                          {badge}\n                        </Badge>\n                      )}\n                    </View>\n                  </Animated.View>\n                  {labeled ? (\n                    <Animated.View\n                      style={[\n                        styles.labelContainer,\n                        !isV3 && { transform: [{ scale }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[\n                          styles.labelWrapper,\n                          (!isV3 || isV3Shifting) && {\n                            opacity: activeOpacity,\n                          },\n                        ]}\n                      >\n                        {renderLabel ? (\n                          renderLabel({\n                            route,\n                            focused: true,\n                            color: activeLabelColor,\n                          })\n                        ) : (\n                          <Text\n                            maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                            variant=\"labelMedium\"\n                            style={[\n                              styles.label,\n                              {\n                                color: activeLabelColor,\n                                ...font,\n                              },\n                            ]}\n                          >\n                            {getLabelText({ route })}\n                          </Text>\n                        )}\n                      </Animated.View>\n                      {shifting ? null : (\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: inactiveOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: false,\n                              color: inactiveLabelColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              variant=\"labelMedium\"\n                              selectable={false}\n                              style={[\n                                styles.label,\n                                {\n                                  color: inactiveLabelColor,\n                                  ...font,\n                                },\n                              ]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                      )}\n                    </Animated.View>\n                  ) : (\n                    !isV3 && <View style={styles.labelContainer} />\n                  )}\n                </View>\n              ),\n            });\n          })}\n        </View>\n      </Animated.View>\n    </Surface>\n  );\n};\n\nBottomNavigationBar.displayName = 'BottomNavigation.Bar';\n\nexport default BottomNavigationBar;\n\nconst styles = StyleSheet.create({\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  v3Item: {\n    paddingVertical: 0,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  v3IconContainer: {\n    height: 32,\n    width: 32,\n    marginBottom: 4,\n    marginTop: 0,\n    justifyContent: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  v3IconWrapper: {\n    top: 4,\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n  },\n  v3TouchableContainer: {\n    paddingTop: 12,\n    paddingBottom: 16,\n  },\n  v3NoLabelContainer: {\n    height: 80,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  outline: {\n    width: OUTLINE_WIDTH,\n    height: OUTLINE_WIDTH / 2,\n    borderRadius: OUTLINE_WIDTH / 4,\n    alignSelf: 'center',\n  },\n  elevation: {\n    elevation: 4,\n  },\n});\n","import React from 'react';\nimport { Animated, Platform, View, ViewProps } from 'react-native';\n\ninterface Props extends ViewProps {\n  visibility?: 0 | 1 | Animated.AnimatedInterpolation<number>;\n  index: number;\n}\n\nclass BottomNavigationRouteScreen extends React.Component<Props> {\n  render(): JSX.Element {\n    const { style, index, children, visibility, ...rest } = this.props;\n\n    // On Web, the unfocused tab screens can still be clicked since they are transparent, but still there\n    // Hiding them with `display: none` makes sure that they won't receive clicks\n    // We only set it on Web since on native, react-native-pager-view's breaks due to layout changing\n    const display =\n      Platform.OS === 'web' ? (visibility === 0 ? 'none' : 'flex') : undefined;\n\n    return (\n      <View\n        testID={`RouteScreen: ${index}`}\n        style={[style, { display }]}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n}\n\nexport default Animated.createAnimatedComponent(BottomNavigationRouteScreen);\n","import color from 'color';\nimport type { InternalTheme } from 'src/types';\n\nimport type { black, white } from '../../styles/themes/v2/colors';\n\ntype BaseProps = {\n  defaultColor: typeof black | typeof white;\n  theme: InternalTheme;\n};\n\nexport const getActiveTintColor = ({\n  activeColor,\n  defaultColor,\n  theme,\n}: BaseProps & {\n  activeColor: string | undefined;\n}) => {\n  if (typeof activeColor === 'string') {\n    return activeColor;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.onSecondaryContainer;\n  }\n\n  return defaultColor;\n};\n\nexport const getInactiveTintColor = ({\n  inactiveColor,\n  defaultColor,\n  theme,\n}: BaseProps & {\n  inactiveColor: string | undefined;\n}) => {\n  if (typeof inactiveColor === 'string') {\n    return inactiveColor;\n  }\n\n  if (theme.isV3) {\n    return theme.colors.onSurfaceVariant;\n  }\n\n  return color(defaultColor).alpha(0.5).rgb().string();\n};\n\nexport const getLabelColor = ({\n  tintColor,\n  hasColor,\n  focused,\n  defaultColor,\n  theme,\n}: BaseProps & {\n  tintColor: string;\n  hasColor: boolean;\n  focused: boolean;\n}) => {\n  if (hasColor) {\n    return tintColor;\n  }\n\n  if (theme.isV3) {\n    if (focused) {\n      return theme.colors.onSurface;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  return defaultColor;\n};\n","import * as React from 'react';\nimport {\n  AccessibilityRole,\n  Animated,\n  ColorValue,\n  GestureResponderEvent,\n  Platform,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { ButtonMode, getButtonColors } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $Omit, ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport { splitStyles } from '../../utils/splitStyles';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline, used for the lowest priority actions, especially when presenting multiple options.\n   * - `outlined` - button with an outline without background, typically used for important, but not primary action – represents medium emphasis.\n   * - `contained` - button with a background color, used for important action, have the most visual impact and high emphasis.\n   * - `elevated` - button with a background color and elevation, used when absolutely necessary e.g. button requires visual separation from a patterned background. @supported Available in v5.x with theme version 3\n   * - `contained-tonal` - button with a secondary background color, an alternative middle ground between contained and outlined buttons. @supported Available in v5.x with theme version 3\n   */\n  mode?: 'text' | 'outlined' | 'contained' | 'elevated' | 'contained-tonal';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for:\n   *  * `contained` mode for theme version 2\n   *  * `contained`, `contained-tonal` and `elevated` modes for theme version 3.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * @deprecated Deprecated in v5.x - use `buttonColor` or `textColor` instead.\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Custom button's background color.\n   */\n  buttonColor?: string;\n  /**\n   * Custom button's text color.\n   */\n  textColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/pressable#rippleconfig\n   */\n  background?: PressableAndroidRippleConfig;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Accessibility role for the button. The \"button\" role is set by default.\n   */\n  accessibilityRole?: AccessibilityRole;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a text font can reach.\n   */\n  maxFontSizeMultiplier?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Reference for the touchable\n   */\n  touchableRef?: React.RefObject<View>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = (\n  {\n    disabled,\n    compact,\n    mode = 'text',\n    dark,\n    loading,\n    icon,\n    buttonColor: customButtonColor,\n    textColor: customTextColor,\n    rippleColor: customRippleColor,\n    children,\n    accessibilityLabel,\n    accessibilityHint,\n    accessibilityRole = 'button',\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    delayLongPress,\n    style,\n    theme: themeOverrides,\n    uppercase: uppercaseProp,\n    contentStyle,\n    labelStyle,\n    testID = 'button',\n    accessible,\n    background,\n    maxFontSizeMultiplier,\n    touchableRef,\n    ...rest\n  }: Props,\n  ref: React.ForwardedRef<View>\n) => {\n  const theme = useInternalTheme(themeOverrides);\n  const isMode = React.useCallback(\n    (modeToCompare: ButtonMode) => {\n      return mode === modeToCompare;\n    },\n    [mode]\n  );\n  const { roundness, isV3, animation } = theme;\n  const uppercase = uppercaseProp ?? !theme.isV3;\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n  });\n\n  const isElevationEntitled =\n    !disabled && (isV3 ? isMode('elevated') : isMode('contained'));\n  const initialElevation = isV3 ? 1 : 2;\n  const activeElevation = isV3 ? 2 : 8;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isElevationEntitled ? initialElevation : 0)\n  );\n\n  React.useEffect(() => {\n    elevation.setValue(isElevationEntitled ? initialElevation : 0);\n  }, [isElevationEntitled, elevation, initialElevation]);\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    onPressIn?.(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: activeElevation,\n        duration: 200 * scale,\n        useNativeDriver:\n          Platform.OS === 'web' ||\n          Platform.constants.reactNativeVersion.minor <= 72,\n      }).start();\n    }\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    onPressOut?.(e);\n    if (isV3 ? isMode('elevated') : isMode('contained')) {\n      const { scale } = animation;\n      Animated.timing(elevation, {\n        toValue: initialElevation,\n        duration: 150 * scale,\n        useNativeDriver:\n          Platform.OS === 'web' ||\n          Platform.constants.reactNativeVersion.minor <= 72,\n      }).start();\n    }\n  };\n\n  const flattenedStyles = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const [, borderRadiusStyles] = splitStyles(\n    flattenedStyles,\n    (style) => style.startsWith('border') && style.endsWith('Radius')\n  );\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const iconSize = isV3 ? 18 : 16;\n\n  const { backgroundColor, borderColor, textColor, borderWidth } =\n    getButtonColors({\n      customButtonColor,\n      customTextColor,\n      theme,\n      mode,\n      disabled,\n      dark,\n    });\n\n  const rippleColor =\n    customRippleColor || color(textColor).alpha(0.12).rgb().string();\n\n  const touchableStyle = {\n    ...borderRadiusStyles,\n    borderRadius: borderRadiusStyles.borderRadius ?? borderRadius,\n  };\n\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    ...touchableStyle,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  const textStyle = {\n    color: textColor,\n    ...font,\n  };\n\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? [\n          styles.iconReverse,\n          isV3 && styles[`md3IconReverse${compact ? 'Compact' : ''}`],\n          isV3 &&\n            isMode('text') &&\n            styles[`md3IconReverseTextMode${compact ? 'Compact' : ''}`],\n        ]\n      : [\n          styles.icon,\n          isV3 && styles[`md3Icon${compact ? 'Compact' : ''}`],\n          isV3 &&\n            isMode('text') &&\n            styles[`md3IconTextMode${compact ? 'Compact' : ''}`],\n        ];\n\n  return (\n    <Surface\n      {...rest}\n      ref={ref}\n      testID={`${testID}-container`}\n      style={\n        [\n          styles.button,\n          compact && styles.compact,\n          buttonStyle,\n          style,\n          !isV3 && !disabled && { elevation },\n        ] as ViewStyle\n      }\n      {...(isV3 && { elevation: elevation })}\n    >\n      <TouchableRipple\n        borderless\n        background={background}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={hasPassedTouchHandler ? handlePressIn : undefined}\n        onPressOut={hasPassedTouchHandler ? handlePressOut : undefined}\n        delayLongPress={delayLongPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        accessibilityRole={accessibilityRole}\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n        theme={theme}\n        ref={touchableRef}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle} testID={`${testID}-icon-container`}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? iconSize}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? iconSize}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            testID={`${testID}-text`}\n            style={[\n              styles.label,\n              !isV3 && styles.md2Label,\n              isV3 &&\n                (isMode('text')\n                  ? icon || loading\n                    ? styles.md3LabelTextAddons\n                    : styles.md3LabelText\n                  : styles.md3Label),\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              labelStyle,\n            ]}\n            maxFontSizeMultiplier={maxFontSizeMultiplier}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  /* eslint-disable react-native/no-unused-styles */\n  md3Icon: {\n    marginLeft: 16,\n    marginRight: -16,\n  },\n  md3IconCompact: {\n    marginLeft: 8,\n    marginRight: 0,\n  },\n  md3IconReverse: {\n    marginLeft: -16,\n    marginRight: 16,\n  },\n  md3IconReverseCompact: {\n    marginLeft: 0,\n    marginRight: 8,\n  },\n  md3IconTextMode: {\n    marginLeft: 12,\n    marginRight: -8,\n  },\n  md3IconTextModeCompact: {\n    marginLeft: 6,\n    marginRight: 0,\n  },\n  md3IconReverseTextMode: {\n    marginLeft: -8,\n    marginRight: 12,\n  },\n  md3IconReverseTextModeCompact: {\n    marginLeft: 0,\n    marginRight: 6,\n  },\n  /* eslint-enable react-native/no-unused-styles */\n  label: {\n    textAlign: 'center',\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  md2Label: {\n    letterSpacing: 1,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  md3Label: {\n    marginVertical: 10,\n    marginHorizontal: 24,\n  },\n  md3LabelText: {\n    marginHorizontal: 12,\n  },\n  md3LabelTextAddons: {\n    marginHorizontal: 16,\n  },\n});\n\nexport default forwardRef(Button);\n","import { StyleSheet } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: InternalTheme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: InternalTheme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n","import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  Pressable,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport useLatestCallback from 'use-latest-callback';\n\nimport CardActions from './CardActions';\nimport CardContent from './CardContent';\nimport CardCover from './CardCover';\nimport CardTitle from './CardTitle';\nimport { getCardColors } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { $Omit, ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport hasTouchHandler from '../../utils/hasTouchHandler';\nimport { splitStyles } from '../../utils/splitStyles';\nimport Surface from '../Surface';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype ContainedCardProps = {\n  mode?: 'contained';\n  elevation?: never;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Mode = 'elevated' | 'outlined' | 'contained';\n\nexport type Props = $Omit<React.ComponentProps<typeof Surface>, 'mode'> & {\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `contained` - Card without outline and elevation @supported Available in v5.x with theme version 3\n   * - `outlined` - Card with an outline.\n   */\n  mode?: Mode;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touchable element is pressed and invoked even before onPress.\n   */\n  onPressIn?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute as soon as the touch is released even before onPress.\n   */\n  onPressOut?: (e: GestureResponderEvent) => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * If true, disable all interactions for this component.\n   */\n  disabled?: boolean;\n  /**\n   * Changes Card shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Style of card's inner content.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Text } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Text variant=\"titleLarge\">Card title</Text>\n *       <Text variant=\"bodyMedium\">Card content</Text>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardComponent = (\n  {\n    elevation: cardElevation = 1,\n    delayLongPress,\n    onPress,\n    onLongPress,\n    onPressOut,\n    onPressIn,\n    mode: cardMode = 'elevated',\n    children,\n    style,\n    contentStyle,\n    theme: themeOverrides,\n    testID = 'card',\n    accessible,\n    disabled,\n    ...rest\n  }: (OutlinedCardProps | ElevatedCardProps | ContainedCardProps) & Props,\n  ref: React.ForwardedRef<View>\n) => {\n  const theme = useInternalTheme(themeOverrides);\n  const isMode = React.useCallback(\n    (modeToCompare: Mode) => {\n      return cardMode === modeToCompare;\n    },\n    [cardMode]\n  );\n\n  const hasPassedTouchHandler = hasTouchHandler({\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n  });\n\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness, isV3 } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? (isV3 ? 2 : 8) : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    }\n  };\n\n  const handlePressIn = useLatestCallback((e: GestureResponderEvent) => {\n    onPressIn?.(e);\n    runElevationAnimation('in');\n  });\n\n  const handlePressOut = useLatestCallback((e: GestureResponderEvent) => {\n    onPressOut?.(e);\n    runElevationAnimation('out');\n  });\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  const { backgroundColor, borderColor: themedBorderColor } = getCardColors({\n    theme,\n    mode: cardMode,\n  });\n\n  const flattenedStyles = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const { borderColor = themedBorderColor } = flattenedStyles;\n\n  const [, borderRadiusStyles] = splitStyles(\n    flattenedStyles,\n    (style) => style.startsWith('border') && style.endsWith('Radius')\n  );\n\n  const borderRadiusCombinedStyles = {\n    borderRadius: (isV3 ? 3 : 1) * roundness,\n    ...borderRadiusStyles,\n  };\n\n  const content = (\n    <View style={[styles.innerContainer, contentStyle]} testID={testID}>\n      {React.Children.map(children, (child, index) =>\n        React.isValidElement(child)\n          ? React.cloneElement(child as React.ReactElement<any>, {\n              index,\n              total,\n              siblings,\n              borderRadiusStyles,\n            })\n          : child\n      )}\n    </View>\n  );\n\n  return (\n    <Surface\n      ref={ref}\n      style={[\n        isV3 && !isMode('elevated') && { backgroundColor },\n        !isV3 && isMode('outlined')\n          ? styles.resetElevation\n          : {\n              elevation: computedElevation as unknown as number,\n            },\n        borderRadiusCombinedStyles,\n        style,\n      ]}\n      theme={theme}\n      {...(isV3 && {\n        elevation: isMode('elevated') ? computedElevation : 0,\n      })}\n      testID={`${testID}-container`}\n      {...rest}\n    >\n      {isMode('outlined') && (\n        <View\n          pointerEvents=\"none\"\n          testID={`${testID}-outline`}\n          style={[\n            {\n              borderColor,\n            },\n            styles.outline,\n            borderRadiusCombinedStyles,\n          ]}\n        />\n      )}\n\n      {hasPassedTouchHandler ? (\n        <Pressable\n          accessible={accessible}\n          unstable_pressDelay={0}\n          disabled={disabled}\n          delayLongPress={delayLongPress}\n          onLongPress={onLongPress}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n        >\n          {content}\n        </Pressable>\n      ) : (\n        content\n      )}\n    </Surface>\n  );\n};\n\nconst Component = forwardRef(CardComponent);\nComponent.displayName = 'Card';\n\nconst Card = Component as typeof Component & {\n  Content: typeof CardContent;\n  Actions: typeof CardActions;\n  Cover: typeof CardCover;\n  Title: typeof CardTitle;\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexShrink: 1,\n  },\n  outline: {\n    borderWidth: 1,\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    zIndex: 2,\n  },\n  resetElevation: {\n    elevation: 0,\n  },\n});\n\nexport default Card;\n","import * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport type { ThemeProp } from 'src/types';\n\nimport { useInternalTheme } from '../../core/theming';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `CardActions`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme?: ThemeProp;\n};\n\n/**\n * A component to show a list of actions inside a Card.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardActions = (props: Props) => {\n  const { isV3 } = useInternalTheme(props.theme);\n  const justifyContent = isV3 ? 'flex-end' : 'flex-start';\n\n  return (\n    <View\n      {...props}\n      style={[styles.container, props.style, { justifyContent }]}\n    >\n      {React.Children.map(props.children, (child, i) => {\n        return React.isValidElement(child)\n          ? React.cloneElement(child as React.ReactElement<any>, {\n              compact: !isV3 && child.props.compact !== false,\n              mode:\n                child.props.mode ||\n                (isV3 && (i === 0 ? 'outlined' : 'contained')),\n              style: [isV3 && styles.button, child.props.style],\n            })\n          : child;\n      })}\n    </View>\n  );\n};\n\nCardActions.displayName = 'Card.Actions';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  button: {\n    marginLeft: 8,\n  },\n});\n\nexport default CardActions;\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `Card.Content`.\n   */\n  children: React.ReactNode;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  /**\n   * @internal\n   */\n  siblings?: Array<string>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show content inside a Card.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Content>\n *       <Text variant=\"titleLarge\">Card title</Text>\n *       <Text variant=\"bodyMedium\">Card content</Text>\n *     </Card.Content>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardContent = ({ index, total, siblings, style, ...rest }: Props) => {\n  const cover = 'withInternalTheme(CardCover)';\n  const title = 'withInternalTheme(CardTitle)';\n\n  let contentStyle, prev, next;\n\n  if (typeof index === 'number' && siblings) {\n    prev = siblings[index - 1];\n    next = siblings[index + 1];\n  }\n\n  if (\n    (prev === cover && next === cover) ||\n    (prev === title && next === title) ||\n    total === 1\n  ) {\n    contentStyle = styles.only;\n  } else if (index === 0) {\n    if (next === cover || next === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.first;\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    if (prev === cover || prev === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.last;\n    }\n  } else if (prev === cover || prev === title) {\n    contentStyle = styles.first;\n  } else if (next === cover || next === title) {\n    contentStyle = styles.last;\n  }\n\n  return <View {...rest} style={[styles.container, contentStyle, style]} />;\n};\n\nCardContent.displayName = 'Card.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  first: {\n    paddingTop: 16,\n  },\n  last: {\n    paddingBottom: 16,\n  },\n  only: {\n    paddingVertical: 16,\n  },\n});\n\nexport default CardContent;\n","import * as React from 'react';\nimport { Image, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { getCardCoverStyle } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { grey200 } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport { splitStyles } from '../../utils/splitStyles';\n\nexport type Props = React.ComponentPropsWithRef<typeof Image> & {\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * A component to show a cover image inside a Card.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Image props https://reactnative.dev/docs/image#props\n */\nconst CardCover = ({\n  index,\n  total,\n  style,\n  theme: themeOverrides,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  const flattenedStyles = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const [, borderRadiusStyles] = splitStyles(\n    flattenedStyles,\n    (style) => style.startsWith('border') && style.endsWith('Radius')\n  );\n\n  const coverStyle = getCardCoverStyle({\n    theme,\n    index,\n    total,\n    borderRadiusStyles,\n  });\n\n  return (\n    <View style={[styles.container, coverStyle, style]}>\n      <Image\n        {...rest}\n        style={[styles.image, coverStyle]}\n        accessibilityIgnoresInvertColors\n      />\n    </View>\n  );\n};\n\nCardCover.displayName = 'Card.Cover';\nconst styles = StyleSheet.create({\n  container: {\n    height: 195,\n    backgroundColor: grey200,\n    overflow: 'hidden',\n  },\n  image: {\n    flex: 1,\n    height: undefined,\n    width: undefined,\n    padding: 16,\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default CardCover;\n\n// @component-docs ignore-next-line\nexport { CardCover };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { MD3TypescaleKey, ThemeProp } from '../../types';\nimport Text from '../Typography/Text';\nimport Caption from '../Typography/v2/Caption';\nimport Title from '../Typography/v2/Title';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Text for the title. Note that this will only accept a string or `<Text>`-based node.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the title.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Title text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  titleVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * Text for the subtitle. Note that this will only accept a string or `<Text>`-based node.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the subtitle.\n   */\n  subtitleNumberOfLines?: number;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Subtitle text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  subtitleVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the left element wrapper.\n   */\n  leftStyle?: StyleProp<ViewStyle>;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the right element wrapper.\n   */\n  rightStyle?: StyleProp<ViewStyle>;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  /**\n   * Specifies the largest possible scale a title font can reach.\n   */\n  titleMaxFontSizeMultiplier?: number;\n  /**\n   * Specifies the largest possible scale a subtitle font can reach.\n   */\n  subtitleMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\nconst LEFT_SIZE = 40;\n\n/**\n * A component to show a title, subtitle and an avatar inside a Card.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Card, IconButton } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card.Title\n *     title=\"Card Title\"\n *     subtitle=\"Card Subtitle\"\n *     left={(props) => <Avatar.Icon {...props} icon=\"folder\" />}\n *     right={(props) => <IconButton {...props} icon=\"dots-vertical\" onPress={() => {}} />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardTitle = ({\n  title,\n  titleStyle,\n  titleNumberOfLines = 1,\n  titleVariant = 'bodyLarge',\n  titleMaxFontSizeMultiplier,\n  subtitle,\n  subtitleStyle,\n  subtitleNumberOfLines = 1,\n  subtitleVariant = 'bodyMedium',\n  subtitleMaxFontSizeMultiplier,\n  left,\n  leftStyle,\n  right,\n  rightStyle,\n  style,\n  theme: themeOverrides,\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const TitleComponent = theme.isV3 ? Text : Title;\n  const SubtitleComponent = theme.isV3 ? Text : Caption;\n\n  const minHeight = subtitle || left || right ? 72 : 50;\n  const marginBottom = subtitle ? 0 : 2;\n\n  return (\n    <View style={[styles.container, { minHeight }, style]}>\n      {left ? (\n        <View style={[styles.left, leftStyle]}>\n          {left({\n            size: LEFT_SIZE,\n          })}\n        </View>\n      ) : null}\n\n      <View style={[styles.titles]}>\n        {title && (\n          <TitleComponent\n            style={[styles.title, { marginBottom }, titleStyle]}\n            numberOfLines={titleNumberOfLines}\n            variant={titleVariant}\n            maxFontSizeMultiplier={titleMaxFontSizeMultiplier}\n          >\n            {title}\n          </TitleComponent>\n        )}\n        {subtitle && (\n          <SubtitleComponent\n            style={[styles.subtitle, subtitleStyle]}\n            numberOfLines={subtitleNumberOfLines}\n            variant={subtitleVariant}\n            maxFontSizeMultiplier={subtitleMaxFontSizeMultiplier}\n          >\n            {subtitle}\n          </SubtitleComponent>\n        )}\n      </View>\n      <View style={rightStyle}>{right ? right({ size: 24 }) : null}</View>\n    </View>\n  );\n};\n\nCardTitle.displayName = 'Card.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingLeft: 16,\n  },\n\n  left: {\n    justifyContent: 'center',\n    marginRight: 16,\n    height: LEFT_SIZE,\n    width: LEFT_SIZE,\n  },\n\n  titles: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  title: {\n    minHeight: 30,\n    paddingRight: 16,\n  },\n\n  subtitle: {\n    minHeight: 20,\n    marginVertical: 0,\n    paddingRight: 16,\n  },\n});\n\nexport default CardTitle;\n\n// @component-docs ignore-next-line\nexport { CardTitle };\n","import type { ViewStyle } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\ntype BorderRadiusStyles = Pick<\n  ViewStyle,\n  Extract<keyof ViewStyle, `border${string}Radius`>\n>;\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n  borderRadiusStyles,\n}: {\n  theme: InternalTheme;\n  borderRadiusStyles: BorderRadiusStyles;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (Object.keys(borderRadiusStyles).length > 0) {\n    return {\n      borderRadius: 3 * roundness,\n      ...borderRadiusStyles,\n    };\n  }\n\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness,\n    };\n  }\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: InternalTheme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: InternalTheme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"],"names":["AssetRegistry","module","exports","registerAsset","__packager_asset","scales","name","type","hash","httpServerLocation","height","width","React","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","require","_reactNative","_theming","_jsxRuntime","_excluded","WeakMap","styles","StyleSheet","create","container","justifyContent","alignItems","layer","assign","absoluteFillObject","_ref","_theme$colors","_ref$animating","animating","indicatorColor","color","_ref$hidesWhenStopped","hidesWhenStopped","_ref$size","size","indicatorSize","style","themeOverrides","theme","rest","_objectWithoutProperties2","useInternalTheme","timer","useRef","Animated","Value","current","fade","rotation","undefined","scale","animation","startRotation","useCallback","timing","duration","toValue","isInteraction","useNativeDriver","start","setValue","loop","stopRotation","stop","useEffect","easing","Easing","linear","Platform","OS","colors","primary","frames","bezier","containerStyle","overflow","jsx","View","accessible","accessibilityRole","accessibilityState","busy","children","opacity","collapsable","map","index","inputRange","Array","from","_","frameIndex","outputRange","progress","layerStyle","transform","rotate","interpolate","viewportStyle","translateY","offsetStyle","top","lineStyle","borderColor","borderWidth","borderRadius","_color","_interopRequireDefault","_AppbarContent","_utils","_Surface","_excluded2","Appbar","dark","_ref$mode","mode","elevated","safeAreaInsets","isV3","_ref2","flatten","customBackground","backgroundColor","_ref2$elevation","elevation","restStyle","getAppbarBackgroundColor","isMode","modeToCompare","isDark","isLight","isV3CenterAlignedMode","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","hasAppbarContent","leftItemsCount","rightItemsCount","Children","forEach","child","isValidElement","AppbarContent","filterAppbarActions","isLeading","arguments","length","toArray","filter","props","spacingStyle","v3Spacing","spacing","insets","paddingBottom","bottom","paddingTop","paddingLeft","left","paddingRight","right","jsxs","appbar","modeAppbarHeight","DEFAULT_APPBAR_HEIGHT","renderAppbarContent","columnContainer","centerAlignedContainer","controlsRow","renderOnly","rightActionControls","renderExcept","flexDirection","paddingHorizontal","flex","_colors","_forwardRef","_IconButton","AppbarAction","forwardRef","ref","iconColor","icon","disabled","onPress","accessibilityLabel","rippleColor","actionIconColor","onSurface","onSurfaceVariant","black","alpha","rgb","string","animated","displayName","_AppbarAction","_AppbarBackIcon","AppbarBackAction","_ref$accessibilityLab","AppbarBackIcon","_MaterialCommunityIcon","iosIconSize","wrapper","scaleX","I18nManager","getConstants","isRTL","Image","source","tintColor","accessibilityIgnoresInvertColors","direction","resizeMode","_Text","titleColor","subtitle","subtitleStyle","titleRef","titleStyle","title","titleMaxFontSizeMultiplier","_ref$testID","testID","titleTextColor","white","subtitleColor","modeContainerStyles","small","v3DefaultContainer","medium","v3MediumContainer","large","v3LargeContainer","variant","modeTextVariant","contentWrapperProps","pointerEvents","content","Fragment","fonts","regular","numberOfLines","accessibilityTraits","maxFontSizeMultiplier","Pressable","touchableRole","accessibilityComponentType","fontSize","iosTouchableRole","select","ios","_reactNativeSafeAreaContext","_Appbar","_shadow","AppbarHeader","statusBarHeight","_ref$elevated","_ref2$height","_ref2$zIndex","zIndex","getAppbarBorders","_useSafeAreaInsets","useSafeAreaInsets","Math","max","shadow","_AppbarBackAction","_AppbarHeader","AppbarComponent","Content","Action","BackAction","Header","_react","_overlay","borderStyleProperties","getAppbarColor","isDarkTheme","isAdaptiveMode","level2","surface","overlay","borders","property","value","_ref2$shouldCenterCon","_ref2$mode","includes","v2Spacing","centerAlignedContent","cloneElement","marginLeft","_AvatarIcon","_AvatarImage","_AvatarText","_getContrastingColor","_Icon","Avatar","_rest$color","_ref2$backgroundColor","textColor","getContrastingColor","AvatarImage","onError","onLayout","onLoad","onLoadEnd","onLoadStart","onProgress","AvatarText","label","labelStyle","customColor","fontScale","useWindowDimensions","text","lineHeight","textAlign","textAlignVertical","_ref$visible","visible","isFirstRendering","error","notification","Text","minWidth","alignSelf","_useLatestCallback","_Button","maxWidth","absolute","position","marginHorizontal","marginTop","marginBottom","margin","message","actions","button","transparent","_ref$actions","contentStyle","_ref$elevation","_ref$onShowAnimationF","onShowAnimationFinished","_ref$onHideAnimationF","onHideAnimationFinished","_React$useState","useState","measured","_React$useState2","_slicedToArray2","layout","setLayout","showCallback","useLatestCallback","hideCallback","multiply","add","nativeEvent","accessibilityLiveRegion","_ref3","others","compact","_BottomNavigationBar","_BottomNavigationRouteScreen","_useAnimatedValueArray","FAR_FAR_AWAY","SceneComponent","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","getLabelText","getBadge","getColor","getAccessibilityLabel","getTestID","activeColor","inactiveColor","_ref2$keyboardHidesNa","keyboardHidesNavigationBar","barStyle","_ref2$labeled","labeled","activeIndicatorStyle","_ref2$sceneAnimationE","sceneAnimationEnabled","_ref2$sceneAnimationT","sceneAnimationType","sceneAnimationEasing","onTabPress","onTabLongPress","onIndexChange","shiftingProp","shifting","_ref2$labelMaxFontSiz","labelMaxFontSizeMultiplier","compactProp","_ref2$testID","_ref2$getLazy","getLazy","route","lazy","routes","console","warn","focusedKey","key","tabsPositionAnims","useAnimatedValueArray","offsetsAnims","loaded","setLoaded","concat","_toConsumableArray2","animateToIndex","parallel","_ref4","finished","offset","prevNavigationState","_prevNavigationState$","handleTabPress","event","defaultPrevented","findIndex","jumpTo","background","_prevNavigationState$2","focused","previouslyFocused","countAlphaOffscreen","renderToHardwareTextureAndroid","offsetTarget","accessibilityElementsHidden","importantForAccessibility","visibility","absoluteFill","removeClippedSubviews","needsOffscreenAlphaCompositing","translateX","animationEasing","SceneMap","scenes","_ref5","Bar","BottomNavigationBar","_useAnimatedValue","_useIsKeyboardShown","_useLayout3","_Badge","_TouchableRipple","MIN_RIPPLE_SCALE","Touchable","borderless","centered","TouchableRipple","supported","_safeAreaInsets$left","_safeAreaInsets$right","_safeAreaInsets$botto","_ref2$renderTouchable","_ref2$getLabelText","_ref2$getBadge","badge","_ref2$getColor","_ref2$getAccessibilit","_ref6","_ref2$getTestID","_ref7","visibleAnim","useAnimatedValue","tabsAnims","indexAnim","rippleAnim","_useLayout","useLayout","_useLayout2","keyboardVisible","setKeyboardVisible","handleKeyboardShow","handleKeyboardHide","tab","useIsKeyboardShown","onShow","onHide","eventForIndex","preventDefault","_ref8","_ref8$elevation","approxBackgroundColor","v2BackgroundColorInterpolation","activeTintColor","getActiveTintColor","defaultColor","inactiveTintColor","getInactiveTintColor","touchColor","maxTabBarWidth","rippleSize","bar","barContent","items","ripple","min","active","activeOpacity","inactiveOpacity","v3ActiveOpacity","v3InactiveOpacity","outlineScale","activeLabelColor","getLabelColor","hasColor","Boolean","inactiveLabelColor","badgeStyle","String","isV3Shifting","font","labelMedium","onLongPress","selected","item","v3Item","v3TouchableContainer","v3NoLabelContainer","iconContainer","v3IconContainer","outline","secondaryContainer","iconWrapper","v3IconWrapper","focusedIcon","unfocusedIcon","badgeContainer","labelContainer","labelWrapper","selectable","paddingVertical","whiteSpace","OUTLINE_WIDTH","_callSuper","o","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","prototype","valueOf","BottomNavigationRouteScreen","_React$Component","_classCallCheck2","_inherits2","_createClass2","_this$props","this","display","Component","createAnimatedComponent","onSecondaryContainer","_hasTouchHandler","_splitStyles3","_ActivityIndicator","borderStyle","marginRight","iconReverse","md3Icon","md3IconCompact","md3IconReverse","md3IconReverseCompact","md3IconTextMode","md3IconTextModeCompact","md3IconReverseTextMode","md3IconReverseTextModeCompact","marginVertical","md2Label","letterSpacing","compactLabel","uppercaseLabel","textTransform","md3Label","md3LabelText","md3LabelTextAddons","_borderRadiusStyles$b","_StyleSheet$flatten","loading","customButtonColor","buttonColor","customTextColor","customRippleColor","accessibilityHint","_ref$accessibilityRol","onPressIn","onPressOut","delayLongPress","uppercaseProp","uppercase","touchableRef","roundness","hasPassedTouchHandler","hasTouchHandler","isElevationEntitled","initialElevation","activeElevation","flattenedStyles","_splitStyles","splitStyles","startsWith","endsWith","borderRadiusStyles","iconSize","_getButtonColors","getButtonColors","touchableStyle","buttonStyle","customLabelColor","customLabelSize","labelLarge","textStyle","iconStyle","constants","reactNativeVersion","minor","surfaceDisabled","level1","getButtonBackgroundColor","onSurfaceDisabled","onPrimary","getButtonTextColor","getButtonBorderColor","hairlineWidth","getButtonBorderWidth","_CardActions","_CardContent","_CardCover","_CardTitle","cardElevation","cardMode","elevationDarkAdaptive","prevDarkRef","prevDark","animationDuration","runElevationAnimation","pressType","isPressTypeIn","handlePressIn","handlePressOut","total","count","siblings","computedElevation","_getCardColors","getCardColors","themedBorderColor","_flattenedStyles$bord","borderRadiusCombinedStyles","innerContainer","resetElevation","unstable_pressDelay","Card","CardContent","Actions","CardActions","Cover","CardCover","Title","CardTitle","flexShrink","padding","prev","next","cover","only","first","last","coverStyle","getCardCoverStyle","image","grey200","_Caption","_Title","_ref$titleNumberOfLin","titleNumberOfLines","_ref$titleVariant","titleVariant","_ref$subtitleNumberOf","subtitleNumberOfLines","_ref$subtitleVariant","subtitleVariant","subtitleMaxFontSizeMultiplier","leftStyle","rightStyle","TitleComponent","SubtitleComponent","Caption","minHeight","titles","getBorderColor","keys","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","getBackgroundColor","surfaceVariant"],"sourceRoot":""}