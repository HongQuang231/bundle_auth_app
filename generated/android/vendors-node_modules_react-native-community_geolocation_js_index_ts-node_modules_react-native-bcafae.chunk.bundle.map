{"version":3,"file":"vendors-node_modules_react-native-community_geolocation_js_index_ts-node_modules_react-native-bcafae.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/@react-native-community/geolocation/js/NativeRNCGeolocation.ts","webpack:///./node_modules/@react-native-community/geolocation/js/implementation.native.ts","webpack:///./node_modules/@react-native-community/geolocation/js/index.ts","webpack:///./node_modules/@react-native-community/geolocation/js/nativeInterface.ts","webpack:///./node_modules/@react-native-community/geolocation/js/utils.ts","webpack:///./node_modules/@react-native-community/netinfo/src/index.ts","webpack:///./node_modules/@react-native-community/netinfo/src/internal/defaultConfiguration.ts","webpack:///./node_modules/@react-native-community/netinfo/src/internal/internetReachability.ts","webpack:///./node_modules/@react-native-community/netinfo/src/internal/nativeInterface.ts","webpack:///./node_modules/@react-native-community/netinfo/src/internal/nativeModule.ts","webpack:///./node_modules/@react-native-community/netinfo/src/internal/privateTypes.ts","webpack:///./node_modules/@react-native-community/netinfo/src/internal/state.ts","webpack:///./node_modules/@react-native-community/netinfo/src/internal/types.ts","webpack:///./node_modules/react-native-image-crop-picker/index.js","webpack:///./node_modules/react-native-network-info/NetworkInfo.js"],"sourcesContent":["import type { TurboModule } from 'react-native';\nimport { TurboModuleRegistry } from 'react-native';\n\nexport type GeolocationConfiguration = {\n  skipPermissionRequests: boolean;\n  authorizationLevel?: 'always' | 'whenInUse' | 'auto';\n  locationProvider?: 'playServices' | 'android' | 'auto';\n  enableBackgroundLocationUpdates?: boolean;\n};\n\nexport type GeolocationOptions = {\n  timeout?: number;\n  maximumAge?: number;\n  enableHighAccuracy?: boolean;\n  distanceFilter?: number;\n  useSignificantChanges?: boolean;\n  interval?: number;\n  fastestInterval?: number;\n};\n\nexport type GeolocationResponse = {\n  coords: {\n    latitude: number;\n    longitude: number;\n    altitude: number | null;\n    accuracy: number;\n    altitudeAccuracy: number | null;\n    heading: number | null;\n    speed: number | null;\n  };\n  timestamp: number;\n};\n\nexport type GeolocationError = {\n  code: number;\n  message: string;\n  PERMISSION_DENIED: number;\n  POSITION_UNAVAILABLE: number;\n  TIMEOUT: number;\n};\n\nexport interface Spec extends TurboModule {\n  setConfiguration(config: {\n    skipPermissionRequests: boolean;\n    authorizationLevel?: string;\n    enableBackgroundLocationUpdates?: string;\n  }): void;\n  requestAuthorization(\n    success: () => void,\n    error: (error: GeolocationError) => void\n  ): void;\n  getCurrentPosition(\n    options: GeolocationOptions,\n    position: (position: GeolocationResponse) => void,\n    error: (error: GeolocationError) => void\n  ): void;\n  startObserving(options: GeolocationOptions): void;\n  stopObserving(): void;\n\n  // RCTEventEmitter\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n}\n\nexport default TurboModuleRegistry.getEnforcing<Spec>('RNCGeolocation');\n","/**\n * Copyright (c) React Native Community\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport type { EmitterSubscription } from 'react-native';\n\nimport GeolocationNativeInterface from './nativeInterface';\n\nimport invariant from 'invariant';\nimport { logError, warning } from './utils';\n\nimport type {\n  GeolocationOptions,\n  GeolocationConfiguration,\n  GeolocationResponse,\n  GeolocationError,\n} from './NativeRNCGeolocation';\n\nconst { RNCGeolocation, GeolocationEventEmitter } = GeolocationNativeInterface;\n\nlet subscriptions: {\n  [key: number]: [EmitterSubscription, EmitterSubscription | null];\n} = {};\nlet updatesEnabled = false;\n\n/**\n * The Geolocation API extends the web spec:\n * https://developer.mozilla.org/en-US/docs/Web/API/Geolocation\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html\n */\n\n/*\n * Sets configuration options that will be used in all location requests.\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html#setrnconfiguration\n *\n */\nexport function setRNConfiguration(config: GeolocationConfiguration) {\n  RNCGeolocation.setConfiguration({\n    ...config,\n    enableBackgroundLocationUpdates:\n      config?.enableBackgroundLocationUpdates ?? true,\n    authorizationLevel:\n      config?.authorizationLevel === 'auto'\n        ? undefined\n        : config.authorizationLevel,\n    locationProvider:\n      config?.locationProvider === 'auto' ? undefined : config.locationProvider,\n  });\n}\n\n/*\n * Requests Location permissions based on the key configured on pList.\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html#requestauthorization\n */\nexport function requestAuthorization(\n  success: () => void = () => {},\n  error: (error: GeolocationError) => void = logError\n) {\n  RNCGeolocation.requestAuthorization(success, error);\n}\n\n/*\n * Invokes the success callback once with the latest location info.\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html#getcurrentposition\n */\nexport async function getCurrentPosition(\n  success: (position: GeolocationResponse) => void,\n  error: (error: GeolocationError) => void = logError,\n  options: GeolocationOptions = {}\n) {\n  invariant(\n    typeof success === 'function',\n    'Must provide a valid geo_success callback.'\n  );\n  // Permission checks/requests are done on the native side\n  RNCGeolocation.getCurrentPosition(options, success, error);\n}\n\n/*\n * Invokes the success callback whenever the location changes.\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html#watchposition\n */\nexport function watchPosition(\n  success: (position: GeolocationResponse) => void,\n  error: (error: GeolocationError) => void = logError,\n  options: GeolocationOptions = {}\n): number {\n  if (!updatesEnabled) {\n    RNCGeolocation.startObserving(options);\n    updatesEnabled = true;\n  }\n  const watchID = Object.keys(subscriptions).length + 1000;\n  subscriptions[watchID] = [\n    GeolocationEventEmitter.addListener('geolocationDidChange', success),\n    error\n      ? GeolocationEventEmitter.addListener('geolocationError', error)\n      : null,\n  ];\n  return watchID;\n}\n\n/*\n * Unsubscribes the watcher with the given watchID.\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html#clearwatch\n */\nexport function clearWatch(watchID: number) {\n  const sub = subscriptions[watchID];\n  if (!sub) {\n    // Silently exit when the watchID is invalid or already cleared\n    // This is consistent with timers\n    return;\n  }\n\n  sub[0].remove();\n  // array element refinements not yet enabled in Flow\n  const sub1 = sub[1];\n  sub1 && sub1.remove();\n\n  delete subscriptions[watchID];\n  let noWatchers = Object.keys(subscriptions).length === 0;\n  if (noWatchers) {\n    stopObserving();\n  }\n}\n\n/*\n * Stops observing for device location changes and removes all registered listeners.\n *\n * See https://facebook.github.io/react-native/docs/geolocation.html#stopobserving\n */\nexport function stopObserving() {\n  if (updatesEnabled) {\n    RNCGeolocation.stopObserving();\n    updatesEnabled = false;\n    Object.values(subscriptions).forEach(([sub, sub1]) => {\n      warning(false, 'Called stopObserving with existing subscriptions.');\n      sub.remove();\n      sub1 && sub1.remove();\n    });\n    subscriptions = {};\n  }\n}\n","/**\n * Copyright (c) React Native Community\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as GeolocationModule from './implementation';\n\nimport type {\n  GeolocationOptions,\n  GeolocationConfiguration,\n  GeolocationResponse,\n  GeolocationError,\n} from './NativeRNCGeolocation';\n\nconst Geolocation = {\n  /**\n   * Invokes the success callback once with the latest location info.  Supported\n   * options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool)\n   * On Android, this can return almost immediately if the location is cached or\n   * request an update, which might take a while.\n   */\n  getCurrentPosition: function (\n    success: (position: GeolocationResponse) => void,\n    error?: (error: GeolocationError) => void,\n    options?: GeolocationOptions\n  ) {\n    GeolocationModule.getCurrentPosition(success, error, options);\n  },\n\n  /**\n   * Invokes the success callback whenever the location changes.  Supported\n   * options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool), distanceFilter(m)\n   */\n  watchPosition: function (\n    success: (position: GeolocationResponse) => void,\n    error?: (error: GeolocationError) => void,\n    options?: GeolocationOptions\n  ): number {\n    return GeolocationModule.watchPosition(success, error, options);\n  },\n\n  /**\n   * Clears the watch started by `watchPosition`.\n   */\n  clearWatch: function (watchID: number) {\n    GeolocationModule.clearWatch(watchID);\n  },\n\n  /**\n   * @deprecated `ReactNativeGeolocation.stopObserving` is deprecated. Use `ReactNativeGeolocation.clearWatch` instead.\n   */\n  stopObserving: function () {\n    console.warn(\n      '`ReactNativeGeolocation.stopObserving` is deprecated and should not be used. Use `ReactNativeGeolocation.clearWatch` instead.'\n    );\n    GeolocationModule.stopObserving();\n  },\n\n  requestAuthorization: function (\n    success?: () => void,\n    error?: (error: GeolocationError) => void\n  ) {\n    GeolocationModule.requestAuthorization(success, error);\n  },\n\n  setRNConfiguration: function (config: GeolocationConfiguration) {\n    GeolocationModule.setRNConfiguration(config);\n  },\n};\n\nexport type {\n  GeolocationOptions,\n  GeolocationConfiguration,\n  GeolocationResponse,\n  GeolocationError,\n};\n\nexport default Geolocation;\n","/**\n * Copyright (c) React Native Community\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport { NativeEventEmitter, NativeModules, Platform } from 'react-native';\n\nconst LINKING_ERROR =\n  `The package '@react-native-community/geolocation' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\n// @ts-expect-error\nconst isTurboModuleEnabled = global.__turboModuleProxy != null;\n\nconst RNCGeolocationModule = isTurboModuleEnabled\n  ? require('./NativeRNCGeolocation').default\n  : NativeModules.RNCGeolocation;\n\nconst RNCGeolocation = RNCGeolocationModule\n  ? RNCGeolocationModule\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\n/**\n * We export the native interface in this way to give easy shared access to it between the\n * JavaScript code and the tests\n */\nlet nativeEventEmitter: NativeEventEmitter | null = null;\n\nexport default {\n  RNCGeolocation,\n  get GeolocationEventEmitter() {\n    if (!nativeEventEmitter) {\n      nativeEventEmitter = new NativeEventEmitter(RNCGeolocation);\n    }\n    return nativeEventEmitter;\n  },\n};\n","/**\n * Copyright (c) React Native Community\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\n/**\n * Small utility that can be used as an error handler. You cannot just pass\n * `console.error` as a failure callback - it's not properly bound.  If passes an\n * `Error` object, it will print the message and stack.\n */\nexport const logError = function (...args: unknown[]) {\n  if (args.length === 1 && args[0] instanceof Error) {\n    const err = args[0];\n    console.error('Error: \"' + err.message + '\".  Stack:\\n' + err.stack);\n  } else {\n    console.error.apply(console, args);\n  }\n};\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\nexport const warning = __DEV__\n  ? function (condition: boolean, format: string, ...args: any[]) {\n      if (format === undefined) {\n        throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n            'message argument'\n        );\n      }\n      if (!condition) {\n        var argIndex = 0;\n        var message =\n          'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n        if (typeof console !== 'undefined') {\n          console.error(message);\n        }\n        try {\n          // --- Welcome to debugging React ---\n          // This error was thrown as a convenience so that you can use this stack\n          // to find the callsite that caused this warning to fire.\n          throw new Error(message);\n        } catch (x) {}\n      }\n    }\n  : () => {};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n// Track ongoing requests\nlet isRequestInProgress = false;\nlet requestQueue: ((state: Types.NetInfoState) => void)[] = [];\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n\n // If a request is already in progress, return a promise that will resolve when the current request finishes\n  if (isRequestInProgress) {\n    return new Promise((resolve) => {\n      requestQueue.push(resolve);\n    });\n  }\n\n  isRequestInProgress = true;\n\n  return _state._fetchCurrentState().then((result) => {\n    requestQueue.forEach((resolve) => resolve(result));\n    requestQueue = [];\n    return result;\n  }).finally(() => {\n    isRequestInProgress = false;\n  });\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    const unsubscribe = addEventListener(setNetInfo);\n    return () => unsubscribe();\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    if (networkInfoManager && !isRequestInProgress) {\n      isRequestInProgress = true;\n      networkInfoManager._fetchCurrentState().finally(() => {\n        isRequestInProgress = false;\n      });\n    }\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n","import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: 'https://clients3.google.com/generate_204',\n  reachabilityMethod: 'HEAD',\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 204),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: false,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION;","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as PrivateTypes from './privateTypes';\nimport * as Types from './types';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean | null): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection && this._configuration.reachabilityShouldRun()) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection or don't run reachability check, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const controller = new AbortController();\n\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      headers: this._configuration.reachabilityHeaders,\n      method: this._configuration.reachabilityMethod,\n      cache: 'no-cache',\n      signal: controller.signal,\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>((_, reject): void => {\n      timeoutHandle = setTimeout(\n        (): void => reject('timedout'),\n        this._configuration.reachabilityRequestTimeout,\n      );\n    });\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>((_, reject): void => {\n      cancel = (): void => reject('canceled');\n    });\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then(\n        (response): Promise<boolean> => {\n          return this._configuration.reachabilityTest(response);\n        },\n      )\n      .then(\n        (result): void => {\n          this._setIsInternetReachable(result);\n          const nextTimeoutInterval = this._isInternetReachable\n            ? this._configuration.reachabilityLongTimeout\n            : this._configuration.reachabilityShortTimeout;\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        },\n      )\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if ('canceled' === error) {\n            controller.abort();\n          } else {\n            if ('timedout' === error) {\n              controller.abort();\n            }\n            \n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (\n      typeof state.isInternetReachable === 'boolean' &&\n      this._configuration.useNativeReachability\n    ) {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\n\n// Produce an error if we don't have the native module\nif (!RNCNetInfo) {\n  throw new Error(`@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:\n\n• Run \\`react-native link @react-native-community/netinfo\\` in the project root.\n• Rebuild and re-run the app.\n• If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n• Check that the library was linked correctly when you used the link command by running through the manual installation instructions in the README.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo`);\n}\n\n/**\n * We export the native interface in this way to give easy shared access to it between the\n * JavaScript code and the tests\n */\nlet nativeEventEmitter: NativeEventEmitter | null = null;\nconst nativeInterface = Object.assign(RNCNetInfo, {\n  get eventEmitter(): NativeEventEmitter {\n    if (!nativeEventEmitter) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      /// @ts-ignore\n      nativeEventEmitter = new NativeEventEmitter(RNCNetInfo);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    /// @ts-ignore\n    return nativeEventEmitter;\n  },\n});\nexport default nativeInterface;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeModules} from 'react-native';\nimport {NetInfoNativeModule} from './privateTypes';\n\nconst RNCNetInfo: NetInfoNativeModule = NativeModules.RNCNetInfo;\n\nexport default RNCNetInfo;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NetInfoConfiguration, NetInfoState} from './types';\n\nexport const DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\n// Certain properties are optional when sent by the native module and are handled by the JS code\nexport type NetInfoNativeModuleState = Pick<\n  NetInfoState,\n  Exclude<keyof NetInfoState, 'isInternetReachable'>\n> & {isInternetReachable?: boolean};\n\nexport interface Events {\n  [DEVICE_CONNECTIVITY_EVENT]: NetInfoNativeModuleState;\n}\n\nexport interface NetInfoNativeModule {\n  configure: (config: Partial<NetInfoConfiguration>) => void;\n  getCurrentState: (\n    requestedInterface?: string,\n  ) => Promise<NetInfoNativeModuleState>;\n  addListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeListeners<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\nexport type NetInfoInternetReachabilityChangeListener = (\n  isInternetReachable: boolean | null | undefined,\n) => void;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\nexport default class State {\n  private _nativeEventSubscription: NativeEventSubscription | null = null;\n  private _subscriptions = new Set<Types.NetInfoChangeHandler>();\n  private _latestState: Types.NetInfoState | null = null;\n  private _internetReachability: InternetReachability;\n\n  constructor(configuration: Types.NetInfoConfiguration) {\n    // Add the listener to the internet connectivity events\n    this._internetReachability = new InternetReachability(\n      configuration,\n      this._handleInternetReachabilityUpdate,\n    );\n\n    // Add the subscription to the native events\n    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      PrivateTypes.DEVICE_CONNECTIVITY_EVENT,\n      this._handleNativeStateUpdate,\n    );\n\n    // Fetch the current state from the native module\n    this._fetchCurrentState();\n  }\n\n  private _handleNativeStateUpdate = (\n    state: PrivateTypes.NetInfoNativeModuleState,\n  ): void => {\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n\n    // Convert the state from native to JS shape\n    const convertedState = this._convertState(state);\n\n    // Update the listeners\n    this._latestState = convertedState;\n    this._subscriptions.forEach((handler): void => handler(convertedState));\n  };\n\n  private _handleInternetReachabilityUpdate = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (!this._latestState) {\n      return;\n    }\n\n    const nextState = {\n      ...this._latestState,\n      isInternetReachable,\n    } as Types.NetInfoState;\n    this._latestState = nextState;\n    this._subscriptions.forEach((handler): void => handler(nextState));\n  };\n\n  public _fetchCurrentState = async (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    const state = await NativeInterface.getCurrentState(requestedInterface);\n\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n    // Convert and store the new state\n    const convertedState = this._convertState(state);\n    if (!requestedInterface) {\n      this._latestState = convertedState;\n      this._subscriptions.forEach((handler): void => handler(convertedState));\n    }\n\n    return convertedState;\n  };\n\n  private _convertState = (\n    input: PrivateTypes.NetInfoNativeModuleState,\n  ): Types.NetInfoState => {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input as Types.NetInfoState;\n    } else {\n      return {\n        ...input,\n        isInternetReachable: this._internetReachability.currentState(),\n      } as Types.NetInfoState;\n    }\n  };\n\n  public latest = (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    if (requestedInterface) {\n      return this._fetchCurrentState(requestedInterface);\n    } else if (this._latestState) {\n      return Promise.resolve(this._latestState);\n    } else {\n      return this._fetchCurrentState();\n    }\n  };\n\n  public add = (handler: Types.NetInfoChangeHandler): void => {\n    // Add the subscription handler to our set\n    this._subscriptions.add(handler);\n\n    // Send it the latest data we have\n    if (this._latestState) {\n      handler(this._latestState);\n    } else {\n      this.latest().then(handler);\n    }\n  };\n\n  public remove = (handler: Types.NetInfoChangeHandler): void => {\n    this._subscriptions.delete(handler);\n  };\n\n  public tearDown = (): void => {\n    if (this._internetReachability) {\n      this._internetReachability.tearDown();\n    }\n\n    if (this._nativeEventSubscription) {\n      this._nativeEventSubscription.remove();\n    }\n\n    this._subscriptions.clear();\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nexport enum NetInfoStateType {\n  unknown = 'unknown',\n  none = 'none',\n  cellular = 'cellular',\n  wifi = 'wifi',\n  bluetooth = 'bluetooth',\n  ethernet = 'ethernet',\n  wimax = 'wimax',\n  vpn = 'vpn',\n  other = 'other',\n}\n\nexport type NetInfoMethodType = 'HEAD' | 'GET';\n\nexport enum NetInfoCellularGeneration {\n  '2g' = '2g',\n  '3g' = '3g',\n  '4g' = '4g',\n  '5g' = '5g',\n}\n\nexport interface NetInfoConnectedDetails {\n  isConnectionExpensive: boolean;\n}\n\ninterface NetInfoConnectedState<\n  T extends NetInfoStateType,\n  D extends Record<string, unknown> = Record<string, unknown>\n> {\n  type: T;\n  isConnected: boolean;\n  isInternetReachable: boolean | null;\n  details: D & NetInfoConnectedDetails;\n  isWifiEnabled?: boolean;\n}\n\ninterface NetInfoDisconnectedState<T extends NetInfoStateType> {\n  type: T;\n  isConnected: boolean;\n  isInternetReachable: boolean;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport interface NetInfoUnknownState {\n  type: NetInfoStateType.unknown;\n  isConnected: boolean | null;\n  isInternetReachable: null;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport type NetInfoNoConnectionState = NetInfoDisconnectedState<\n  NetInfoStateType.none\n>;\nexport type NetInfoDisconnectedStates =\n  | NetInfoUnknownState\n  | NetInfoNoConnectionState;\n\nexport type NetInfoCellularState = NetInfoConnectedState<\n  NetInfoStateType.cellular,\n  {\n    cellularGeneration: NetInfoCellularGeneration | null;\n    carrier: string | null;\n  }\n>;\nexport type NetInfoWifiState = NetInfoConnectedState<\n  NetInfoStateType.wifi,\n  {\n    ssid: string | null;\n    bssid: string | null;\n    strength: number | null;\n    ipAddress: string | null;\n    subnet: string | null;\n    frequency: number | null;\n    linkSpeed: number | null;\n    rxLinkSpeed: number | null;\n    txLinkSpeed: number | null;\n  }\n>;\nexport type NetInfoBluetoothState = NetInfoConnectedState<\n  NetInfoStateType.bluetooth\n>;\nexport type NetInfoEthernetState = NetInfoConnectedState<\n  NetInfoStateType.ethernet,\n  {\n    ipAddress: string | null;\n    subnet: string | null;\n  }\n>;\nexport type NetInfoWimaxState = NetInfoConnectedState<NetInfoStateType.wimax>;\nexport type NetInfoVpnState = NetInfoConnectedState<NetInfoStateType.vpn>;\nexport type NetInfoOtherState = NetInfoConnectedState<NetInfoStateType.other>;\nexport type NetInfoConnectedStates =\n  | NetInfoCellularState\n  | NetInfoWifiState\n  | NetInfoBluetoothState\n  | NetInfoEthernetState\n  | NetInfoWimaxState\n  | NetInfoVpnState\n  | NetInfoOtherState;\n\nexport type NetInfoState = NetInfoDisconnectedStates | NetInfoConnectedStates;\n\nexport type NetInfoChangeHandler = (state: NetInfoState) => void;\nexport type NetInfoSubscription = () => void;\n\nexport interface NetInfoConfiguration {\n  reachabilityUrl: string;\n  reachabilityMethod?: NetInfoMethodType;\n  reachabilityHeaders?: Record<string, string>;\n  reachabilityTest: (response: Response) => Promise<boolean>;\n  reachabilityLongTimeout: number;\n  reachabilityShortTimeout: number;\n  reachabilityRequestTimeout: number;\n  reachabilityShouldRun: () => boolean;\n  shouldFetchWiFiSSID: boolean;\n  useNativeReachability: boolean;\n}\n","import React from 'react';\n\nimport {NativeModules} from 'react-native';\n\nconst ImageCropPicker = NativeModules.ImageCropPicker;\n\nexport default ImageCropPicker;\nexport const openPicker = ImageCropPicker.openPicker;\nexport const openCamera = ImageCropPicker.openCamera;\nexport const openCropper = ImageCropPicker.openCropper;\nexport const clean = ImageCropPicker.clean;\nexport const cleanSingle = ImageCropPicker.cleanSingle;\n","\"use strict\";\n\nimport { NativeModules, Platform } from \"react-native\";\nconst { RNNetworkInfo } = NativeModules;\n\nconst NetworkInfo = {\n  async getSSID() {\n    return await RNNetworkInfo.getSSID();\n  },\n\n  async getBSSID() {\n    return await RNNetworkInfo.getBSSID();\n  },\n\n  async getBroadcast() {\n    return await RNNetworkInfo.getBroadcast();\n  },\n\n  async getIPAddress() {\n    return await RNNetworkInfo.getIPAddress();\n  },\n\n  async getIPV4Address() {\n    const wifiIP = await RNNetworkInfo.getWIFIIPV4Address();\n    if (wifiIP && wifiIP !== '0.0.0.0') {\n      return wifiIP;\n    }\n    \n    return await RNNetworkInfo.getIPV4Address();\n  },\n\n  async getGatewayIPAddress() {\n    return await RNNetworkInfo.getGatewayIPAddress();\n  },\n\n  async getSubnet() {\n    return await RNNetworkInfo.getSubnet();\n  },\n\n  async getFrequency() {\n    if (Platform.OS !== 'android') {\n      return null;\n    }\n    return await RNNetworkInfo.getFrequency();\n  }\n};\n\nmodule.exports = { NetworkInfo };\n"],"names":["_reactNative","require","exports","TurboModuleRegistry","getEnforcing","watchID","sub","subscriptions","remove","sub1","Object","keys","length","stopObserving","_x","_getCurrentPosition","apply","arguments","success","undefined","error","logError","RNCGeolocation","requestAuthorization","config","_config$enableBackgro","setConfiguration","assign","enableBackgroundLocationUpdates","authorizationLevel","locationProvider","options","updatesEnabled","startObserving","GeolocationEventEmitter","addListener","_nativeInterface","_interopRequireDefault","_invariant","_utils","GeolocationNativeInterface","_asyncToGenerator2","default","invariant","getCurrentPosition","values","forEach","_ref","_ref2","_slicedToArray2","warning","GeolocationModule","e","r","__esModule","t","_getRequireWildcardCache","has","get","n","__proto__","a","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","WeakMap","Geolocation","watchPosition","clearWatch","console","warn","setRNConfiguration","LINKING_ERROR","Platform","select","ios","RNCGeolocationModule","global","__turboModuleProxy","NativeModules","Proxy","Error","nativeEventEmitter","NativeEventEmitter","value","_len","args","Array","_key","err","message","stack","_react","_defaultConfiguration","_state2","Types","key","prototype","_exportNames","enumerable","_configuration","DEFAULT_CONFIGURATION","_state","createState","State","isRequestInProgress","requestQueue","configure","configuration","tearDown","OS","NativeInterface","fetch","requestedInterface","latest","refresh","Promise","resolve","push","_fetchCurrentState","then","result","finally","addEventListener","listener","add","useNetInfo","_useState","useState","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","_useState2","netInfo","setNetInfo","useEffect","unsubscribe","useNetInfoInstance","isPaused","_useState3","_useState4","networkInfoManager","setNetworkInfoManager","_useState5","_useState6","state","useCallback","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability","_createClass2","InternetReachability","_this","_classCallCheck2","_isInternetReachable","_currentInternetReachabilityCheckHandler","_currentTimeoutHandle","_setIsInternetReachable","_listener","_setExpectsConnection","expectsConnection","cancel","clearTimeout","_checkInternetReachability","timeoutHandle","controller","AbortController","responsePromise","headers","method","cache","signal","timeoutPromise","_","reject","setTimeout","cancelPromise","promise","race","nextTimeoutInterval","catch","abort","update","currentState","this","_nativeModule","RNCNetInfo","nativeInterface","eventEmitter","_internetReachability","PrivateTypes","_nativeEventSubscription","_subscriptions","Set","_latestState","_handleNativeStateUpdate","convertedState","_convertState","handler","_handleInternetReachabilityUpdate","nextState","getCurrentState","input","delete","clear","DEVICE_CONNECTIVITY_EVENT","NetInfoCellularGeneration","ImageCropPicker","openPicker","openCamera","openCropper","clean","cleanSingle","_getFrequency","_getSubnet","_getGatewayIPAddress","_getIPV4Address","_getIPAddress","_getBroadcast","_getBSSID","_getSSID","RNNetworkInfo","NetworkInfo","getSSID","getBSSID","getBroadcast","getIPAddress","getIPV4Address","wifiIP","getWIFIIPV4Address","getGatewayIPAddress","getSubnet","getFrequency","module"],"sourceRoot":""}