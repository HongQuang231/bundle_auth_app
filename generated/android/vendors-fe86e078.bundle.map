{"version":3,"file":"vendors-fe86e078.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native-webview/node_modules/escape-string-regexp/index.js","webpack:///./node_modules/react-native-webview/src/NativeRNCWebView.ts","webpack:///./node_modules/react-native-webview/src/RNCWebViewNativeComponent.ts","webpack:///./node_modules/react-native-webview/src/WebView.android.tsx","webpack:///./node_modules/react-native-webview/src/WebView.styles.ts","webpack:///./node_modules/react-native-webview/src/WebViewShared.tsx","webpack:///./node_modules/react-native-webview/src/index.ts"],"sourcesContent":["'use strict';\n\nconst matchOperatorsRegex = /[|\\\\{}()[\\]^$+*?.-]/g;\n\nmodule.exports = string => {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn string.replace(matchOperatorsRegex, '\\\\$&');\n};\n","import type { TurboModule } from 'react-native';\nimport { TurboModuleRegistry } from 'react-native';\nimport { Double } from 'react-native/Libraries/Types/CodegenTypes';\n\nexport interface Spec extends TurboModule {\n  readonly getConstants: () => {};\n\n  // your module methods go here, for example:\n  isFileUploadSupported(): Promise<boolean>;\n  shouldStartLoadWithLockIdentifier(\n    shouldStart: boolean,\n    lockIdentifier: Double\n  ): void;\n}\n\nexport default TurboModuleRegistry.getEnforcing<Spec>('RNCWebView');\n","import type { HostComponent, ViewProps } from 'react-native';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport {\n  DirectEventHandler,\n  Double,\n  Int32,\n  WithDefault,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\n\nexport type WebViewNativeEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n}>;\nexport type WebViewCustomMenuSelectionEvent = Readonly<{\n  label: string;\n  key: string;\n  selectedText: string;\n}>;\nexport type WebViewMessageEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  data: string;\n}>;\nexport type WebViewOpenWindowEvent = Readonly<{\n  targetUrl: string;\n}>;\nexport type WebViewHttpErrorEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  description: string;\n  statusCode: Int32;\n}>;\n\nexport type WebViewErrorEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  domain?: string;\n  code: Int32;\n  description: string;\n}>;\n\nexport type WebViewNativeProgressEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  progress: Double;\n}>;\n\nexport type WebViewNavigationEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  navigationType:\n    | 'click'\n    | 'formsubmit'\n    | 'backforward'\n    | 'reload'\n    | 'formresubmit'\n    | 'other';\n  mainDocumentURL?: string;\n}>;\n\nexport type ShouldStartLoadRequestEvent = Readonly<{\n  url: string;\n  loading: boolean;\n  title: string;\n  canGoBack: boolean;\n  canGoForward: boolean;\n  lockIdentifier: Double;\n  navigationType:\n    | 'click'\n    | 'formsubmit'\n    | 'backforward'\n    | 'reload'\n    | 'formresubmit'\n    | 'other';\n  mainDocumentURL?: string;\n  isTopFrame: boolean;\n}>;\n\ntype ScrollEvent = Readonly<{\n  contentInset: {\n    bottom: Double;\n    left: Double;\n    right: Double;\n    top: Double;\n  };\n  contentOffset: {\n    y: Double;\n    x: Double;\n  };\n  contentSize: {\n    height: Double;\n    width: Double;\n  };\n  layoutMeasurement: {\n    height: Double;\n    width: Double;\n  };\n  targetContentOffset?: {\n    y: Double;\n    x: Double;\n  };\n  velocity?: {\n    y: Double;\n    x: Double;\n  };\n  zoomScale?: Double;\n  responderIgnoreScroll?: boolean;\n}>;\n\ntype WebViewRenderProcessGoneEvent = Readonly<{\n  didCrash: boolean;\n}>;\n\ntype WebViewDownloadEvent = Readonly<{\n  downloadUrl: string;\n}>;\n\n// type MenuItem = Readonly<{label: string, key: string}>;\n\nexport interface NativeProps extends ViewProps {\n  // Android only\n  allowFileAccess?: boolean;\n  allowsProtectedMedia?: boolean;\n  allowsFullscreenVideo?: boolean;\n  androidLayerType?: WithDefault<'none' | 'software' | 'hardware', 'none'>;\n  cacheMode?: WithDefault<\n    | 'LOAD_DEFAULT'\n    | 'LOAD_CACHE_ELSE_NETWORK'\n    | 'LOAD_NO_CACHE'\n    | 'LOAD_CACHE_ONLY',\n    'LOAD_DEFAULT'\n  >;\n  domStorageEnabled?: boolean;\n  downloadingMessage?: string;\n  forceDarkOn?: boolean;\n  geolocationEnabled?: boolean;\n  lackPermissionToDownloadMessage?: string;\n  messagingModuleName: string;\n  minimumFontSize?: Int32;\n  mixedContentMode?: WithDefault<'never' | 'always' | 'compatibility', 'never'>;\n  nestedScrollEnabled?: boolean;\n  onContentSizeChange?: DirectEventHandler<WebViewNativeEvent>;\n  onRenderProcessGone?: DirectEventHandler<WebViewRenderProcessGoneEvent>;\n  overScrollMode?: string;\n  saveFormDataDisabled?: boolean;\n  scalesPageToFit?: boolean;\n  setBuiltInZoomControls?: boolean;\n  setDisplayZoomControls?: boolean;\n  setSupportMultipleWindows?: boolean;\n  textZoom?: Int32;\n  thirdPartyCookiesEnabled?: boolean;\n  // Workaround to watch if listener if defined\n  hasOnScroll?: boolean;\n  // !Android only\n\n  // iOS only\n  allowingReadAccessToURL?: string;\n  allowsBackForwardNavigationGestures?: boolean;\n  allowsInlineMediaPlayback?: boolean;\n  allowsAirPlayForMediaPlayback?: boolean;\n  allowsLinkPreview?: boolean;\n  automaticallyAdjustContentInsets?: boolean;\n  autoManageStatusBarEnabled?: boolean;\n  bounces?: boolean;\n  contentInset?: Readonly<{\n    top?: Double;\n    left?: Double;\n    bottom?: Double;\n    right?: Double;\n  }>;\n  contentInsetAdjustmentBehavior?: WithDefault<\n    'never' | 'automatic' | 'scrollableAxes' | 'always',\n    'never'\n  >;\n  contentMode?: WithDefault<\n    'recommended' | 'mobile' | 'desktop',\n    'recommended'\n  >;\n  dataDetectorTypes?: WithDefault<\n    ReadonlyArray<\n      | 'address'\n      | 'link'\n      | 'calendarEvent'\n      | 'trackingNumber'\n      | 'flightNumber'\n      | 'lookupSuggestion'\n      | 'phoneNumber'\n      | 'all'\n      | 'none'\n    >,\n    'phoneNumber'\n  >;\n  decelerationRate?: Double;\n  directionalLockEnabled?: boolean;\n  enableApplePay?: boolean;\n  hideKeyboardAccessoryView?: boolean;\n  keyboardDisplayRequiresUserAction?: boolean;\n  limitsNavigationsToAppBoundDomains?: boolean;\n  mediaCapturePermissionGrantType?: WithDefault<\n    | 'prompt'\n    | 'grant'\n    | 'deny'\n    | 'grantIfSameHostElsePrompt'\n    | 'grantIfSameHostElseDeny',\n    'prompt'\n  >;\n  pagingEnabled?: boolean;\n  pullToRefreshEnabled?: boolean;\n  scrollEnabled?: boolean;\n  sharedCookiesEnabled?: boolean;\n  textInteractionEnabled?: boolean;\n  useSharedProcessPool?: boolean;\n  onContentProcessDidTerminate?: DirectEventHandler<WebViewNativeEvent>;\n  onCustomMenuSelection?: DirectEventHandler<WebViewCustomMenuSelectionEvent>;\n  onFileDownload?: DirectEventHandler<WebViewDownloadEvent>;\n\n  menuItems?: ReadonlyArray<Readonly<{ label: string; key: string }>>;\n  suppressMenuItems?: Readonly<string>[];\n  // Workaround to watch if listener if defined\n  hasOnFileDownload?: boolean;\n  fraudulentWebsiteWarningEnabled?: boolean;\n  // !iOS only\n\n  allowFileAccessFromFileURLs?: boolean;\n  allowUniversalAccessFromFileURLs?: boolean;\n  applicationNameForUserAgent?: string;\n  basicAuthCredential?: Readonly<{\n    username: string;\n    password: string;\n  }>;\n  cacheEnabled?: boolean;\n  incognito?: boolean;\n  injectedJavaScript?: string;\n  injectedJavaScriptBeforeContentLoaded?: string;\n  injectedJavaScriptForMainFrameOnly?: boolean;\n  injectedJavaScriptBeforeContentLoadedForMainFrameOnly?: boolean;\n  javaScriptCanOpenWindowsAutomatically?: boolean;\n  javaScriptEnabled?: boolean;\n  webviewDebuggingEnabled?: boolean;\n  mediaPlaybackRequiresUserAction?: boolean;\n  messagingEnabled: boolean;\n  onLoadingError: DirectEventHandler<WebViewErrorEvent>;\n  onLoadingFinish: DirectEventHandler<WebViewNavigationEvent>;\n  onLoadingProgress: DirectEventHandler<WebViewNativeProgressEvent>;\n  onLoadingStart: DirectEventHandler<WebViewNavigationEvent>;\n  onHttpError: DirectEventHandler<WebViewHttpErrorEvent>;\n  onMessage: DirectEventHandler<WebViewMessageEvent>;\n  onOpenWindow?: DirectEventHandler<WebViewOpenWindowEvent>;\n  hasOnOpenWindowEvent?: boolean;\n  onScroll?: DirectEventHandler<ScrollEvent>;\n  onShouldStartLoadWithRequest: DirectEventHandler<ShouldStartLoadRequestEvent>;\n  showsHorizontalScrollIndicator?: boolean;\n  showsVerticalScrollIndicator?: boolean;\n  newSource: Readonly<{\n    uri?: string;\n    method?: string;\n    body?: string;\n\n    headers?: ReadonlyArray<Readonly<{ name: string; value: string }>>;\n    html?: string;\n    baseUrl?: string;\n  }>;\n  userAgent?: string;\n  injectedJavaScriptObject?: string;\n}\n\nexport interface NativeCommands {\n  goBack: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  goForward: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  reload: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  stopLoading: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  injectJavaScript: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    javascript: string\n  ) => void;\n  requestFocus: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  postMessage: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    data: string\n  ) => void;\n  // Android Only\n  loadUrl: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    url: string\n  ) => void;\n  clearFormData: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>\n  ) => void;\n  clearCache: (\n    viewRef: React.ElementRef<HostComponent<NativeProps>>,\n    includeDiskFiles: boolean\n  ) => void;\n  clearHistory: (viewRef: React.ElementRef<HostComponent<NativeProps>>) => void;\n  // !Android Only\n}\n\nexport const Commands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'goBack',\n    'goForward',\n    'reload',\n    'stopLoading',\n    'injectJavaScript',\n    'requestFocus',\n    'postMessage',\n    'loadUrl',\n    'clearFormData',\n    'clearCache',\n    'clearHistory',\n  ],\n});\n\nexport default codegenNativeComponent<NativeProps>(\n  'RNCWebView'\n) as HostComponent<NativeProps>;\n","import React, {\n  forwardRef,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n} from 'react';\n\nimport { Image, View, ImageSourcePropType, HostComponent } from 'react-native';\n\nimport BatchedBridge from 'react-native/Libraries/BatchedBridge/BatchedBridge';\nimport EventEmitter from 'react-native/Libraries/vendor/emitter/EventEmitter';\n\nimport invariant from 'invariant';\n\nimport RNCWebView, { Commands, NativeProps } from './RNCWebViewNativeComponent';\nimport RNCWebViewModule from './NativeRNCWebView';\nimport {\n  defaultOriginWhitelist,\n  defaultRenderError,\n  defaultRenderLoading,\n  useWebViewLogic,\n} from './WebViewShared';\nimport {\n  AndroidWebViewProps,\n  WebViewSourceUri,\n  type WebViewMessageEvent,\n  type ShouldStartLoadRequestEvent,\n} from './WebViewTypes';\n\nimport styles from './WebView.styles';\n\nconst { resolveAssetSource } = Image;\n\nconst directEventEmitter = new EventEmitter();\n\nconst registerCallableModule: (name: string, module: Object) => void =\n  // `registerCallableModule()` is available in React Native 0.74 and above.\n  // Fallback to use `BatchedBridge.registerCallableModule()` for older versions.\n\n  require('react-native').registerCallableModule ??\n  BatchedBridge.registerCallableModule.bind(BatchedBridge);\n\nregisterCallableModule('RNCWebViewMessagingModule', {\n  onShouldStartLoadWithRequest: (\n    event: ShouldStartLoadRequestEvent & { messagingModuleName?: string }\n  ) => {\n    directEventEmitter.emit('onShouldStartLoadWithRequest', event);\n  },\n  onMessage: (\n    event: WebViewMessageEvent & { messagingModuleName?: string }\n  ) => {\n    directEventEmitter.emit('onMessage', event);\n  },\n});\n\n/**\n * A simple counter to uniquely identify WebView instances. Do not use this for anything else.\n */\nlet uniqueRef = 0;\n\nconst WebViewComponent = forwardRef<{}, AndroidWebViewProps>(\n  (\n    {\n      overScrollMode = 'always',\n      javaScriptEnabled = true,\n      thirdPartyCookiesEnabled = true,\n      scalesPageToFit = true,\n      allowsFullscreenVideo = false,\n      allowFileAccess = false,\n      saveFormDataDisabled = false,\n      cacheEnabled = true,\n      androidLayerType = 'none',\n      originWhitelist = defaultOriginWhitelist,\n      setSupportMultipleWindows = true,\n      setBuiltInZoomControls = true,\n      setDisplayZoomControls = false,\n      nestedScrollEnabled = false,\n      startInLoadingState,\n      onNavigationStateChange,\n      onLoadStart,\n      onError,\n      onLoad,\n      onLoadEnd,\n      onLoadProgress,\n      onHttpError: onHttpErrorProp,\n      onRenderProcessGone: onRenderProcessGoneProp,\n      onMessage: onMessageProp,\n      onOpenWindow: onOpenWindowProp,\n      renderLoading,\n      renderError,\n      style,\n      containerStyle,\n      source,\n      nativeConfig,\n      onShouldStartLoadWithRequest: onShouldStartLoadWithRequestProp,\n      injectedJavaScriptObject,\n      ...otherProps\n    },\n    ref\n  ) => {\n    const messagingModuleName = useRef<string>(\n      `WebViewMessageHandler${(uniqueRef += 1)}`\n    ).current;\n    const webViewRef = useRef<React.ComponentRef<\n      HostComponent<NativeProps>\n    > | null>(null);\n\n    const onShouldStartLoadWithRequestCallback = useCallback(\n      (shouldStart: boolean, url: string, lockIdentifier?: number) => {\n        if (lockIdentifier) {\n          RNCWebViewModule.shouldStartLoadWithLockIdentifier(\n            shouldStart,\n            lockIdentifier\n          );\n        } else if (shouldStart && webViewRef.current) {\n          Commands.loadUrl(webViewRef.current, url);\n        }\n      },\n      []\n    );\n\n    const {\n      onLoadingStart,\n      onShouldStartLoadWithRequest,\n      onMessage,\n      viewState,\n      setViewState,\n      lastErrorEvent,\n      onHttpError,\n      onLoadingError,\n      onLoadingFinish,\n      onLoadingProgress,\n      onOpenWindow,\n      onRenderProcessGone,\n    } = useWebViewLogic({\n      onNavigationStateChange,\n      onLoad,\n      onError,\n      onHttpErrorProp,\n      onLoadEnd,\n      onLoadProgress,\n      onLoadStart,\n      onRenderProcessGoneProp,\n      onMessageProp,\n      onOpenWindowProp,\n      startInLoadingState,\n      originWhitelist,\n      onShouldStartLoadWithRequestProp,\n      onShouldStartLoadWithRequestCallback,\n    });\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        goForward: () =>\n          webViewRef.current && Commands.goForward(webViewRef.current),\n        goBack: () => webViewRef.current && Commands.goBack(webViewRef.current),\n        reload: () => {\n          setViewState('LOADING');\n          if (webViewRef.current) {\n            Commands.reload(webViewRef.current);\n          }\n        },\n        stopLoading: () =>\n          webViewRef.current && Commands.stopLoading(webViewRef.current),\n        postMessage: (data: string) =>\n          webViewRef.current && Commands.postMessage(webViewRef.current, data),\n        injectJavaScript: (data: string) =>\n          webViewRef.current &&\n          Commands.injectJavaScript(webViewRef.current, data),\n        requestFocus: () =>\n          webViewRef.current && Commands.requestFocus(webViewRef.current),\n        clearFormData: () =>\n          webViewRef.current && Commands.clearFormData(webViewRef.current),\n        clearCache: (includeDiskFiles: boolean) =>\n          webViewRef.current &&\n          Commands.clearCache(webViewRef.current, includeDiskFiles),\n        clearHistory: () =>\n          webViewRef.current && Commands.clearHistory(webViewRef.current),\n      }),\n      [setViewState, webViewRef]\n    );\n\n    useEffect(() => {\n      const onShouldStartLoadWithRequestSubscription =\n        directEventEmitter.addListener(\n          'onShouldStartLoadWithRequest',\n          (\n            event: ShouldStartLoadRequestEvent & {\n              messagingModuleName?: string;\n            }\n          ) => {\n            if (event.messagingModuleName === messagingModuleName) {\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              const { messagingModuleName: _, ...rest } = event;\n              onShouldStartLoadWithRequest(rest);\n            }\n          }\n        );\n\n      const onMessageSubscription = directEventEmitter.addListener(\n        'onMessage',\n        (event: WebViewMessageEvent & { messagingModuleName?: string }) => {\n          if (event.messagingModuleName === messagingModuleName) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { messagingModuleName: _, ...rest } = event;\n            onMessage(rest);\n          }\n        }\n      );\n\n      return () => {\n        onShouldStartLoadWithRequestSubscription.remove();\n        onMessageSubscription.remove();\n      };\n    }, [messagingModuleName, onMessage, onShouldStartLoadWithRequest]);\n\n    let otherView: ReactElement | undefined;\n    if (viewState === 'LOADING') {\n      otherView = (renderLoading || defaultRenderLoading)();\n    } else if (viewState === 'ERROR') {\n      invariant(\n        lastErrorEvent != null,\n        'lastErrorEvent expected to be non-null'\n      );\n      if (lastErrorEvent) {\n        otherView = (renderError || defaultRenderError)(\n          lastErrorEvent.domain,\n          lastErrorEvent.code,\n          lastErrorEvent.description\n        );\n      }\n    } else if (viewState !== 'IDLE') {\n      console.error(`RNCWebView invalid state encountered: ${viewState}`);\n    }\n\n    const webViewStyles = [styles.container, styles.webView, style];\n    const webViewContainerStyle = [styles.container, containerStyle];\n\n    if (typeof source !== 'number' && source && 'method' in source) {\n      if (source.method === 'POST' && source.headers) {\n        console.warn(\n          'WebView: `source.headers` is not supported when using POST.'\n        );\n      } else if (source.method === 'GET' && source.body) {\n        console.warn('WebView: `source.body` is not supported when using GET.');\n      }\n    }\n\n    const NativeWebView =\n      (nativeConfig?.component as typeof RNCWebView | undefined) || RNCWebView;\n\n    const sourceResolved = resolveAssetSource(source as ImageSourcePropType);\n    const newSource =\n      typeof sourceResolved === 'object'\n        ? Object.entries(sourceResolved as WebViewSourceUri).reduce(\n            (prev, [currKey, currValue]) => {\n              return {\n                ...prev,\n                [currKey]:\n                  currKey === 'headers' &&\n                  currValue &&\n                  typeof currValue === 'object'\n                    ? Object.entries(currValue).map(([key, value]) => {\n                        return {\n                          name: key,\n                          value,\n                        };\n                      })\n                    : currValue,\n              };\n            },\n            {}\n          )\n        : sourceResolved;\n\n    const webView = (\n      <NativeWebView\n        key=\"webViewKey\"\n        {...otherProps}\n        messagingEnabled={typeof onMessageProp === 'function'}\n        messagingModuleName={messagingModuleName}\n        hasOnScroll={!!otherProps.onScroll}\n        onLoadingError={onLoadingError}\n        onLoadingFinish={onLoadingFinish}\n        onLoadingProgress={onLoadingProgress}\n        onLoadingStart={onLoadingStart}\n        onHttpError={onHttpError}\n        onRenderProcessGone={onRenderProcessGone}\n        onMessage={onMessage}\n        onOpenWindow={onOpenWindow}\n        hasOnOpenWindowEvent={onOpenWindowProp !== undefined}\n        onShouldStartLoadWithRequest={onShouldStartLoadWithRequest}\n        ref={webViewRef}\n        // TODO: find a better way to type this.\n        // @ts-expect-error source is old arch\n        source={sourceResolved}\n        newSource={newSource}\n        style={webViewStyles}\n        overScrollMode={overScrollMode}\n        javaScriptEnabled={javaScriptEnabled}\n        thirdPartyCookiesEnabled={thirdPartyCookiesEnabled}\n        scalesPageToFit={scalesPageToFit}\n        allowsFullscreenVideo={allowsFullscreenVideo}\n        allowFileAccess={allowFileAccess}\n        saveFormDataDisabled={saveFormDataDisabled}\n        cacheEnabled={cacheEnabled}\n        androidLayerType={androidLayerType}\n        setSupportMultipleWindows={setSupportMultipleWindows}\n        setBuiltInZoomControls={setBuiltInZoomControls}\n        setDisplayZoomControls={setDisplayZoomControls}\n        nestedScrollEnabled={nestedScrollEnabled}\n        injectedJavaScriptObject={JSON.stringify(injectedJavaScriptObject)}\n        {...nativeConfig?.props}\n      />\n    );\n\n    return (\n      <View style={webViewContainerStyle}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n);\n\n// native implementation should return \"true\" only for Android 5+\nconst { isFileUploadSupported } = RNCWebViewModule;\n\nconst WebView = Object.assign(WebViewComponent, { isFileUploadSupported });\n\nexport default WebView;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  loadingOrErrorView: {\n    position: 'absolute',\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n    width: '100%',\n    backgroundColor: 'white',\n  },\n  loadingProgressBar: {\n    height: 20,\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n    marginBottom: 2,\n  },\n  errorTextTitle: {\n    fontSize: 15,\n    fontWeight: '500',\n    marginBottom: 10,\n  },\n  webView: {\n    backgroundColor: '#ffffff',\n  },\n  flexStart: {\n    alignSelf: 'flex-start',\n  },\n  colorRed: {\n    color: 'red',\n  },\n});\n\nexport default styles;\n","import escapeStringRegexp from 'escape-string-regexp';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { Linking, View, ActivityIndicator, Text, Platform } from 'react-native';\nimport {\n  OnShouldStartLoadWithRequest,\n  ShouldStartLoadRequestEvent,\n  WebViewError,\n  WebViewErrorEvent,\n  WebViewHttpErrorEvent,\n  WebViewMessageEvent,\n  WebViewNavigation,\n  WebViewNavigationEvent,\n  WebViewOpenWindowEvent,\n  WebViewProgressEvent,\n  WebViewRenderProcessGoneEvent,\n  WebViewTerminatedEvent,\n} from './WebViewTypes';\nimport styles from './WebView.styles';\n\nconst defaultOriginWhitelist = ['http://*', 'https://*'] as const;\n\nconst extractOrigin = (url: string): string => {\n  const result = /^[A-Za-z][A-Za-z0-9+\\-.]+:(\\/\\/)?[^/]*/.exec(url);\n  return result === null ? '' : result[0];\n};\n\nconst originWhitelistToRegex = (originWhitelist: string): string =>\n  `^${escapeStringRegexp(originWhitelist).replace(/\\\\\\*/g, '.*')}`;\n\nconst passesWhitelist = (compiledWhitelist: readonly string[], url: string) => {\n  const origin = extractOrigin(url);\n  return compiledWhitelist.some((x) => new RegExp(x).test(origin));\n};\n\nconst compileWhitelist = (\n  originWhitelist: readonly string[]\n): readonly string[] =>\n  ['about:blank', ...(originWhitelist || [])].map(originWhitelistToRegex);\n\nconst createOnShouldStartLoadWithRequest = (\n  loadRequest: (\n    shouldStart: boolean,\n    url: string,\n    lockIdentifier: number\n  ) => void,\n  originWhitelist: readonly string[],\n  onShouldStartLoadWithRequest?: OnShouldStartLoadWithRequest\n) => {\n  return ({ nativeEvent }: ShouldStartLoadRequestEvent) => {\n    let shouldStart = true;\n    const { url, lockIdentifier } = nativeEvent;\n\n    if (!passesWhitelist(compileWhitelist(originWhitelist), url)) {\n      Linking.canOpenURL(url)\n        .then((supported) => {\n          if (supported) {\n            return Linking.openURL(url);\n          }\n          console.warn(`Can't open url: ${url}`);\n          return undefined;\n        })\n        .catch((e) => {\n          console.warn('Error opening URL: ', e);\n        });\n      shouldStart = false;\n    } else if (onShouldStartLoadWithRequest) {\n      shouldStart = onShouldStartLoadWithRequest(nativeEvent);\n    }\n\n    loadRequest(shouldStart, url, lockIdentifier);\n  };\n};\n\nconst defaultRenderLoading = () => (\n  <View style={styles.loadingOrErrorView}>\n    <ActivityIndicator />\n  </View>\n);\nconst defaultRenderError = (\n  errorDomain: string | undefined,\n  errorCode: number,\n  errorDesc: string\n) => (\n  <View style={styles.loadingOrErrorView}>\n    <Text style={styles.errorTextTitle}>Error loading page</Text>\n    <Text style={styles.errorText}>{`Domain: ${errorDomain}`}</Text>\n    <Text style={styles.errorText}>{`Error Code: ${errorCode}`}</Text>\n    <Text style={styles.errorText}>{`Description: ${errorDesc}`}</Text>\n  </View>\n);\n\nexport {\n  defaultOriginWhitelist,\n  createOnShouldStartLoadWithRequest,\n  defaultRenderLoading,\n  defaultRenderError,\n};\n\nexport const useWebViewLogic = ({\n  startInLoadingState,\n  onNavigationStateChange,\n  onLoadStart,\n  onLoad,\n  onLoadProgress,\n  onLoadEnd,\n  onError,\n  onHttpErrorProp,\n  onMessageProp,\n  onOpenWindowProp,\n  onRenderProcessGoneProp,\n  onContentProcessDidTerminateProp,\n  originWhitelist,\n  onShouldStartLoadWithRequestProp,\n  onShouldStartLoadWithRequestCallback,\n}: {\n  startInLoadingState?: boolean;\n  onNavigationStateChange?: (event: WebViewNavigation) => void;\n  onLoadStart?: (event: WebViewNavigationEvent) => void;\n  onLoad?: (event: WebViewNavigationEvent) => void;\n  onLoadProgress?: (event: WebViewProgressEvent) => void;\n  onLoadEnd?: (event: WebViewNavigationEvent | WebViewErrorEvent) => void;\n  onError?: (event: WebViewErrorEvent) => void;\n  onHttpErrorProp?: (event: WebViewHttpErrorEvent) => void;\n  onMessageProp?: (event: WebViewMessageEvent) => void;\n  onOpenWindowProp?: (event: WebViewOpenWindowEvent) => void;\n  onRenderProcessGoneProp?: (event: WebViewRenderProcessGoneEvent) => void;\n  onContentProcessDidTerminateProp?: (event: WebViewTerminatedEvent) => void;\n  originWhitelist: readonly string[];\n  onShouldStartLoadWithRequestProp?: OnShouldStartLoadWithRequest;\n  onShouldStartLoadWithRequestCallback: (\n    shouldStart: boolean,\n    url: string,\n    lockIdentifier?: number | undefined\n  ) => void;\n}) => {\n  const [viewState, setViewState] = useState<'IDLE' | 'LOADING' | 'ERROR'>(\n    startInLoadingState ? 'LOADING' : 'IDLE'\n  );\n  const [lastErrorEvent, setLastErrorEvent] = useState<WebViewError | null>(\n    null\n  );\n  const startUrl = useRef<string | null>(null);\n\n  const updateNavigationState = useCallback(\n    (event: WebViewNavigationEvent) => {\n      onNavigationStateChange?.(event.nativeEvent);\n    },\n    [onNavigationStateChange]\n  );\n\n  const onLoadingStart = useCallback(\n    (event: WebViewNavigationEvent) => {\n      // Needed for android\n      startUrl.current = event.nativeEvent.url;\n      // !Needed for android\n\n      onLoadStart?.(event);\n      updateNavigationState(event);\n    },\n    [onLoadStart, updateNavigationState]\n  );\n\n  const onLoadingError = useCallback(\n    (event: WebViewErrorEvent) => {\n      event.persist();\n      if (onError) {\n        onError(event);\n      } else {\n        console.warn('Encountered an error loading page', event.nativeEvent);\n      }\n      onLoadEnd?.(event);\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n      setViewState('ERROR');\n      setLastErrorEvent(event.nativeEvent);\n    },\n    [onError, onLoadEnd]\n  );\n\n  const onHttpError = useCallback(\n    (event: WebViewHttpErrorEvent) => {\n      onHttpErrorProp?.(event);\n    },\n    [onHttpErrorProp]\n  );\n\n  // Android Only\n  const onRenderProcessGone = useCallback(\n    (event: WebViewRenderProcessGoneEvent) => {\n      onRenderProcessGoneProp?.(event);\n    },\n    [onRenderProcessGoneProp]\n  );\n  // !Android Only\n\n  // iOS Only\n  const onContentProcessDidTerminate = useCallback(\n    (event: WebViewTerminatedEvent) => {\n      onContentProcessDidTerminateProp?.(event);\n    },\n    [onContentProcessDidTerminateProp]\n  );\n  // !iOS Only\n\n  const onLoadingFinish = useCallback(\n    (event: WebViewNavigationEvent) => {\n      onLoad?.(event);\n      onLoadEnd?.(event);\n      const {\n        nativeEvent: { url },\n      } = event;\n      // on Android, only if url === startUrl\n      if (Platform.OS !== 'android' || url === startUrl.current) {\n        setViewState('IDLE');\n      }\n      // !on Android, only if url === startUrl\n      updateNavigationState(event);\n    },\n    [onLoad, onLoadEnd, updateNavigationState]\n  );\n\n  const onMessage = useCallback(\n    (event: WebViewMessageEvent) => {\n      onMessageProp?.(event);\n    },\n    [onMessageProp]\n  );\n\n  const onLoadingProgress = useCallback(\n    (event: WebViewProgressEvent) => {\n      const {\n        nativeEvent: { progress },\n      } = event;\n      // patch for Android only\n      if (Platform.OS === 'android' && progress === 1) {\n        setViewState((prevViewState) =>\n          prevViewState === 'LOADING' ? 'IDLE' : prevViewState\n        );\n      }\n      // !patch for Android only\n      onLoadProgress?.(event);\n    },\n    [onLoadProgress]\n  );\n\n  const onShouldStartLoadWithRequest = useMemo(\n    () =>\n      createOnShouldStartLoadWithRequest(\n        onShouldStartLoadWithRequestCallback,\n        originWhitelist,\n        onShouldStartLoadWithRequestProp\n      ),\n    [\n      originWhitelist,\n      onShouldStartLoadWithRequestProp,\n      onShouldStartLoadWithRequestCallback,\n    ]\n  );\n\n  const onOpenWindow = useCallback(\n    (event: WebViewOpenWindowEvent) => {\n      onOpenWindowProp?.(event);\n    },\n    [onOpenWindowProp]\n  );\n\n  return {\n    onShouldStartLoadWithRequest,\n    onLoadingStart,\n    onLoadingProgress,\n    onLoadingError,\n    onLoadingFinish,\n    onHttpError,\n    onRenderProcessGone,\n    onContentProcessDidTerminate,\n    onMessage,\n    onOpenWindow,\n    viewState,\n    setViewState,\n    lastErrorEvent,\n  };\n};\n","import WebView from './WebView';\n\nexport { WebView };\nexport default WebView;\n"],"names":["matchOperatorsRegex","module","exports","string","TypeError","replace","_reactNative","require","TurboModuleRegistry","getEnforcing","_interopRequireDefault","NativeComponentRegistry","ConditionallyIgnoredEventHandlers","dispatchCommand","__INTERNAL_VIEW_CONFIG","uiViewClassName","directEventTypes","topContentSizeChange","registrationName","topRenderProcessGone","topContentProcessDidTerminate","topCustomMenuSelection","topFileDownload","topLoadingError","topLoadingFinish","topLoadingProgress","topLoadingStart","topHttpError","topMessage","topOpenWindow","topScroll","topShouldStartLoadWithRequest","validAttributes","Object","assign","allowFileAccess","allowsProtectedMedia","allowsFullscreenVideo","androidLayerType","cacheMode","domStorageEnabled","downloadingMessage","forceDarkOn","geolocationEnabled","lackPermissionToDownloadMessage","messagingModuleName","minimumFontSize","mixedContentMode","nestedScrollEnabled","overScrollMode","saveFormDataDisabled","scalesPageToFit","setBuiltInZoomControls","setDisplayZoomControls","setSupportMultipleWindows","textZoom","thirdPartyCookiesEnabled","hasOnScroll","allowingReadAccessToURL","allowsBackForwardNavigationGestures","allowsInlineMediaPlayback","allowsAirPlayForMediaPlayback","allowsLinkPreview","automaticallyAdjustContentInsets","autoManageStatusBarEnabled","bounces","contentInset","contentInsetAdjustmentBehavior","contentMode","dataDetectorTypes","decelerationRate","directionalLockEnabled","enableApplePay","hideKeyboardAccessoryView","keyboardDisplayRequiresUserAction","limitsNavigationsToAppBoundDomains","mediaCapturePermissionGrantType","pagingEnabled","pullToRefreshEnabled","scrollEnabled","sharedCookiesEnabled","textInteractionEnabled","useSharedProcessPool","menuItems","suppressMenuItems","hasOnFileDownload","fraudulentWebsiteWarningEnabled","allowFileAccessFromFileURLs","allowUniversalAccessFromFileURLs","applicationNameForUserAgent","basicAuthCredential","cacheEnabled","incognito","injectedJavaScript","injectedJavaScriptBeforeContentLoaded","injectedJavaScriptForMainFrameOnly","injectedJavaScriptBeforeContentLoadedForMainFrameOnly","javaScriptCanOpenWindowsAutomatically","javaScriptEnabled","webviewDebuggingEnabled","mediaPlaybackRequiresUserAction","messagingEnabled","hasOnOpenWindowEvent","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","newSource","userAgent","injectedJavaScriptObject","onContentSizeChange","onRenderProcessGone","onContentProcessDidTerminate","onCustomMenuSelection","onFileDownload","onLoadingError","onLoadingFinish","onLoadingProgress","onLoadingStart","onHttpError","onMessage","onOpenWindow","onScroll","onShouldStartLoadWithRequest","get","goBack","ref","goForward","reload","stopLoading","injectJavaScript","javascript","requestFocus","postMessage","data","loadUrl","url","clearFormData","clearCache","includeDiskFiles","clearHistory","_require$registerCall","_react","_interopRequireWildcard","_BatchedBridge","_EventEmitter","_invariant","_RNCWebViewNativeComponent","_NativeRNCWebView","_WebViewShared","_WebView","_jsxRuntime","_excluded","_excluded2","_excluded3","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","n","__proto__","a","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","resolveAssetSource","Image","directEventEmitter","EventEmitter","BatchedBridge","registerCallableModule","bind","event","emit","uniqueRef","WebViewComponent","forwardRef","_ref","otherView","_ref$overScrollMode","_ref$javaScriptEnable","_ref$thirdPartyCookie","_ref$scalesPageToFit","_ref$allowsFullscreen","_ref$allowFileAccess","_ref$saveFormDataDisa","_ref$cacheEnabled","_ref$androidLayerType","_ref$originWhitelist","originWhitelist","defaultOriginWhitelist","_ref$setSupportMultip","_ref$setBuiltInZoomCo","_ref$setDisplayZoomCo","_ref$nestedScrollEnab","startInLoadingState","onNavigationStateChange","onLoadStart","onError","onLoad","onLoadEnd","onLoadProgress","onHttpErrorProp","onRenderProcessGoneProp","onMessageProp","onOpenWindowProp","renderLoading","renderError","style","containerStyle","source","nativeConfig","onShouldStartLoadWithRequestProp","otherProps","_objectWithoutProperties2","useRef","current","webViewRef","onShouldStartLoadWithRequestCallback","useCallback","shouldStart","lockIdentifier","RNCWebViewModule","shouldStartLoadWithLockIdentifier","Commands","_useWebViewLogic","useWebViewLogic","viewState","setViewState","lastErrorEvent","useImperativeHandle","useEffect","onShouldStartLoadWithRequestSubscription","addListener","rest","onMessageSubscription","remove","defaultRenderLoading","invariant","defaultRenderError","domain","code","description","console","error","webViewStyles","styles","container","webView","webViewContainerStyle","method","headers","warn","body","NativeWebView","component","RNCWebView","sourceResolved","entries","reduce","prev","_ref2","_ref3","_slicedToArray2","currKey","currValue","_defineProperty2","map","_ref4","_ref5","name","value","jsx","undefined","JSON","stringify","props","jsxs","View","children","isFileUploadSupported","WebView","StyleSheet","create","flex","overflow","loadingOrErrorView","position","justifyContent","alignItems","height","width","backgroundColor","loadingProgressBar","errorText","fontSize","textAlign","marginBottom","errorTextTitle","fontWeight","flexStart","alignSelf","colorRed","color","_escapeStringRegexp","originWhitelistToRegex","escapeStringRegexp","createOnShouldStartLoadWithRequest","loadRequest","nativeEvent","compiledWhitelist","origin","result","exec","extractOrigin","some","x","RegExp","test","passesWhitelist","concat","_toConsumableArray2","compileWhitelist","Linking","canOpenURL","then","supported","openURL","catch","ActivityIndicator","errorDomain","errorCode","errorDesc","Text","onContentProcessDidTerminateProp","_useState","useState","_useState2","_useState3","_useState4","setLastErrorEvent","startUrl","updateNavigationState","persist","isDefaultPrevented","Platform","OS","progress","prevViewState","useMemo"],"sourceRoot":""}