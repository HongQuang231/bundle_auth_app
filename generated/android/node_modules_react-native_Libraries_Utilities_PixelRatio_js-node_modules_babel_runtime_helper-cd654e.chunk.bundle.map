{"version":3,"file":"node_modules_react-native_Libraries_Utilities_PixelRatio_js-node_modules_babel_runtime_helper-cd654e.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js","webpack:///./node_modules/react-native/Libraries/Utilities/Dimensions.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js","webpack:///./node_modules/react-native/Libraries/Utilities/PixelRatio.js","webpack:///./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js","webpack:///./node_modules/react-native/src/private/specs/modules/NativeDeviceInfo.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/classPrivateFieldLooseBase.js","webpack:///./node_modules/@babel/runtime/helpers/classPrivateFieldLooseKey.js","webpack:///./node_modules/@babel/runtime/helpers/get.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/superPropBase.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {IEventEmitter} from '../vendor/emitter/EventEmitter';\n\nimport {beginEvent, endEvent} from '../Performance/Systrace';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\n\n// FIXME: use typed events\ntype RCTDeviceEventDefinitions = $FlowFixMe;\n\n/**\n * Global EventEmitter used by the native platform to emit events to JavaScript.\n * Events are identified by globally unique event names.\n *\n * NativeModules that emit events should instead subclass `NativeEventEmitter`.\n */\nclass RCTDeviceEventEmitter extends EventEmitter<RCTDeviceEventDefinitions> {\n  // Add systrace to RCTDeviceEventEmitter.emit method for debugging\n  emit<TEvent: $Keys<RCTDeviceEventDefinitions>>(\n    eventType: TEvent,\n    ...args: RCTDeviceEventDefinitions[TEvent]\n  ): void {\n    beginEvent(() => `RCTDeviceEventEmitter.emit#${eventType}`);\n    super.emit(eventType, ...args);\n    endEvent();\n  }\n}\nconst instance = new RCTDeviceEventEmitter();\n\nObject.defineProperty(global, '__rctDeviceEventEmitter', {\n  configurable: true,\n  value: instance,\n});\n\nexport default (instance: IEventEmitter<RCTDeviceEventDefinitions>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport NativeDeviceInfo, {\n  type DimensionsPayload,\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\nconst eventEmitter = new EventEmitter<{\n  change: [DimensionsPayload],\n}>();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsPayload;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preferred API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n   */\n  static get(dim: string): DisplayMetrics | DisplayMetricsAndroid {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<DimensionsPayload>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: 'change',\n    handler: Function,\n  ): EventSubscription {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    return eventEmitter.addListener(type, handler);\n  }\n}\n\n// Subscribe before calling getConstants to make sure we don't miss any updates in between.\nRCTDeviceEventEmitter.addListener(\n  'didUpdateDimensions',\n  (update: DimensionsPayload) => {\n    Dimensions.set(update);\n  },\n);\nDimensions.set(NativeDeviceInfo.getConstants().Dimensions);\n\nexport default Dimensions;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeDeviceInfo';\nimport NativeDeviceInfo from '../../src/private/specs/modules/NativeDeviceInfo';\nexport default NativeDeviceInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Dimensions = require('./Dimensions').default;\n\n/**\n * PixelRatio class gives access to the device pixel density.\n *\n * ## Fetching a correctly sized image\n *\n * You should get a higher resolution image if you are on a high pixel density\n * device. A good rule of thumb is to multiply the size of the image you display\n * by the pixel ratio.\n *\n * ```\n * var image = getImage({\n *   width: PixelRatio.getPixelSizeForLayoutSize(200),\n *   height: PixelRatio.getPixelSizeForLayoutSize(100),\n * });\n * <Image source={image} style={{width: 200, height: 100}} />\n * ```\n *\n * ## Pixel grid snapping\n *\n * In iOS, you can specify positions and dimensions for elements with arbitrary\n * precision, for example 29.674825. But, ultimately the physical display only\n * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334\n * for iPhone 6. iOS tries to be as faithful as possible to the user value by\n * spreading one original pixel into multiple ones to trick the eye. The\n * downside of this technique is that it makes the resulting element look\n * blurry.\n *\n * In practice, we found out that developers do not want this feature and they\n * have to work around it by doing manual rounding in order to avoid having\n * blurry elements. In React Native, we are rounding all the pixels\n * automatically.\n *\n * We have to be careful when to do this rounding. You never want to work with\n * rounded and unrounded values at the same time as you're going to accumulate\n * rounding errors. Having even one rounding error is deadly because a one\n * pixel border may vanish or be twice as big.\n *\n * In React Native, everything in JavaScript and within the layout engine works\n * with arbitrary precision numbers. It's only when we set the position and\n * dimensions of the native element on the main thread that we round. Also,\n * rounding is done relative to the root rather than the parent, again to avoid\n * accumulating rounding errors.\n *\n */\nclass PixelRatio {\n  /**\n   * Returns the device pixel density. Some examples:\n   *\n   *   - PixelRatio.get() === 1\n   *     - mdpi Android devices (160 dpi)\n   *   - PixelRatio.get() === 1.5\n   *     - hdpi Android devices (240 dpi)\n   *   - PixelRatio.get() === 2\n   *     - iPhone 4, 4S\n   *     - iPhone 5, 5c, 5s\n   *     - iPhone 6\n   *     - iPhone 7\n   *     - iPhone 8\n   *     - iPhone SE\n   *     - xhdpi Android devices (320 dpi)\n   *   - PixelRatio.get() === 3\n   *     - iPhone 6 Plus\n   *     - iPhone 7 Plus\n   *     - iPhone 8 Plus\n   *     - iPhone X\n   *     - xxhdpi Android devices (480 dpi)\n   *   - PixelRatio.get() === 3.5\n   *     - Nexus 6\n   */\n  static get(): number {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the\n   * absolute font size, so any elements that heavily depend on that should use this to do\n   * calculations.\n   *\n   * If a font scale is not set, this returns the device pixel ratio.\n   *\n   * This reflects the user preference set in:\n   *  - Settings > Display > Font size on Android,\n   *  - Settings > Display & Brightness > Text Size on iOS.\n   */\n  static getFontScale(): number {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   *\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize: number): number {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize: number): number {\n    const ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n  // No-op for iOS, but used on the web. Should not be documented.\n  static startDetecting() {}\n}\n\nexport default PixelRatio;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: TEventToArgsMap[TEvent]) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: TEventToArgsMap[TEvent]\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\n// $FlowFixMe[deprecated-type]\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  #registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: TEventToArgsMap[TEvent]) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    if (typeof listener !== 'function') {\n      throw new TypeError(\n        'EventEmitter.addListener(...): 2nd argument must be a function.',\n      );\n    }\n    const registrations = allocate<\n      TEventToArgsMap,\n      TEvent,\n      TEventToArgsMap[TEvent],\n    >(this.#registry, eventType);\n    const registration: Registration<TEventToArgsMap[TEvent]> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: TEventToArgsMap[TEvent]\n  ): void {\n    const registrations: ?Set<Registration<TEventToArgsMap[TEvent]>> =\n      this.#registry[eventType];\n    if (registrations != null) {\n      // Copy `registrations` to take a snapshot when we invoke `emit`, in case\n      // registrations are added or removed when listeners are invoked.\n      for (const registration of Array.from(registrations)) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this.#registry = {};\n    } else {\n      delete this.#registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this.#registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: TEventToArgsMap[TEvent],\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../../../Libraries/TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n\nexport type DisplayMetricsAndroid = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n  densityDpi: number,\n|};\n\nexport type DisplayMetrics = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n|};\n\nexport type DimensionsPayload = {|\n  window?: DisplayMetrics,\n  screen?: DisplayMetrics,\n  windowPhysicalPixels?: DisplayMetricsAndroid,\n  screenPhysicalPixels?: DisplayMetricsAndroid,\n|};\n\nexport type DeviceInfoConstants = {|\n  +Dimensions: DimensionsPayload,\n  +isIPhoneX_deprecated?: boolean,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => DeviceInfoConstants;\n}\n\nconst NativeModule: Spec = TurboModuleRegistry.getEnforcing<Spec>('DeviceInfo');\nlet constants: ?DeviceInfoConstants = null;\n\nconst NativeDeviceInfo = {\n  getConstants(): DeviceInfoConstants {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n    return constants;\n  },\n};\n\nexport default NativeDeviceInfo;\n","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classPrivateFieldBase(e, t) {\n  if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\");\n  return e;\n}\nmodule.exports = _classPrivateFieldBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var id = 0;\nfunction _classPrivateFieldKey(e) {\n  return \"__private_\" + id++ + \"_\" + e;\n}\nmodule.exports = _classPrivateFieldKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var superPropBase = require(\"./superPropBase.js\");\nfunction _get() {\n  return (module.exports = _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {\n    var p = superPropBase(e, t);\n    if (p) {\n      var n = Object.getOwnPropertyDescriptor(p, t);\n      return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;\n    }\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _get.apply(null, arguments);\n}\nmodule.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\nfunction _superPropBase(t, o) {\n  for (; !{}.hasOwnProperty.call(t, o) && null !== (t = getPrototypeOf(t)););\n  return t;\n}\nmodule.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["_Systrace","require","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","RCTDeviceEventEmitter","_EventEmitter","_classCallCheck2","arguments","_inherits2","_createClass2","key","value","eventType","_get2","beginEvent","_len","length","args","Array","_key","_get3","concat","endEvent","_interopRequireDefault","EventEmitter","instance","Object","defineProperty","global","configurable","exports","dimensions","_RCTDeviceEventEmitter","_NativeDeviceInfo","_invariant","eventEmitter","dimensionsInitialized","Dimensions","dim","invariant","dims","screen","window","windowPhysicalPixels","width","scale","height","fontScale","screenPhysicalPixels","emit","type","handler","addListener","update","set","NativeDeviceInfo","getConstants","r","__esModule","_getRequireWildcardCache","has","get","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","i","_interopRequireWildcard","WeakMap","keys","forEach","_exportNames","enumerable","PixelRatio","layoutSize","Math","round","ratio","_registry","writable","listener","context","TypeError","registrations","registry","Set","allocate","_classPrivateFieldLooseBase2","this","registration","remove","delete","add","from","size","NativeModule","getEnforcing","constants","arrayLikeToArray","module","isArray","id","superPropBase","_get","bind","p","Symbol","iterator","getPrototypeOf","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread"],"sourceRoot":""}