{"version":3,"file":"src_navigation_AccountNavigation_tsx.chunk.bundle","mappings":"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","sources":["webpack:///./src/app/account/change-password/helper.tsx","webpack:///./src/app/account/change-password/index.tsx","webpack:///./src/app/account/change-password/styles.ts","webpack:///./src/app/account/helper.tsx","webpack:///./src/app/account/index.tsx","webpack:///./src/app/account/infomation/components/Avatar/index.tsx","webpack:///./src/app/account/infomation/components/Avatar/styles.ts","webpack:///./src/app/account/infomation/components/ChangePhone/index.tsx","webpack:///./src/app/account/infomation/components/ChangePhone/styles.ts","webpack:///./src/app/account/infomation/index.tsx","webpack:///./src/app/account/infomation/styles.ts","webpack:///./src/app/account/styles.ts","webpack:///./src/constants/NavigationNameAccount.ts","webpack:///./src/hooks/apiHooks/useAccountInfoServices.tsx","webpack:///./src/navigation/AccountNavigation.tsx","webpack:///./src/services/accountInfo.services.ts"],"sourcesContent":["export interface ValidationRule {\n  regex: RegExp;\n  message: string;\n}\n\nexport interface RuleConfig {\n  'lowercase-char': RuleConfigRuleField;\n  'special-char': RuleConfigRuleField;\n  digit: RuleConfigRuleField;\n  'min-length': RuleConfigRuleField;\n  'uppercase-char': RuleConfigRuleField;\n}\n\ninterface RuleConfigRuleField {\n  type: string;\n  value: string | number;\n  validators: Validator[];\n}\n\ninterface Validator {\n  type: string;\n  expression: string;\n}\n\nexport const normalCharacterRegex = /[a-z]/;\nexport const atleast8CharacterRegex = /.{8,}$/;\nexport const appearNumberChar = /(?=.*[0-9])/;\n\nexport interface IDataPassword {\n  oldPassword: string;\n  newPassword: string;\n  confirmPassword: string;\n}\n\nexport type TypeDataPassword = keyof IDataPassword;\n\ninterface ValidationResult {\n  message: string;\n  pass: boolean;\n}\n\nexport const validationHint = (value: string, rules: ValidationRule[]) => {\n  const results: ValidationResult[] = rules.map(rule => ({\n    message: rule.message,\n    pass: rule.regex.test(value),\n  }));\n  return results;\n};\n","import {TouchableOpacity, View} from 'react-native';\nimport HeaderCM from '../../components/Header/HeaderCM';\nimport {useTranslation} from 'react-i18next';\nimport {SafeAreaView} from 'react-native-safe-area-context';\nimport {useAccountInfoServices} from '../../../hooks/apiHooks/useAccountInfoServices';\nimport {isEmpty} from 'lodash';\nimport {useEffect, useMemo, useState} from 'react';\nimport {\n  appearNumberChar,\n  IDataPassword,\n  normalCharacterRegex,\n  RuleConfig,\n  TypeDataPassword,\n  validationHint,\n  ValidationRule,\n} from './helper';\nimport {RegexUtils} from '../../../utils';\nimport {KeyboardAwareScrollView} from 'react-native-keyboard-aware-scroll-view';\nimport styles from './styles';\nimport InputCM from '../../screens/review-eid/components/InputCM';\nimport {useAppSelector} from '../../../hooks/useRedux';\nimport ButtonCM from '../../components/Button';\nimport TextCM from '../../components/Text';\nimport {Icon} from '@ui-kitten/components';\nimport Toast from 'react-native-toast-message';\nconst ChangePasswordScreen = () => {\n  const {t} = useTranslation();\n  const {devicesInfo} = useAppSelector(state => state.common);\n  const defaultMappingValidationRules: ValidationRule[] = [\n    {\n      regex: new RegExp(`.{${4},}$`),\n      message: t('ST.ChangePassword.minimumLengthCharacters', {\n        value: 4,\n      }),\n    },\n  ];\n\n  const mappingValidationRules = (rules: RuleConfig) => {\n    const mappedRules: ValidationRule[] = [];\n    for (const [key, value] of Object.entries(rules)) {\n      if (\n        key == 'lowercase-char' &&\n        value.type === 'Boolean' &&\n        value.value === 'true'\n      ) {\n        mappedRules.push({\n          regex: normalCharacterRegex,\n          message: t('ST.DigitalCertificate.atLeast1LowercaseCharacter'),\n        });\n      }\n      if (\n        key == 'uppercase-char' &&\n        value.type === 'Boolean' &&\n        value.value === 'true'\n      ) {\n        mappedRules.push({\n          regex: /[A-Z]/,\n          message: t('ST.ChangePassword.atLeast1UppercaseCharacter'),\n        });\n      }\n      if (key == 'min-length' && value.type === 'Number') {\n        mappedRules.push({\n          regex: new RegExp(`.{${value.value},}$`),\n          message: t('ST.ChangePassword.minimumLengthCharacters', {\n            value: value.value,\n          }),\n        });\n      }\n      if (\n        key == 'digit' &&\n        value.type === 'Boolean' &&\n        value.value === 'true'\n      ) {\n        mappedRules.push({\n          regex: appearNumberChar,\n          message: t('ST.DigitalCertificate.atLeast1NumericCharacter'),\n        });\n      }\n      if (\n        key == 'special-char' &&\n        value.type === 'Boolean' &&\n        value.value === 'true'\n      ) {\n        mappedRules.push({\n          regex: RegexUtils.REGEX_SPECIAL_CHAR,\n          message: t('ST.ChangePassword.atLeast1SpecialCharacter'),\n        });\n      }\n    }\n    return mappedRules;\n  };\n  const [rules, setRules] = useState<ValidationRule[]>([]);\n  const [data, setData] = useState<IDataPassword>({\n    oldPassword: '',\n    newPassword: '',\n    confirmPassword: '',\n  });\n\n  const [showPassword, setShowPassword] = useState({\n    oldPassword: false,\n    newPassword: false,\n    confirmPassword: false,\n  });\n  const [loading, setLoading] = useState(false);\n  const AccountServices = useAccountInfoServices();\n\n  useEffect(() => {\n    getRules();\n  }, []);\n\n  const getRules = async () => {\n    try {\n      const res = await AccountServices.getSecuriryPasswordRules();\n      if (!isEmpty(res)) {\n        const rulesData = (res\n          .filter(data => data.status === true)\n          .find((item: any) => item.configType === 'complexPassword')\n          ?.attrs as RuleConfig) ?? {'min-length': {type: 'Number', value: 5}};\n        setRules(mappingValidationRules(rulesData));\n      } else {\n        setRules(defaultMappingValidationRules);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const valHint = useMemo(\n    () => validationHint(data.newPassword ?? '', rules),\n    [data.newPassword, rules],\n  );\n\n  const isDisableButton =\n    valHint.some(item => !item.pass) ||\n    !data.oldPassword ||\n    !data.newPassword ||\n    !data.confirmPassword;\n\n  const renderHintext = () => {\n    return (\n      <View style={styles.viewHint}>\n        {valHint.map((item, index) => {\n          return (\n            <View key={index} style={styles.itemHint}>\n              {item.pass ? (\n                <Icon\n                  fill={'#219342'}\n                  name=\"checkmark-circle\"\n                  width={16}\n                  height={16}\n                />\n              ) : (\n                <Icon\n                  fill={'#DA3E33'}\n                  name=\"close-circle\"\n                  width={16}\n                  height={16}\n                />\n              )}\n              <TextCM style={styles.txtHint}>{item.message}</TextCM>\n            </View>\n          );\n        })}\n      </View>\n    );\n  };\n\n  const handleChangeData = (type: TypeDataPassword, value: string) => {\n    setData(prev => ({...prev, [type]: value}));\n  };\n  const handleChangeShowData = (type: TypeDataPassword, value: boolean) => {\n    setShowPassword(prev => ({...prev, [type]: value}));\n  };\n\n  const mapMessageError = (code: string) => {\n    switch (code) {\n      case 'validations.error.passwordnotcorrect':\n        return t('ST.ChangePassword.passwordnotcorrect');\n      case 'error.userPolicyPasswordDuplicate':\n        return t('ST.ChangePassword.userPolicyPasswordDuplicate');\n      default:\n        // temporary message\n        return 'error change password';\n    }\n  };\n\n  const onSubmit = async () => {\n    try {\n      if (data.newPassword !== data.confirmPassword) {\n        Toast.show({\n          type: 'error',\n          text1: t('CM.noti'),\n          text2: t('ST.passwordNotMatch'),\n        });\n        return;\n      }\n      setLoading(true);\n      const body = {\n        currentPassword: data.oldPassword,\n        newPassword: data.newPassword,\n        reNewPassword: data.confirmPassword,\n        contactTrace: devicesInfo,\n      };\n      const res = await AccountServices.changePassword(body);\n      if (res.data) {\n        Toast.show({\n          type: 'success',\n          text1: t('CM.noti'),\n          text2: t('ST.changePasswordSuccessfully'),\n        });\n        setData({\n          oldPassword: '',\n          newPassword: '',\n          confirmPassword: '',\n        });\n      } else {\n        Toast.show({\n          type: 'error',\n          text1: t('CM.noti'),\n          text2: mapMessageError(res.error.title),\n        });\n      }\n    } catch (err: any) {\n    } finally {\n      setLoading(false);\n    }\n  };\n  return (\n    <SafeAreaView edges={['bottom']} style={{flex: 1, backgroundColor: '#fff'}}>\n      <HeaderCM\n        style={{\n          backgroundColor: '#6F2CED',\n        }}\n        contentStyle={{\n          backgroundColor: '#6F2CED',\n        }}\n        title={t('ST.TxtChangePassword')}\n      />\n\n      <KeyboardAwareScrollView style={styles.mainContainer}>\n        <View style={{rowGap: 10}}>\n          <InputCM\n            secureTextEntry={!showPassword.oldPassword}\n            label={t('ST.DigitalCertificate.currentPassword')}\n            placeholder={t('ST.DigitalCertificate.typeCurrentPassword')}\n            isRequired={true}\n            value={data.oldPassword}\n            onChangeText={value => handleChangeData('oldPassword', value)}\n            accessoryRightIcon={\n              <TouchableOpacity\n                style={{paddingLeft: 10}}\n                onPress={() =>\n                  handleChangeShowData('oldPassword', !showPassword.oldPassword)\n                }>\n                <Icon\n                  name={showPassword.oldPassword ? 'eye' : 'eye-off'}\n                  width={16}\n                  height={16}\n                />\n              </TouchableOpacity>\n            }\n          />\n          <InputCM\n            secureTextEntry={!showPassword.newPassword}\n            label={t('ST.DigitalCertificate.NewPassword')}\n            isRequired={true}\n            placeholder={t('ST.DigitalCertificate.typeNewPassword')}\n            value={data.newPassword}\n            onChangeText={value => handleChangeData('newPassword', value)}\n            accessoryRightIcon={\n              <TouchableOpacity\n                style={{paddingLeft: 10}}\n                onPress={() =>\n                  handleChangeShowData('newPassword', !showPassword.newPassword)\n                }>\n                <Icon\n                  name={showPassword.newPassword ? 'eye' : 'eye-off'}\n                  width={16}\n                  height={16}\n                />\n              </TouchableOpacity>\n            }\n          />\n          {renderHintext()}\n          <InputCM\n            secureTextEntry={!showPassword.confirmPassword}\n            label={t('ST.DigitalCertificate.typeConfirmPassword')}\n            isRequired={true}\n            placeholder={t('ST.DigitalCertificate.typeConfirmPassword')}\n            value={data.confirmPassword}\n            onChangeText={value => handleChangeData('confirmPassword', value)}\n            accessoryRightIcon={\n              <TouchableOpacity\n                style={{paddingLeft: 10}}\n                onPress={() =>\n                  handleChangeShowData(\n                    'confirmPassword',\n                    !showPassword.confirmPassword,\n                  )\n                }>\n                <Icon\n                  name={showPassword.confirmPassword ? 'eye' : 'eye-off'}\n                  width={16}\n                  height={16}\n                />\n              </TouchableOpacity>\n            }\n          />\n        </View>\n      </KeyboardAwareScrollView>\n      <ButtonCM\n        disabled={isDisableButton}\n        style={{\n          backgroundColor: '#6F2CED',\n          marginHorizontal: 16,\n        }}\n        styleLabel={{\n          color: '#fff',\n        }}\n        label={t('CM.confirm')}\n        onPress={onSubmit}\n        loading={loading}\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default ChangePasswordScreen;\n","import {StyleSheet} from 'react-native';\nimport {Font, FontSize} from '../../../constants';\n\nexport default StyleSheet.create({\n  mainContainer: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#fff',\n  },\n  txtHint: {\n    color: '#667085',\n    fontFamily: Font.InterRegular400,\n    fontSize: FontSize.FontBase,\n    flex: 1,\n  },\n  itemHint: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    columnGap: 8,\n  },\n  viewHint: {\n    backgroundColor: '#F1F1F1',\n    padding: 12,\n    borderRadius: 8,\n    gap: 8,\n  },\n});\n","import {\n  IconEarth,\n  IconEN,\n  IconInfo,\n  IconInfoTicketSelect,\n  IconKeyChangePass,\n  IconLogout,\n  IconPersonSvg,\n  IconRing,\n  IconVN,\n} from '../../assets/images';\n\nexport const ListInfo = [\n  {\n    title: 'ST.TxtAccountInformation',\n    icon: <IconPersonSvg width={20} height={20} />,\n    action: 'info',\n    type: 'next',\n  },\n  {\n    title: 'ST.TxtChangePassword',\n    icon: <IconKeyChangePass width={20} height={20} />,\n    action: 'changePassword',\n    type: 'next',\n  },\n  // {\n  //   title: 'ST.TxtReceiveNotification',\n  //   icon: <IconRing width={20} height={20} />,\n  //   action: 'notification',\n  //   type: 'switch',\n  // },\n  {\n    title: 'ST.TxtLanguage',\n    icon: <IconEarth width={20} height={20} />,\n    action: 'language',\n    type: 'list',\n  },\n  // {\n  //   title: 'Reset Account',\n  //   icon: <IconInfoTicketSelect width={20} height={20} />,\n  //   action: 'reset',\n  //   type: 'next',\n  // },\n  {\n    title: 'ST.TxtLogout',\n    icon: <IconLogout width={20} height={20} />,\n    action: 'logout',\n    type: 'next',\n  },\n];\n\nexport const ListLanguages = [\n  {\n    title: 'ST.TxtVietName',\n    value: 'vi',\n    icon: <IconVN width={28} height={19} />,\n  },\n  {\n    title: 'ST.TxtEnglish',\n    value: 'en',\n    icon: <IconEN width={28} height={19} />,\n  },\n];\n","import {SafeAreaView} from 'react-native-safe-area-context';\nimport HeaderCM from '../components/Header/HeaderCM';\nimport {Alert, ScrollView, TouchableOpacity, View} from 'react-native';\nimport {\n  Icon,\n  IndexPath,\n  MenuItem,\n  OverflowMenu,\n  Toggle,\n} from '@ui-kitten/components';\nimport TextCM from '../components/Text';\nimport styles from './styles';\nimport {ListInfo, ListLanguages} from './helper';\nimport {useEffect, useState} from 'react';\nimport {useAppDispatch, useAppSelector} from '../../hooks/useRedux';\nimport {commonActions} from '../../redux/slices';\nimport {useTranslation} from 'react-i18next';\nimport {useNavigation, useRoute} from '@react-navigation/native';\nimport NavigationNameAccount from '../../constants/NavigationNameAccount';\nimport {useTicketServices} from '../../hooks/apiHooks/useTicketServices';\nimport {useAccountInfoServices} from '../../hooks/apiHooks/useAccountInfoServices';\n\nconst AccountScreen = () => {\n  const navigation = useNavigation<any>();\n  const router = useRoute<any>();\n  // const {handleRegisterNotification, handleUnRegisterNotification} =\n  //   router.params;\n\n  const {t, i18n} = useTranslation();\n  const dispatch = useAppDispatch();\n  const {language, activeRegisterNotify} = useAppSelector(\n    state => state.common,\n  );\n  const {dataAccount} = useAppSelector(state => state.account);\n  // const [checkNoti, setCheckNoti] = useState(activeRegisterNotify);\n  const [visible, setVisible] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState<IndexPath>(\n    new IndexPath(ListLanguages.findIndex(lang => lang.value === language)),\n  );\n  const ListServices = useTicketServices();\n  const AccountServices = useAccountInfoServices();\n\n  useEffect(() => {\n    i18n.changeLanguage(language);\n    // login();\n  }, []);\n\n  const login = async () => {\n    await ListServices.login();\n  };\n\n  // const toggleCheckNoti = () => {\n  //   activeRegisterNotify\n  //     ? handleUnRegisterNotification?.()\n  //     : handleRegisterNotification?.();\n  //   // setCheckNoti(!checkNoti);\n  // };\n\n  const onItemSelect = async (index: IndexPath) => {\n    const valueSelect = ListLanguages[index?.row].value;\n    const dataUpdate = await AccountServices.updateAccount({\n      ...dataAccount,\n      langKey: valueSelect,\n    });\n    if (dataUpdate) {\n      setSelectedIndex(index);\n      i18n.changeLanguage(valueSelect);\n      dispatch(commonActions.setLanguage(valueSelect));\n    } else {\n      Alert.alert(t('CM.forwardFail'));\n    }\n    setVisible(false);\n  };\n\n  const getValueSelect = () => {\n    return ListLanguages[selectedIndex?.row].icon;\n  };\n\n  const handleLogout = () => {\n    dispatch(commonActions.setIsAuthorized(false));\n    dispatch(commonActions.setAccessToken(''));\n  };\n\n  const handleAction = (action: string) => {\n    switch (action) {\n      case 'info':\n        navigation.navigate(NavigationNameAccount.InformationScreen);\n        break;\n      case 'changePassword':\n        navigation.navigate(NavigationNameAccount.ChangePasswordScreen);\n        break;\n      case 'logout':\n        handleLogout();\n        break;\n      case 'reset':\n        console.log(1111);\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  const renderOverFlowMenuIcon = () => {\n    return (\n      <OverflowMenu\n        anchor={() => (\n          <TouchableOpacity onPress={() => setVisible(true)}>\n            {getValueSelect()}\n          </TouchableOpacity>\n        )}\n        visible={visible}\n        selectedIndex={selectedIndex}\n        onSelect={onItemSelect}\n        onBackdropPress={() => setVisible(false)}>\n        {ListLanguages.map(languae => (\n          <MenuItem title={t(languae.title)} accessoryRight={languae.icon} />\n        ))}\n      </OverflowMenu>\n    );\n  };\n\n  return (\n    <SafeAreaView style={{flex: 1}} edges={['bottom']}>\n      <HeaderCM\n        style={{\n          backgroundColor: '#6F2CED',\n        }}\n        contentStyle={{\n          backgroundColor: '#6F2CED',\n        }}\n        title={t('ST.Settings')}\n      />\n      <ScrollView style={styles.ctnMain}>\n        {ListInfo.map(action => (\n          <TouchableOpacity\n            onPress={() => handleAction(action.action)}\n            key={action.title}\n            style={styles.ctnBody}>\n            <View style={styles.ctnLeft}>\n              {action.icon}\n              <TextCM style={styles.textTitle}>{t(action.title)}</TextCM>\n            </View>\n            {action.type === 'next' && (\n              <Icon width={20} height={20} name=\"arrow-ios-forward-outline\" />\n            )}\n\n            {/* {action.type === 'switch' && (\n              <Toggle\n                checked={activeRegisterNotify}\n                onChange={toggleCheckNoti}\n                status=\"basic\"\n              />\n            )} */}\n\n            {action.type === 'list' && renderOverFlowMenuIcon()}\n          </TouchableOpacity>\n        ))}\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nexport default AccountScreen;\n","import {useState} from 'react';\nimport {Image, View} from 'react-native';\nimport ImageCropPicker from '../../../../components/ImageCropPicker';\nimport {String} from '../../../../../constants';\nimport ButtonCM from '../../../../components/Button';\nimport {useAccountInfoServices} from '../../../../../hooks/apiHooks/useAccountInfoServices';\nimport styles from './styles';\nimport {useTranslation} from 'react-i18next';\nimport {last} from 'lodash';\nimport {useAppDispatch, useAppSelector} from '../../../../../hooks/useRedux';\nimport {accountActions} from '../../../../../redux/slices';\n\ntype Props = {\n  setAvatar: (url: string) => void;\n  avatarUrl: string;\n};\n\nconst AvatarModal = ({setAvatar, avatarUrl}: Props) => {\n  const {t} = useTranslation();\n  const dispatch = useAppDispatch();\n  const {dataAccount} = useAppSelector(state => state.account);\n  const [loading, setLoading] = useState('');\n  const AccountServices = useAccountInfoServices();\n\n  const handlePickImage = async () => {\n    try {\n      setLoading('uploadAvatar');\n      const data = (await ImageCropPicker.ChoosePhoto({\n        cropping: true,\n      })) as any;\n      if (data) {\n        const body = new FormData();\n        const file = {\n          uri: data.path,\n          type: data.mime,\n          name: last(data?.path?.split('/')),\n        };\n        body.append('file', file);\n        body.append('zoom', 1);\n\n        const dataResp = await AccountServices.updateAccountAvatar(body);\n        if (dataResp) {\n          setAvatar(dataResp.imageUrl);\n          dispatch(\n            accountActions.setDataAccountSuccess({\n              ...dataAccount,\n              imageUrl: dataResp.imageUrl,\n            }),\n          );\n        }\n      }\n    } catch (error) {\n    } finally {\n      setLoading('');\n    }\n  };\n\n  const handleDeleteAvatar = async () => {\n    try {\n      setLoading('deleteAvatar');\n      const dataResp = await AccountServices.deleteAvatar();\n      if (dataResp) {\n        setAvatar('');\n      }\n    } catch (error) {\n    } finally {\n      setLoading('');\n    }\n  };\n\n  return (\n    <View>\n      <View style={styles.ctnImage}>\n        <Image\n          width={200}\n          height={200}\n          borderRadius={100}\n          source={{\n            uri: avatarUrl || String.DEFAULT_IMAGE,\n          }}\n        />\n      </View>\n      <View style={styles.ctnBtn}>\n        <ButtonCM\n          style={styles.btnDel}\n          label={t('ST.delAvatar')}\n          styleLabel={styles.textDel}\n          onPress={handleDeleteAvatar}\n          loading={loading === 'deleteAvatar'}\n        />\n        <ButtonCM\n          style={styles.btnEdit}\n          styleLabel={styles.textEdit}\n          label={t('ST.editAvatar')}\n          onPress={handlePickImage}\n          loading={loading === 'uploadAvatar'}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default AvatarModal;\n","import {StyleSheet} from 'react-native';\nimport {Font} from '../../../../../constants';\n\nexport default StyleSheet.create({\n  ctnImage: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 20,\n  },\n\n  ctnBtn: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    columnGap: 10,\n  },\n\n  btnDel: {backgroundColor: '#F2ECFD', flex: 1},\n  btnEdit: {backgroundColor: '#6F2CED', flex: 1},\n  textDel: {\n    color: '#6F2CED',\n    fontSize: 14,\n    fontFamily: Font.InterSemiBold600,\n  },\n  textEdit: {\n    color: '#fff',\n    fontSize: 14,\n    fontFamily: Font.InterSemiBold600,\n  },\n});\n","import {View} from 'react-native';\nimport HeaderCM from '../../../../components/Header/HeaderCM';\nimport {useTranslation} from 'react-i18next';\nimport TextCM from '../../../../components/Text';\nimport {IconChangePhone} from '../../../../../assets/images';\nimport InputCM from '../../../../screens/review-eid/components/InputCM';\nimport {useState} from 'react';\nimport {KeyboardAwareScrollView} from 'react-native-keyboard-aware-scroll-view';\nimport ButtonCM from '../../../../components/Button';\nimport {useAppDispatch, useAppSelector} from '../../../../../hooks/useRedux';\nimport {useAccountInfoServices} from '../../../../../hooks/apiHooks/useAccountInfoServices';\nimport {accountActions} from '../../../../../redux/slices';\nimport {isEmpty} from 'lodash';\nimport styles from './styles';\nimport Toast from 'react-native-toast-message';\n\ntype Props = {\n  onClose: () => void;\n};\n\nconst ChangePhone = ({onClose}: Props) => {\n  const {t} = useTranslation();\n  const dispatch = useAppDispatch();\n  const {dataAccount} = useAppSelector(state => state.account);\n  const [phone, setPhone] = useState(dataAccount.phone || '');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const AccountServices = useAccountInfoServices();\n\n  const handleChangePhone = (value: string) => {\n    setPhone(value);\n    if (value?.length === 10 || value?.length === 12) {\n      setError('');\n    } else {\n      setError(t('CM.validPhone'));\n    }\n  };\n\n  const handleUpdatePhone = async () => {\n    try {\n      setLoading(true);\n      const dataResp = await AccountServices.updateAccount({\n        ...dataAccount,\n        phone: phone,\n      });\n      if (dataResp) {\n        Toast.show({\n          type: 'success',\n          text1: t('CM.info'),\n          text2: t('CM.phoneUpdatedSuccessfully'),\n        });\n        dispatch(accountActions.setDataAccountSuccess(dataResp));\n        onClose();\n      } else {\n        Toast.show({\n          type: 'error',\n          text1: t('CM.info'),\n          text2: t('CM.phoneUpdatedFailed'),\n        });\n      }\n    } catch (error) {\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View style={{flex: 1}}>\n      <HeaderCM\n        style={{\n          backgroundColor: '#fff',\n        }}\n        contentStyle={{\n          backgroundColor: '#fff',\n        }}\n        titleStyle={{\n          color: '#000810',\n        }}\n        fillIconBackLeft=\"#000810\"\n        title={t('ST.changePhone')}\n        onPressIconLeft={onClose}\n      />\n\n      <KeyboardAwareScrollView>\n        <View style={{padding: 16}}>\n          <View style={styles.ctnHeader}>\n            <TextCM style={styles.textHeader}>\n              {t('ST.headerChangePhone')}\n            </TextCM>\n            <TextCM style={styles.textDesHeader}>\n              {t('ST.descriptionsHeaderChangePhone')}\n            </TextCM>\n          </View>\n\n          <View style={styles.ctnIcon}>\n            <IconChangePhone width={127} height={155} />\n          </View>\n          <TextCM style={styles.textType}>{t('ST.typeNewPhone')}</TextCM>\n          <TextCM style={styles.textDesType}>{t('ST.desTypeNewPhone')}</TextCM>\n\n          <InputCM\n            value={phone}\n            onChangeText={handleChangePhone}\n            keyBoardType={'numeric'}\n            placeholder={t('ST.typeNewPhone')}\n            captionText={t(error)}\n          />\n        </View>\n      </KeyboardAwareScrollView>\n      <ButtonCM\n        disabled={!isEmpty(error) ? true : false}\n        style={styles.btn}\n        styleLabel={styles.labelBtn}\n        label={t('CM.save')}\n        onPress={handleUpdatePhone}\n        loading={loading}\n      />\n    </View>\n  );\n};\n\nexport default ChangePhone;\n","import {StyleSheet} from 'react-native';\nimport {Font} from '../../../../../constants';\n\nexport default StyleSheet.create({\n  ctnHeader: {\n    backgroundColor: '#EDF2FD',\n    padding: 8,\n    borderRadius: 8,\n  },\n\n  textHeader: {\n    fontSize: 12,\n    fontFamily: Font.InterSemiBold600,\n    color: '#00204D',\n    marginBottom: 12,\n  },\n  textDesHeader: {\n    color: '#00204DE5',\n    fontSize: 12,\n    fontFamily: Font.InterRegular400,\n  },\n\n  ctnIcon: {\n    paddingVertical: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  textType: {\n    fontSize: 14,\n    fontFamily: Font.InterSemiBold600,\n    color: '#00204D',\n    marginBottom: 12,\n  },\n  textDesType: {\n    fontSize: 12,\n    fontFamily: Font.InterRegular400,\n    color: '#00204DE5',\n    marginBottom: 12,\n  },\n\n  btn: {\n    backgroundColor: '#6F2CED',\n    marginHorizontal: 16,\n  },\n  labelBtn: {\n    color: '#fff',\n  },\n});\n","import {SafeAreaView} from 'react-native-safe-area-context';\nimport HeaderCM from '../../components/Header/HeaderCM';\nimport {useTranslation} from 'react-i18next';\nimport {Image, ScrollView, TouchableOpacity, View} from 'react-native';\nimport TextCM from '../../components/Text';\nimport {useAppSelector} from '../../../hooks/useRedux';\nimport {IconAccount, IconCamera} from '../../../assets/images';\nimport React, {useEffect, useMemo, useState} from 'react';\nimport InfoBodyScreen from '../../screens/review-eid/components/Info';\nimport {Icon} from '@ui-kitten/components';\nimport {CommonUtils, DateUtils} from '../../../utils';\nimport styles from './styles';\nimport BottomSheetCM from '../../components/BottomSheet';\nimport AvatarModal from './components/Avatar';\nimport ModalFullScreen from '../../components/ModalFullScreen';\nimport ChangePhone from './components/ChangePhone';\nimport {BASE_URL_EACCOUNT} from '../../../services/httpClient';\n\nconst InformationScreen = () => {\n  const {t} = useTranslation();\n  const [showModal, setShowModal] = useState('');\n  const {dataAccount} = useAppSelector(state => state.account);\n  const [avatarUrl, setAvatarUrl] = useState('');\n  const dataInfo: any[] = useMemo(() => {\n    return [\n      {\n        key: 'RV.eid.name',\n        type: 'normal',\n        value: {\n          name:\n            '' + dataAccount.firstName + ' ' + dataAccount.lastName || '---',\n        },\n      },\n      // {\n      //   key: 'Giới tính',\n      //   type: 'normal',\n      //   value: {\n      //     name: dataAccount.gender || '---',\n      //   },\n      // },\n      // {\n      //   key: 'Ngày sinh',\n      //   type: 'normal',\n      //   value: {\n      //     name: DateUtils.convertDateToDDMMYYYY(dataAccount?.dob) || '---',\n      //   },\n      // },\n      // {\n      //   key: 'Mã số thuế',\n      //   type: 'normal',\n      //   value: {\n      //     name: dataAccount.taxCodeOrg || '---',\n      //   },\n      // },\n      {\n        key: 'CM.labelPhone',\n        type: 'normal',\n        value: {\n          name: dataAccount.phone || '---',\n          withIcon: (\n            <TouchableOpacity\n              hitSlop={15}\n              onPress={() => setShowModal('changePhone')}>\n              <Icon\n                fill={'#00204DB2'}\n                name=\"edit-2-outline\"\n                width={20}\n                height={20}\n              />\n            </TouchableOpacity>\n          ),\n        },\n      },\n    ];\n  }, [dataAccount]);\n\n  useEffect(() => {\n    getAvatar();\n  }, []);\n\n  const getAvatar = async () => {\n    try {\n      const dataResp = await CommonUtils.downloadFile(\n        `avatar-${new Date().getTime()}.jpg`,\n        `${BASE_URL_EACCOUNT}/services/uaa/api/account/avatar`,\n        false,\n      );\n      setAvatarUrl(dataResp.uri);\n    } catch (error) {}\n  };\n\n  const onCloseModal = () => setShowModal('');\n\n  return (\n    <React.Suspense fallback>\n      <SafeAreaView style={styles.ctnMain} edges={['bottom']}>\n        <HeaderCM\n          style={{\n            backgroundColor: '#6F2CED',\n          }}\n          contentStyle={{\n            backgroundColor: '#6F2CED',\n          }}\n          title={t('ST.TxtAccountInformation')}\n        />\n\n        <View style={{marginBottom: 30}}>\n          <View style={styles.ctnheader}>\n            <View\n              style={CommonUtils.generateBoxShadowStyle(\n                0,\n                4,\n                '#1A3C5412',\n                5,\n                3,\n                5,\n                '#1A3C5412',\n              )}>\n              <View style={styles.ctnView}>\n                <View style={styles.ctnOrg}>\n                  <View style={{flex: 1}} />\n                  <View style={styles.ctnOrgView}>\n                    <TextCM style={styles.textOrg}>\n                      {t('CM.orgnaration')}\n                    </TextCM>\n                  </View>\n                </View>\n                <View style={styles.ctnInfo}>\n                  <TouchableOpacity\n                    onPress={() => setShowModal('avatar')}\n                    style={{\n                      position: 'relative',\n                    }}>\n                    <Image\n                      width={50}\n                      height={50}\n                      borderRadius={25}\n                      source={{\n                        uri:\n                          avatarUrl ||\n                          'https://static.vecteezy.com/system/resources/previews/009/292/244/original/default-avatar-icon-of-social-media-user-vector.jpg',\n                      }}\n                    />\n                    <View style={{position: 'absolute', bottom: 0, right: 0}}>\n                      <IconCamera width={16} height={16} />\n                    </View>\n                  </TouchableOpacity>\n                  <View>\n                    <TextCM style={styles.textname}>\n                      {'' + dataAccount.firstName + ' ' + dataAccount.lastName}\n                    </TextCM>\n                    <TextCM style={styles.textEmail}>\n                      {dataAccount.email || '---'}\n                    </TextCM>\n                  </View>\n                </View>\n              </View>\n            </View>\n          </View>\n        </View>\n\n        <ScrollView style={styles.ctnMainIfo}>\n          <View style={styles.ctnBody}>\n            <View style={styles.ctnbodyHeader}>\n              <View style={styles.ctnBodyHeaderLeft}>\n                <IconAccount width={20} height={22} />\n                <TextCM style={styles.textHeader}>{t('ST.information')}</TextCM>\n              </View>\n            </View>\n            <InfoBodyScreen dataInfo={dataInfo} />\n          </View>\n        </ScrollView>\n\n        <BottomSheetCM\n          isVisible={showModal === 'avatar'}\n          title={t('ST.changeAvatar')}\n          onClose={onCloseModal}\n          renderContent={\n            <AvatarModal avatarUrl={avatarUrl} setAvatar={setAvatarUrl} />\n          }\n        />\n\n        <ModalFullScreen\n          isVisible={showModal === 'changePhone'}\n          children={<ChangePhone onClose={onCloseModal} />}\n        />\n      </SafeAreaView>\n    </React.Suspense>\n  );\n};\n\nexport default InformationScreen;\n","import {StyleSheet} from 'react-native';\nimport {Font} from '../../../constants';\n\nexport default StyleSheet.create({\n  ctnMain: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n\n  ctnheader: {\n    padding: 10,\n    backgroundColor: '#6F2CED',\n    position: 'relative',\n    height: 70,\n    borderBottomRightRadius: 20,\n    borderBottomLeftRadius: 20,\n  },\n\n  ctnView: {\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    overflow: 'hidden',\n    position: 'absolute',\n    width: '100%',\n  },\n  ctnOrg: {\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  ctnOrgView: {\n    backgroundColor: '#2F45FF',\n    padding: 3,\n    borderBottomLeftRadius: 8,\n    paddingHorizontal: 8,\n  },\n\n  textOrg: {\n    color: '#fff',\n    fontSize: 10,\n    fontFamily: Font.InterMedium500,\n  },\n\n  ctnInfo: {\n    paddingHorizontal: 10,\n    marginBottom: 10,\n    flexDirection: 'row',\n    alignItems: 'center',\n    columnGap: 16,\n  },\n  textname: {\n    color: '#1E1713',\n    fontSize: 16,\n    fontFamily: Font.InterRegular400,\n  },\n  textEmail: {\n    color: '#1E1713',\n    fontSize: 12,\n    fontFamily: Font.InterRegular400,\n  },\n\n  ctnMainIfo: {flex: 1, paddingHorizontal: 10},\n  ctnBody: {\n    flex: 1,\n    paddingHorizontal: 16,\n  },\n  ctnbodyHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  ctnBodyHeaderLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    columnGap: 8,\n  },\n  textHeader: {\n    color: '#00204D',\n    fontSize: 14,\n    fontFamily: Font.InterMedium500,\n  },\n});\n","import {StyleSheet} from 'react-native';\nimport {Font} from '../../constants';\n\nexport default StyleSheet.create({\n  ctnMain: {\n    padding: 16,\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n\n  ctnBody: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 15,\n  },\n\n  ctnLeft: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    columnGap: 8,\n  },\n  textTitle: {\n    color: '#070708',\n    fontFamily: Font.InterSemiBold600,\n    fontSize: 14,\n  },\n});\n","const NavigationNameAccount = {\n  AccountScreen: 'AccountScreen',\n  InformationScreen: 'InformationScreen',\n  ChangePasswordScreen: 'ChangePasswordScreen',\n};\n\nexport default NavigationNameAccount;\n","import {createAccountInfoServices} from '../../services/accountInfo.services';\nimport {useFetchRequest} from '../useFetch';\n\nexport const useAccountInfoServices = () => {\n  const fetchRequest = useFetchRequest();\n  return createAccountInfoServices(fetchRequest);\n};\n","import {createNativeStackNavigator} from '@react-navigation/native-stack';\nimport {ApplicationProvider, IconRegistry} from '@ui-kitten/components';\nimport {PaperProvider} from 'react-native-paper';\nimport * as eva from '@eva-design/eva';\nimport {EvaIconsPack} from '@ui-kitten/eva-icons';\nimport {default as theme} from '../../custom-theme.json'; // <-- Import app theme\nimport {default as mapping} from '../../mapping.json'; // <-- Import app mapping\nimport Toast from 'react-native-toast-message';\nimport NavigationNameAccount from '../constants/NavigationNameAccount';\nimport AccountScreen from '../app/account';\nimport InformationScreen from '../app/account/infomation';\nimport ChangePasswordScreen from '../app/account/change-password';\nimport React from 'react';\nconst Stack = createNativeStackNavigator();\n\n// const InformationScreenCM = React.lazy(\n//   () =>\n//     import(/* webpackChunkName: \"information\" */ '../app/account/infomation'),\n// );\n\n// const ChangePasswordScreenCM = React.lazy(\n//   () =>\n//     import(\n//       /* webpackChunkName: \"information\" */ '../app/account/change-password'\n//     ),\n// );\n\nconst AccountNavigation = () => {\n  return (\n    <>\n      <IconRegistry icons={[EvaIconsPack]} />\n      <ApplicationProvider\n        customMapping={mapping as any}\n        {...eva}\n        theme={{...eva.light, ...theme}}>\n        <PaperProvider>\n          <Stack.Navigator\n            // initialRouteName={NavigationNameAccount.ChangePasswordScreen}\n            screenOptions={{\n              headerShown: false,\n            }}>\n            <Stack.Screen\n              name={NavigationNameAccount.AccountScreen}\n              component={AccountScreen}\n            />\n            <Stack.Screen\n              name={NavigationNameAccount.InformationScreen}\n              component={InformationScreen}\n            />\n            <Stack.Screen\n              name={NavigationNameAccount.ChangePasswordScreen}\n              component={ChangePasswordScreen}\n            />\n          </Stack.Navigator>\n          <Toast />\n        </PaperProvider>\n      </ApplicationProvider>\n    </>\n  );\n};\n\nexport default AccountNavigation;\n","import {BASE_URL_EACCOUNT} from './httpClient';\n\nexport const createAccountInfoServices = (fetchRequest: any) => ({\n  async deleteAvatar() {\n    try {\n      const endpoint = '/services/uaa/api/account/avatar';\n      const data = await fetchRequest({\n        url: BASE_URL_EACCOUNT + endpoint,\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        typeOfResponse: '',\n      });\n      return Promise.resolve(data?.data);\n    } catch (error) {\n      console.log('deleteAvatar: ', error);\n      return Promise.reject(error);\n    }\n  },\n\n  async updateAccountAvatar(body: FormData) {\n    try {\n      const endpoint = '/services/uaa/api/account/avatar-zoom';\n      const data = await fetchRequest({\n        url: BASE_URL_EACCOUNT + endpoint,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        body,\n      });\n      return Promise.resolve(data?.data);\n    } catch (error) {\n      console.log('updateAccountAvatar: ', error);\n      return Promise.reject(error);\n    }\n  },\n\n  async updateAccount(body: any) {\n    try {\n      const endpoint = '/services/uaa/api/account';\n      const data = await fetchRequest({\n        url: BASE_URL_EACCOUNT + endpoint,\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n      return Promise.resolve(data?.data);\n    } catch (error) {\n      console.log('updateAccount: ', error);\n      return Promise.reject(error);\n    }\n  },\n\n  async getSecuriryPasswordRules(): Promise<any> {\n    try {\n      const endpoint = '/services/uaa/api/security-configs/all';\n      const data = await fetchRequest({\n        url: BASE_URL_EACCOUNT + endpoint,\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      return Promise.resolve(data?.data);\n    } catch (error) {\n      console.log('getSecuriryPasswordRules: ', error);\n      return Promise.reject(error);\n    }\n  },\n\n  async changePassword(body: any): Promise<any> {\n    try {\n      const endpoint = '/services/uaa/api/account/change-password';\n      const data = await fetchRequest({\n        url: BASE_URL_EACCOUNT + endpoint,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n        getValueErr: true,\n        typeOfResponse: '',\n      });\n      return Promise.resolve(data);\n    } catch (error: any) {\n      console.log('changePassword: ', error);\n      return Promise.reject(error);\n    }\n  },\n});\n"],"names":["exports","value","rules","map","rule","message","pass","regex","test","_reactNative","require","_HeaderCM","_interopRequireDefault","_reactI18next","_reactNativeSafeAreaContext","_useAccountInfoServices","_lodash","_react","_helper","_utils","_reactNativeKeyboardAwareScrollView","_styles","_InputCM","_useRedux","_Button","_Text","_components","_reactNativeToastMessage","_jsxRuntime","t","useTranslation","devicesInfo","useAppSelector","state","common","defaultMappingValidationRules","RegExp","_useState","useState","_useState2","_slicedToArray2","default","setRules","_useState3","oldPassword","newPassword","confirmPassword","_useState4","data","setData","_useState5","_useState6","showPassword","setShowPassword","_useState7","_useState8","loading","setLoading","AccountServices","useAccountInfoServices","useEffect","getRules","_ref3","_ref5","_asyncToGenerator2","res","getSecuriryPasswordRules","isEmpty","_ref4","_res$filter$find","rulesData","filter","status","find","item","configType","attrs","type","mappedRules","_ref","Object","entries","_ref2","key","push","normalCharacterRegex","appearNumberChar","RegexUtils","REGEX_SPECIAL_CHAR","mappingValidationRules","error","console","log","apply","arguments","valHint","useMemo","_data$newPassword","validationHint","isDisableButton","some","handleChangeData","prev","assign","_defineProperty2","handleChangeShowData","mapMessageError","code","onSubmit","Toast","show","text1","text2","body","currentPassword","reNewPassword","contactTrace","changePassword","title","err","jsxs","SafeAreaView","edges","style","flex","backgroundColor","children","jsx","contentStyle","KeyboardAwareScrollView","styles","mainContainer","View","rowGap","secureTextEntry","label","placeholder","isRequired","onChangeText","accessoryRightIcon","TouchableOpacity","paddingLeft","onPress","Icon","name","width","height","viewHint","index","itemHint","fill","txtHint","disabled","marginHorizontal","styleLabel","color","_constants","StyleSheet","create","padding","fontFamily","Font","InterRegular400","fontSize","FontSize","FontBase","flexDirection","alignItems","columnGap","borderRadius","gap","_images","icon","IconPersonSvg","action","IconKeyChangePass","IconEarth","IconLogout","IconVN","IconEN","_slices","_native","_NavigationNameAccount","_useTicketServices","navigation","useNavigation","_useTranslation","useRoute","i18n","dispatch","useAppDispatch","_useAppSelector","language","dataAccount","activeRegisterNotify","account","visible","setVisible","IndexPath","ListLanguages","findIndex","lang","selectedIndex","setSelectedIndex","ListServices","useTicketServices","changeLanguage","login","onItemSelect","valueSelect","row","updateAccount","langKey","commonActions","setLanguage","Alert","alert","_x","handleAction","navigate","NavigationNameAccount","InformationScreen","ChangePasswordScreen","setIsAuthorized","setAccessToken","ScrollView","ctnMain","ListInfo","ctnBody","ctnLeft","textTitle","OverflowMenu","anchor","onSelect","onBackdropPress","languae","MenuItem","accessoryRight","_ImageCropPicker","setAvatar","avatarUrl","handlePickImage","ImageCropPicker","ChoosePhoto","cropping","_data$path","FormData","file","uri","path","mime","last","split","append","dataResp","updateAccountAvatar","imageUrl","accountActions","setDataAccountSuccess","handleDeleteAvatar","deleteAvatar","ctnImage","Image","source","String","DEFAULT_IMAGE","ctnBtn","btnDel","textDel","btnEdit","textEdit","justifyContent","marginBottom","InterSemiBold600","onClose","phone","setPhone","setError","handleUpdatePhone","titleStyle","fillIconBackLeft","onPressIconLeft","ctnHeader","textHeader","textDesHeader","ctnIcon","IconChangePhone","textType","textDesType","length","keyBoardType","captionText","btn","labelBtn","paddingVertical","e","r","__esModule","_getRequireWildcardCache","has","get","n","__proto__","a","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","_Info","_BottomSheet","_Avatar","_ModalFullScreen","_ChangePhone","_httpClient","WeakMap","showModal","setShowModal","setAvatarUrl","dataInfo","firstName","lastName","withIcon","hitSlop","getAvatar","CommonUtils","downloadFile","Date","getTime","BASE_URL_EACCOUNT","onCloseModal","Suspense","fallback","ctnheader","generateBoxShadowStyle","ctnView","ctnOrg","ctnOrgView","textOrg","ctnInfo","position","bottom","right","IconCamera","textname","textEmail","email","ctnMainIfo","ctnbodyHeader","ctnBodyHeaderLeft","IconAccount","isVisible","renderContent","borderBottomRightRadius","borderBottomLeftRadius","overflow","paddingHorizontal","InterMedium500","AccountScreen","_accountInfo","_useFetch","fetchRequest","useFetchRequest","createAccountInfoServices","_nativeStack","_reactNativePaper","eva","_evaIcons","_customTheme","_mapping","_account","_infomation","_changePassword","Stack","createNativeStackNavigator","Fragment","IconRegistry","icons","EvaIconsPack","ApplicationProvider","customMapping","mapping","theme","light","PaperProvider","Navigator","screenOptions","headerShown","Screen","component","_deleteAvatar","url","method","headers","typeOfResponse","Promise","resolve","reject","_updateAccountAvatar","_updateAccount","JSON","stringify","_x2","_getSecuriryPasswordRules","getValueErr","_x3"],"sourceRoot":""}