{"version":3,"file":"vendors-884da25f.bundle","mappings":"kOAUAA,EAAAC,EAAAC,EAAA,QACAC,EAAAF,EAAAC,EAAA,OAEAE,EAAAH,EAAAC,EAAA,QAUA,SAASG,IACPC,EAAaC,cAAc,uBAAuB,kBAChDL,EAAQ,MAARA,EAA4B,GAEhC,CAAC,IAQKI,EAAY,oBAAAA,KAAA,EAAAE,EAAAC,SAAA,KAAAH,EAAA,UAAAI,EAAAD,SAAAH,EAAA,OAAAK,IAAA,aAAAC,MAMhB,WACON,EAAaO,gBAChBP,EAAaO,cAAgBC,EAAAA,QAAsBC,YACjD,sBAEAT,EAAaU,iBACb,MAEFX,KAGGC,EAAaW,sBAChBX,EAAaW,oBAAsBH,EAAAA,QAAsBC,YACvD,yBAEAT,EAAaU,iBACb,MAGN,GAAC,CAAAL,IAAA,YAAAC,MAUD,SACED,EACAO,GAEA,OAAOC,KAAKC,WAAWT,EAAKO,EAAUZ,EAAae,cACrD,GAAC,CAAAV,IAAA,gBAAAC,MAUD,SACED,EACAO,GAEA,OAAOC,KAAKC,WAAWT,EAAKO,EAAUZ,EAAagB,aACrD,GAAC,CAAAX,IAAA,aAAAC,MAED,SACED,EACAO,EACAK,GASA,OAPAjB,EAAakB,aACTD,EAAOE,IAAId,IACbe,QAAQC,KACN,yDAAyDhB,MAG7DY,EAAOK,IAAIjB,EAAKO,GACT,CACLW,OAAQ,WACNN,EAAOO,OAAOnB,EAChB,EAEJ,GAAC,CAAAA,IAAA,mBAAAC,MAQD,WACE,IAAMmB,EAAuB,CAAC,EAC9B,QAAAC,KAA8B1B,EAAae,cAAe,CAAC,IAADY,GAAA,EAAAC,EAAAzB,SAAAuB,EAAA,GAA9CrB,EAAGsB,EAAA,GAAEf,EAAQe,EAAA,GACvBF,EAAUpB,GAAOO,GACnB,CACA,IAAMiB,EAAsB,CAAC,EAC7B,QAAAC,KAA8B9B,EAAagB,aAAc,CAAC,IAADe,GAAA,EAAAH,EAAAzB,SAAA2B,EAAA,GAA7CzB,EAAG0B,EAAA,GAAEnB,EAAQmB,EAAA,GACvBF,EAASxB,GAAOO,GAClB,CAUA,OAR0B,MAAtBoB,EAAAA,SAAiE,MAAnCA,EAAAA,QAAmBC,cACnDD,EAAAA,QAAmBC,aAAaR,EAAWI,GAGzB,MAAhBK,EAAAA,SAAqD,MAA7BA,EAAAA,QAAaD,cACvCC,EAAAA,QAAaD,aAAaR,EAAW,wBAGhC,CAACU,OAAQV,EAAWW,MAAOP,EACpC,IAAC,CArGe,GAAZ7B,EACGe,cAA6C,IAAIsB,IADpDrC,EAEGgB,aAA4C,IAAIqB,IAFnDrC,EAGGO,cAAoC,KAHvCP,EAIGW,oBAA0C,KAoGnD2B,EAAOC,QAAUvC,C,mGCjIjB,IAAAF,EAAmE,SAAA0C,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAArC,QAAAqC,GAAA,IAAAG,EAAAC,EAAAH,GAAA,GAAAE,GAAAA,EAAAxB,IAAAqB,GAAA,OAAAG,EAAAE,IAAAL,GAAA,IAAAM,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAZ,EAAA,eAAAY,GAAA,GAAAC,eAAAC,KAAAd,EAAAY,GAAA,KAAAG,EAAAP,EAAAC,OAAAE,yBAAAX,EAAAY,GAAA,KAAAG,IAAAA,EAAAV,KAAAU,EAAAjC,KAAA2B,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAAZ,EAAAY,EAAA,QAAAN,EAAA3C,QAAAqC,EAAAG,GAAAA,EAAArB,IAAAkB,EAAAM,GAAAA,CAAA,CAAnEU,CAAA5D,EAAA,QAAmE,SAAAgD,EAAAJ,GAAA,sBAAAiB,QAAA,gBAAAhB,EAAA,IAAAgB,QAAAd,EAAA,IAAAc,QAAA,OAAAb,EAAA,SAAAJ,GAAA,OAAAA,EAAAG,EAAAF,CAAA,GAAAD,EAAA,CAAnES,OAAAS,KAAA5D,GAAA6D,SAAA,SAAAtD,GAAA,YAAAA,GAAA,eAAAA,IAAA4C,OAAAW,UAAAP,eAAAC,KAAAO,EAAAxD,IAAAA,KAAAkC,GAAAA,EAAAlC,KAAAP,EAAAO,IAAA4C,OAAAC,eAAAX,EAAAlC,EAAA,CAAAyD,YAAA,EAAAjB,IAAA,kBAAA/C,EAAAO,EAAA,QAAmEkC,EAAAA,QAEpDP,EAAAA,O,iCC0IfM,EAAOC,QA7HP,WACE,IACE,MASA,mFARF,CAAE,MAAOC,GACP,MAAO,8BAAgCA,CACzC,CACF,C,yGCjBA,IAAA9C,EAAAC,EAAAC,EAAA,QACAmE,EAAAnE,EAAA,OACAoE,EAAArE,EAAAC,EAAA,QACAqE,EAAAtE,EAAAC,EAAA,QACAsE,EAAAvE,EAAAC,EAAA,QACAuE,EAAAxE,EAAAC,EAAA,MA2BMwE,EAGc,YAAhBC,EAAAA,QAASC,GACT,IAAIjC,IAAI,CACN,CAAC,SAAU,6BACX,CAAC,sBAAuB,yBACxB,CAAC,sBAAuB,6BACxB,CAAC,8BAA+B,mCAElC,IAAIA,IAAI,CACN,CAAC,uBAAwB,wBACzB,CAAC,kBAAmB,mBACpB,CAAC,SAAU,uBACX,CAAC,mBAAoB,oBACrB,CAAC,sBAAuB,uBACxB,CAAC,sBAAuB,uBACxB,CAAC,4BAA6B,6BAC9B,CAAC,sBAAuB,yBAYxBkC,EAAoB,CASxBC,kBAAiB,WACf,MAAoB,YAAhBH,EAAAA,QAASC,GACJG,QAAQC,SAAQ,GAEhB,IAAID,SAAQ,SAACC,EAASC,GACU,MAAjCC,EAAAA,QACFA,EAAAA,QAA8BC,wBAC5BH,EACAC,GAGFA,EAAO,KAEX,GAEJ,EAUAG,mBAAkB,WAChB,MAAoB,YAAhBT,EAAAA,QAASC,GACJG,QAAQC,SAAQ,GAEhB,IAAID,SAAQ,SAACC,EAASC,GACU,MAAjCC,EAAAA,QACFA,EAAAA,QAA8BG,yBAC5BL,EACAC,GAGFA,EAAO,KAEX,GAEJ,EAUAK,sBAAqB,WACnB,MAAoB,YAAhBX,EAAAA,QAASC,GACJG,QAAQC,SAAQ,GAEhB,IAAID,SAAQ,SAACC,EAASC,GACU,MAAjCC,EAAAA,QACFA,EAAAA,QAA8BK,4BAC5BP,EACAC,GAGFA,EAAO,KAEX,GAEJ,EAUAO,sBAAqB,WACnB,OAAO,IAAIT,SAAQ,SAACC,EAASC,GACP,YAAhBN,EAAAA,QAASC,GAC2B,MAAlCa,EAAAA,QACFA,EAAAA,QAA+BD,sBAAsBR,GAErDC,EAAO,MAG4B,MAAjCC,EAAAA,QACFA,EAAAA,QAA8BQ,4BAC5BV,EACAC,GAGFA,EAAO,KAGb,GACF,EAUAU,4BAA2B,WACzB,OAAO,IAAIZ,SAAQ,SAACC,EAASC,GAC3B,GAAoB,YAAhBN,EAAAA,QAASC,GACX,OAAOG,QAAQC,SAAQ,GAIrB,OAD6B,MAA7BE,EAAAA,aAA6B,EAA7BA,EAAAA,QAA+BU,4CAG/BV,EAAAA,QAA8BU,2CAC5BZ,EACAC,GAGFA,EAAO,KAGb,GACF,EAUAY,4BAA2B,WACzB,MAAoB,YAAhBlB,EAAAA,QAASC,GACJG,QAAQC,SAAQ,GAEhB,IAAID,SAAQ,SAACC,EAASC,GACU,MAAjCC,EAAAA,QACFA,EAAAA,QAA8BY,kCAC5Bd,EACAC,GAGFA,EAAO,KAEX,GAEJ,EAUAc,sBAAqB,WACnB,OAAO,IAAIhB,SAAQ,SAACC,EAASC,GACP,YAAhBN,EAAAA,QAASC,GAC2B,MAAlCa,EAAAA,QACFA,EAAAA,QAA+BO,0BAA0BhB,GAEzDC,EAAO,MAG4B,MAAjCC,EAAAA,QACFA,EAAAA,QAA8Be,yBAC5BjB,EACAC,GAGFA,EAAO,KAGb,GACF,EAYAiB,8BAA6B,WAC3B,OAAO,IAAInB,SAAQ,SAACC,EAASC,GACP,YAAhBN,EAAAA,QAASC,IAEyB,MAAlCa,EAAAA,SACgE,MAAhEA,EAAAA,QAA+BS,8BAE/BT,EAAAA,QAA+BS,8BAA8BlB,GAK/DC,EAAO,KAEX,GACF,EAoCAkB,iBAAgB,SACdC,EAEAC,GAEA,IAAMC,EAAkB5B,EAAWvB,IAAIiD,GACvC,OAA0B,MAAnBE,EACH,CAACzE,OAAM,WAAU,GAEjBf,EAAAA,QAAsBC,YAAYuF,EAAiBD,EACzD,EAOAE,sBAAqB,SAACC,IACpB,EAAAC,EAAAA,SAA6BD,EAAU,QACzC,EAKAE,uBAAsB,SACpBC,EACAC,GAGoB,QAAhBjC,EAAAA,QAASC,IAA8B,UAAdgC,IAI7B,EAAAF,EAAAA,wBAAuBC,EAAQC,EACjC,EAOAC,yBAAwB,SAACC,GACH,YAAhBnC,EAAAA,QAASC,GACmB,MAA9Ba,EAAAA,SAAAA,EAAAA,QAAgCoB,yBAAyBC,GAE5B,MAA7B5B,EAAAA,SAAAA,EAAAA,QAA+B2B,yBAAyBC,EAE5D,EAQAC,oCAAmC,SACjCD,EACAE,GAEoB,YAAhBrC,EAAAA,QAASC,GACmB,MAA9Ba,EAAAA,SAAAA,EAAAA,QAAgCoB,yBAAyBC,GAExB,MAA7B5B,EAAAA,SAAAA,EAAAA,QAA+B6B,oCACJ,MAA7B7B,EAAAA,SAAAA,EAAAA,QAA+B6B,oCAC7BD,EACAE,GAG2B,MAA7B9B,EAAAA,SAAAA,EAAAA,QAA+B2B,yBAAyBC,EAG9D,EAOAG,4BAA2B,SAACC,GAC1B,MAAoB,YAAhBvC,EAAAA,QAASC,GACJ,IAAIG,SAAQ,SAACC,EAASC,GACO,MAA9BQ,EAAAA,SAAAA,EAAAA,QAAgCwB,4BAClCxB,EAAAA,QAA+BwB,4BAC7BC,EACAlC,GAGFA,EAAQkC,EAEZ,IAEOnC,QAAQC,QAAQkC,EAE3B,GACArE,EAAAA,QAEagC,C,mGC1Zf,IAAAL,EAA2E,SAAA1B,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAArC,QAAAqC,GAAA,IAAAG,EAAAC,EAAAH,GAAA,GAAAE,GAAAA,EAAAxB,IAAAqB,GAAA,OAAAG,EAAAE,IAAAL,GAAA,IAAAM,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAZ,EAAA,eAAAY,GAAA,GAAAC,eAAAC,KAAAd,EAAAY,GAAA,KAAAG,EAAAP,EAAAC,OAAAE,yBAAAX,EAAAY,GAAA,KAAAG,IAAAA,EAAAV,KAAAU,EAAAjC,KAAA2B,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAAZ,EAAAY,EAAA,QAAAN,EAAA3C,QAAAqC,EAAAG,GAAAA,EAAArB,IAAAkB,EAAAM,GAAAA,CAAA,CAA3EU,CAAA5D,EAAA,QAA2E,SAAAgD,EAAAJ,GAAA,sBAAAiB,QAAA,gBAAAhB,EAAA,IAAAgB,QAAAd,EAAA,IAAAc,QAAA,OAAAb,EAAA,SAAAJ,GAAA,OAAAA,EAAAG,EAAAF,CAAA,GAAAD,EAAA,CAA3ES,OAAAS,KAAAQ,GAAAP,SAAA,SAAAtD,GAAA,YAAAA,GAAA,eAAAA,IAAA4C,OAAAW,UAAAP,eAAAC,KAAAO,EAAAxD,IAAAA,KAAAkC,GAAAA,EAAAlC,KAAA6D,EAAA7D,IAAA4C,OAAAC,eAAAX,EAAAlC,EAAA,CAAAyD,YAAA,EAAAjB,IAAA,kBAAAqB,EAAA7D,EAAA,QAA2EkC,EAAAA,QAE5DsE,EAAAA,O,iGCFf,IAAA1C,EAA8E,SAAA3B,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAArC,QAAAqC,GAAA,IAAAG,EAAAC,EAAAH,GAAA,GAAAE,GAAAA,EAAAxB,IAAAqB,GAAA,OAAAG,EAAAE,IAAAL,GAAA,IAAAM,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAZ,EAAA,eAAAY,GAAA,GAAAC,eAAAC,KAAAd,EAAAY,GAAA,KAAAG,EAAAP,EAAAC,OAAAE,yBAAAX,EAAAY,GAAA,KAAAG,IAAAA,EAAAV,KAAAU,EAAAjC,KAAA2B,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAAZ,EAAAY,EAAA,QAAAN,EAAA3C,QAAAqC,EAAAG,GAAAA,EAAArB,IAAAkB,EAAAM,GAAAA,CAAA,CAA9EU,CAAA5D,EAAA,QAA8E,SAAAgD,EAAAJ,GAAA,sBAAAiB,QAAA,gBAAAhB,EAAA,IAAAgB,QAAAd,EAAA,IAAAc,QAAA,OAAAb,EAAA,SAAAJ,GAAA,OAAAA,EAAAG,EAAAF,CAAA,GAAAD,EAAA,CAA9ES,OAAAS,KAAAS,GAAAR,SAAA,SAAAtD,GAAA,YAAAA,GAAA,eAAAA,IAAA4C,OAAAW,UAAAP,eAAAC,KAAAO,EAAAxD,IAAAA,KAAAkC,GAAAA,EAAAlC,KAAA8D,EAAA9D,IAAA4C,OAAAC,eAAAX,EAAAlC,EAAA,CAAAyD,YAAA,EAAAjB,IAAA,kBAAAsB,EAAA9D,EAAA,QAA8EkC,EAAAA,QAE/DuE,EAAAA,O,uCCFfC,EAAApH,EAAAC,EAAA,QACAoH,EAAArH,EAAAC,EAAA,QAwBA0C,EAAOC,QAlBP,SACE2D,EACAI,GAEkB,UAAdA,IACF,EAAAW,EAAAA,SAAWC,EAAAA,QAAUd,uBAArB,CACEF,EACAgB,EAAAA,QAAUC,eAAeC,wBAAwBC,iBAGnC,UAAdf,IACF,EAAAW,EAAAA,SAAWC,EAAAA,QAAUd,uBAArB,CACEF,EACAgB,EAAAA,QAAUC,eAAeC,wBAAwBE,gBAGvD,C,yCCvBa3H,EAAAC,EAAA,OAAA2C,EAAAA,OAAA,MAAAgF,EAAA5H,EAAAC,EAAA,QAIb4H,EAAA7H,EAAAC,EAAA,QACAoE,EAAArE,EAAAC,EAAA,QACA6H,EAAA9H,EAAAC,EAAA,QACA8H,EAA+B,SAAAlF,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAArC,QAAAqC,GAAA,IAAAG,EAAAC,EAAAH,GAAA,GAAAE,GAAAA,EAAAxB,IAAAqB,GAAA,OAAAG,EAAAE,IAAAL,GAAA,IAAAM,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAZ,EAAA,eAAAY,GAAA,GAAAC,eAAAC,KAAAd,EAAAY,GAAA,KAAAG,EAAAP,EAAAC,OAAAE,yBAAAX,EAAAY,GAAA,KAAAG,IAAAA,EAAAV,KAAAU,EAAAjC,KAAA2B,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAAZ,EAAAY,EAAA,QAAAN,EAAA3C,QAAAqC,EAAAG,GAAAA,EAAArB,IAAAkB,EAAAM,GAAAA,CAAA,CAA/BU,CAAA5D,EAAA,QAA+B+H,EAAA/H,EAAA,OAAAgI,EAAA,4EAAAhF,EAAAJ,GAAA,sBAAAiB,QAAA,gBAAAhB,EAAA,IAAAgB,QAAAd,EAAA,IAAAc,QAAA,OAAAb,EAAA,SAAAJ,GAAA,OAAAA,EAAAG,EAAAF,CAAA,GAAAD,EAAA,CAE/B,IAAMqF,EACY,YAAhBxD,EAAAA,QAASC,GACL1E,EAAQ,OACRA,EAAAA,OAAAA,QAqIAkI,EAGFJ,EAAMK,YAhGgB,SAAHrG,EAUrBsG,GACI,IACAC,EACAC,EAFDC,EAAAzG,EATD0G,UAAAA,OAAS,IAAAD,GAAOA,EAAAE,EAAA3G,EAChB4G,MAAAA,OAAK,IAAAD,EAAmB,QAAhBhE,EAAAA,QAASC,GAzCR,UAyC8B,KAAI+D,EAAAE,EAAA7G,EAC3C8G,iBAAAA,OAAgB,IAAAD,GAAOA,EACvBE,EAAQ/G,EAAR+G,SAAQC,EAAAhH,EACRiH,KAAAA,OAAI,IAAAD,EAAG,QAAOA,EACdE,EAAKlH,EAALkH,MACGC,GAAS,EAAAtB,EAAApH,SAAAuB,EAAAkG,GAOd,OAAQe,GACN,IAAK,QACHV,EAAYa,EAAOC,UACnBb,EAAW,QACX,MACF,IAAK,QACHD,EAAYa,EAAOE,UACnBd,EAAW,QACX,MACF,QACED,EAAY,CAACgB,OAAQN,EAAMO,MAAOP,GAItC,IAAMQ,EAAWlG,OAAAmG,OAAA,CACfhB,UAAAA,EACAE,MAAAA,EACAE,iBAAAA,GACGK,EAAU,CACbQ,IAAKrB,EACLY,MAAOX,EACPU,KAAMT,IAQR,OACE,EAAAP,EAAA2B,KAAC7B,EAAAtH,QAAI,CACHsI,SAAUA,EACVG,MAAOW,EAAAA,QAAWC,QAAQV,EAAOW,UAAWb,GAAOc,SAClC,YAAhBrF,EAAAA,QAASC,IAER,EAAAqD,EAAA2B,KAACzB,EAAyB5E,OAAAmG,OAAA,GAAKD,EAXhB,CACnBQ,UAAW,SACXC,eAAe,MAcX,EAAAjC,EAAA2B,KAACzB,EAAyB5E,OAAAmG,OAAA,GAAKD,KAIvC,IAsCArB,EAAyB+B,YAAc,oBAEvC,IAAMf,EAASS,EAAAA,QAAWO,OAAO,CAC/BL,UAAW,CACTM,WAAY,SACZC,eAAgB,UAElBjB,UAAW,CACTG,MAAO,GACPD,OAAQ,IAEVD,UAAW,CACTE,MAAO,GACPD,OAAQ,MAET1G,EAAAA,EAEYuF,C,mGCtKf,IAAAmC,EAA2F,SAAAzH,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAArC,QAAAqC,GAAA,IAAAG,EAAAC,EAAAH,GAAA,GAAAE,GAAAA,EAAAxB,IAAAqB,GAAA,OAAAG,EAAAE,IAAAL,GAAA,IAAAM,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAZ,EAAA,eAAAY,GAAA,GAAAC,eAAAC,KAAAd,EAAAY,GAAA,KAAAG,EAAAP,EAAAC,OAAAE,yBAAAX,EAAAY,GAAA,KAAAG,IAAAA,EAAAV,KAAAU,EAAAjC,KAAA2B,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAAZ,EAAAY,EAAA,QAAAN,EAAA3C,QAAAqC,EAAAG,GAAAA,EAAArB,IAAAkB,EAAAM,GAAAA,CAAA,CAA3FU,CAAA5D,EAAA,QAA2F,SAAAgD,EAAAJ,GAAA,sBAAAiB,QAAA,gBAAAhB,EAAA,IAAAgB,QAAAd,EAAA,IAAAc,QAAA,OAAAb,EAAA,SAAAJ,GAAA,OAAAA,EAAAG,EAAAF,CAAA,GAAAD,EAAA,CAA3FS,OAAAS,KAAAuG,GAAAtG,SAAA,SAAAtD,GAAA,YAAAA,GAAA,eAAAA,IAAA4C,OAAAW,UAAAP,eAAAC,KAAAO,EAAAxD,IAAAA,KAAAkC,GAAAA,EAAAlC,KAAA4J,EAAA5J,IAAA4C,OAAAC,eAAAX,EAAAlC,EAAA,CAAAyD,YAAA,EAAAjB,IAAA,kBAAAoH,EAAA5J,EAAA,QAA2FkC,EAAAA,QAE5E2H,EAAAA,O,yCCFFvK,EAAAC,EAAA,OAAA2C,EAAAA,OAAA,EAUb,IAAAiF,EAAA7H,EAAAC,EAAA,QACAuK,EAAAxK,EAAAC,EAAA,QACAoE,EAAArE,EAAAC,EAAA,QACAwK,EAAAzK,EAAAC,EAAA,QACAyK,EAAA1K,EAAAC,EAAA,QACA6H,EAAA9H,EAAAC,EAAA,QACA0K,EAAA3K,EAAAC,EAAA,QAC+B+H,GAAA,SAAAnF,EAAAC,GAAA,IAAAA,GAAAD,GAAAA,EAAAE,WAAA,OAAAF,EAAA,UAAAA,GAAA,iBAAAA,GAAA,mBAAAA,EAAA,OAAArC,QAAAqC,GAAA,IAAAG,EAAAC,EAAAH,GAAA,GAAAE,GAAAA,EAAAxB,IAAAqB,GAAA,OAAAG,EAAAE,IAAAL,GAAA,IAAAM,EAAA,CAAAC,UAAA,MAAAC,EAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,QAAAC,KAAAZ,EAAA,eAAAY,GAAA,GAAAC,eAAAC,KAAAd,EAAAY,GAAA,KAAAG,EAAAP,EAAAC,OAAAE,yBAAAX,EAAAY,GAAA,KAAAG,IAAAA,EAAAV,KAAAU,EAAAjC,KAAA2B,OAAAC,eAAAJ,EAAAM,EAAAG,GAAAT,EAAAM,GAAAZ,EAAAY,EAAA,CAAAN,EAAA3C,QAAAqC,EAAAG,GAAAA,EAAArB,IAAAkB,EAAAM,EAAA,CAA/BU,CAAA5D,EAAA,QAA+BA,EAAA,iBAAAgD,EAAAJ,GAAA,sBAAAiB,QAAA,gBAAAhB,EAAA,IAAAgB,QAAAd,EAAA,IAAAc,QAAA,OAAAb,EAAA,SAAAJ,GAAA,OAAAA,EAAAG,EAAAF,CAAA,GAAAD,EAAA,CA+P/B,IAAM+H,EAA+C,SAACC,GAAwB,IAADC,EAAAC,EAEzEC,EAyBEH,EAzBFG,mBACAC,EAwBEJ,EAxBFI,mBACaC,EAuBXL,EAvBF,aACgBM,EAsBdN,EAtBF,gBACiBO,EAqBfP,EArBF,iBACiBQ,EAoBfR,EApBF,iBACcS,EAmBZT,EAnBF,cACiBU,EAkBfV,EAlBF,iBACAW,EAiBEX,EAjBFW,0BACA7C,EAgBEkC,EAhBFlC,MACA8C,EAeEZ,EAfFY,QACAC,EAcEb,EAdFa,mBACAC,EAaEd,EAbFc,MACAC,EAYEf,EAZFe,oBACAC,EAWEhB,EAXFgB,cACAC,EAUEjB,EAVFiB,iBACAC,EASElB,EATFkB,cACAC,EAQEnB,EARFmB,eACAC,EAOEpB,EAPFoB,YACAC,EAMErB,EANFqB,OACAC,EAKEtB,EALFsB,WACAC,EAIEvB,EAJFuB,qBACAC,EAGExB,EAHFwB,kBACAC,EAEEzB,EAFFyB,sBACAC,EACE1B,EADF0B,sBAEIC,EAAqC,CAACrD,EAAOsD,QAC7CC,EAAmC,CAACvD,EAAOwD,MAC7ChE,IACkB,QAAhBjE,EAAAA,QAASC,GACX+H,EAAWE,KAAK,CAACjE,MAAOA,IAExB6D,EAAaI,KAAK,CAACC,gBAAiBlE,KAIxC,IAAImE,EAAsB,CACxBC,KAAc,MAAR7B,EAAAA,EAA8B,MAAlBD,OAAkB,EAAlBA,EAAoB8B,KACtCC,QAAoB,MAAX7B,EAAAA,EAAiC,MAAlBF,OAAkB,EAAlBA,EAAoB+B,QAC5CC,SAAsB,MAAZ7B,EAAAA,EAAkC,MAAlBH,OAAkB,EAAlBA,EAAoBgC,SAC9CC,SAAsB,MAAZ7B,EAAAA,EAAkC,MAAlBJ,OAAkB,EAAlBA,EAAoBiC,SAC9CC,SAAsB,MAAZ5B,EAAAA,EAAkC,MAAlBN,OAAkB,EAAlBA,EAAoBkC,UAG1CF,EACc,MAAlBpC,EAAMoC,SAAmBpC,EAAMoC,SAA8B,OAAtBnC,EAAGgC,QAAmB,EAAnBhC,EAAqBmC,SAEjEH,EACEG,KAAgC,OAAxBlC,EAAK+B,QAAmB,EAAnB/B,EAAqBkC,UAAQ3J,OAAAmG,OAAA,GAClCqD,EAAoB,CAACG,SAAAA,IACzBH,EAEFG,IACFT,EAAaI,KAAKzD,EAAOiE,gBACzBV,EAAWE,KAAKzD,EAAOkE,gBAGzB,EAAAC,EAAAA,SACmB,iBAAV3B,EACP,+CAEF,IAAM4B,EACY,YAAhB7I,EAAAA,QAASC,GAAmBgH,EAAM6B,cAAgB7B,EAC9C8B,EACY,YAAhB/I,EAAAA,QAASC,GAAmB+I,EAAAA,QAA0BC,EAAAA,QAGlDC,EAC0B,OAA9BpC,EACI,sBACAA,EAEN,OACE,EAAAxD,EAAA2B,KAAC8D,EAAS,CACRtB,WAAYA,EACZC,qBAAsBA,EACtBG,sBAAuBA,EACvBvB,mBAAoBM,GAAaN,EACjCqB,kBAAmBA,EACnBC,sBAAuBA,EACvBuB,kBAAkB,SAClB5C,mBAAoB6B,EACpBtB,0BAA2BoC,EAC3BhC,oBAAqBA,EACrBC,cAAeA,EACfC,iBAAkBA,EAClBC,cAAeA,EACfC,eAAgBA,EAChBC,YAAaA,EACbC,OAAQA,EACRe,SAAUA,EACVxB,QAASA,EACTC,mBAAoBA,EAAmB3B,UACvC,EAAA/B,EAAA2B,KAAC7B,EAAAtH,QAAI,CAACyI,MAAOuD,EAAazC,UACxB,EAAA/B,EAAA2B,KAACa,EAAAhK,QAAI,CAACyI,MAAOyD,EAAYO,SAAUA,EAASlD,SACzCwD,OAKX,EAEA3C,EAAOV,YAAc,SAErB,IAAMf,EAASS,EAAAA,QAAWO,OAAO,CAC/BsC,OAAQ/H,EAAAA,QAASoJ,OAAO,CACtBC,IAAK,CAAC,EACNC,QAAS,CACPC,UAAW,EAEXpB,gBAAiB,UACjBqB,aAAc,KAGlBvB,KAAIrJ,OAAAmG,OAAA,CACF0E,UAAW,SACXC,OAAQ,GACL1J,EAAAA,QAASoJ,OAAO,CACjBC,IAAK,CAEHpF,MAAO,UACP0F,SAAU,IAEZL,QAAS,CACPrF,MAAO,QACP2F,WAAY,UAIlBlB,eAAgB1I,EAAAA,QAASoJ,OAAO,CAC9BC,IAAK,CAAC,EACNC,QAAS,CACPC,UAAW,EACXpB,gBAAiB,aAGrBQ,aAAc3I,EAAAA,QAASoJ,OAAO,CAC5BC,IAAK,CACHpF,MAAO,WAETqF,QAAS,CACPrF,MAAO,eAGV/F,EAAAA,EAEYgI,C","sources":["webpack:///./node_modules/react-native/Libraries/BugReporting/BugReporting.js","webpack:///./node_modules/react-native/Libraries/BugReporting/NativeBugReporting.js","webpack:///./node_modules/react-native/Libraries/BugReporting/dumpReactTree.js","webpack:///./node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js","webpack:///./node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityInfo.js","webpack:///./node_modules/react-native/Libraries/Components/AccessibilityInfo/NativeAccessibilityManager.js","webpack:///./node_modules/react-native/Libraries/Components/AccessibilityInfo/legacySendAccessibilityEvent.android.js","webpack:///./node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js","webpack:///./node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicatorViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/Button.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeRedBox from '../NativeModules/specs/NativeRedBox';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport NativeBugReporting from './NativeBugReporting';\n\ntype ExtraData = {[key: string]: string, ...};\ntype SourceCallback = () => string;\ntype DebugData = {\n  extras: ExtraData,\n  files: ExtraData,\n  ...\n};\n\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', () =>\n    require('./dumpReactTree')(),\n  );\n}\n\n/**\n * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report\n * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows\n * that are currently visible on screen. Components should also remember to call `remove()` on the object that is\n * returned by `addSource` when they are unmounted.\n */\nclass BugReporting {\n  static _extraSources: Map<string, SourceCallback> = new Map();\n  static _fileSources: Map<string, SourceCallback> = new Map();\n  static _subscription: ?EventSubscription = null;\n  static _redboxSubscription: ?EventSubscription = null;\n\n  static _maybeInit() {\n    if (!BugReporting._subscription) {\n      BugReporting._subscription = RCTDeviceEventEmitter.addListener(\n        'collectBugExtraData',\n        // $FlowFixMe[method-unbinding]\n        BugReporting.collectExtraData,\n        null,\n      );\n      defaultExtras();\n    }\n\n    if (!BugReporting._redboxSubscription) {\n      BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener(\n        'collectRedBoxExtraData',\n        // $FlowFixMe[method-unbinding]\n        BugReporting.collectExtraData,\n        null,\n      );\n    }\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void, ...} {\n    return this._addSource(key, callback, BugReporting._extraSources);\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addFileSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void, ...} {\n    return this._addSource(key, callback, BugReporting._fileSources);\n  }\n\n  static _addSource(\n    key: string,\n    callback: SourceCallback,\n    source: Map<string, SourceCallback>,\n  ): {remove: () => void, ...} {\n    BugReporting._maybeInit();\n    if (source.has(key)) {\n      console.warn(\n        `BugReporting.add* called multiple times for same key '${key}'`,\n      );\n    }\n    source.set(key, callback);\n    return {\n      remove: () => {\n        source.delete(key);\n      },\n    };\n  }\n\n  /**\n   * This can be called from a native bug reporting flow, or from JS code.\n   *\n   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`\n   * after collecting `extraData`.\n   */\n  static collectExtraData(): DebugData {\n    const extraData: ExtraData = {};\n    for (const [key, callback] of BugReporting._extraSources) {\n      extraData[key] = callback();\n    }\n    const fileData: ExtraData = {};\n    for (const [key, callback] of BugReporting._fileSources) {\n      fileData[key] = callback();\n    }\n\n    if (NativeBugReporting != null && NativeBugReporting.setExtraData != null) {\n      NativeBugReporting.setExtraData(extraData, fileData);\n    }\n\n    if (NativeRedBox != null && NativeRedBox.setExtraData != null) {\n      NativeRedBox.setExtraData(extraData, 'From BugReporting.js');\n    }\n\n    return {extras: extraData, files: fileData};\n  }\n}\n\nmodule.exports = BugReporting;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeBugReporting';\nimport NativeBugReporting from '../../src/private/specs/modules/NativeBugReporting';\nexport default NativeBugReporting;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/*\nconst getReactData = require('getReactData');\n\nconst INDENTATION_SIZE = 2;\nconst MAX_DEPTH = 2;\nconst MAX_STRING_LENGTH = 50;\n*/\n\n/**\n * Dump all React Native root views and their content. This function tries\n * it best to get the content but ultimately relies on implementation details\n * of React and will fail in future versions.\n */\nfunction dumpReactTree(): string {\n  try {\n    return getReactTree();\n  } catch (e) {\n    return 'Failed to dump react tree: ' + e;\n  }\n}\n\nfunction getReactTree() {\n  // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684\n  return (\n    'React tree dumps have been temporarily disabled while React is ' +\n    'upgraded to Fiber.'\n  );\n  /*\n  let output = '';\n  const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);\n  for (const rootId of rootIds) {\n    const instance = ReactNativeMount._instancesByContainerID[rootId];\n    output += `============ Root ID: ${rootId} ============\\n`;\n    output += dumpNode(instance, 0);\n    output += `============ End root ID: ${rootId} ============\\n`;\n  }\n  return output;\n*/\n}\n\n/*\nfunction dumpNode(node: Object, indentation: number) {\n  const data = getReactData(node);\n  if (data.nodeType === 'Text') {\n    return indent(indentation) + data.text + '\\n';\n  } else if (data.nodeType === 'Empty') {\n    return '';\n  }\n  let output = indent(indentation) + `<${data.name}`;\n  if (data.nodeType === 'Composite') {\n    for (const propName of Object.getOwnPropertyNames(data.props || {})) {\n      if (isNormalProp(propName)) {\n        try {\n          const value = convertValue(data.props[propName]);\n          if (value) {\n            output += ` ${propName}=${value}`;\n          }\n        } catch (e) {\n          const message = `[Failed to get property: ${e}]`;\n          output += ` ${propName}=${message}`;\n        }\n      }\n    }\n  }\n  let childOutput = '';\n  for (const child of data.children || []) {\n    childOutput += dumpNode(child, indentation + 1);\n  }\n\n  if (childOutput) {\n    output += '>\\n' + childOutput + indent(indentation) + `</${data.name}>\\n`;\n  } else {\n    output += ' />\\n';\n  }\n\n  return output;\n}\n\nfunction isNormalProp(name: string): boolean {\n  switch (name) {\n    case 'children':\n    case 'key':\n    case 'ref':\n      return false;\n    default:\n      return true;\n  }\n}\n\nfunction convertObject(object: Object, depth: number) {\n  if (depth >= MAX_DEPTH) {\n    return '[...omitted]';\n  }\n  let output = '{';\n  let first = true;\n  for (const key of Object.getOwnPropertyNames(object)) {\n    if (!first) {\n      output += ', ';\n    }\n    output += `${key}: ${convertValue(object[key], depth + 1)}`;\n    first = false;\n  }\n  return output + '}';\n}\n\nfunction convertValue(value, depth = 0): ?string {\n  if (!value) {\n    return null;\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(possiblyEllipsis(value).replace('\\n', '\\\\n'));\n    case 'boolean':\n    case 'number':\n      return JSON.stringify(value);\n    case 'function':\n      return '[function]';\n    case 'object':\n      return convertObject(value, depth);\n    default:\n      return null;\n  }\n}\n\nfunction possiblyEllipsis(value: string) {\n  if (value.length > MAX_STRING_LENGTH) {\n    return value.slice(0, MAX_STRING_LENGTH) + '...';\n  } else {\n    return value;\n  }\n}\n\nfunction indent(size: number) {\n  return ' '.repeat(size * INDENTATION_SIZE);\n}\n*/\n\nmodule.exports = dumpReactTree;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\nimport type {ElementRef} from 'react';\n\nimport RCTDeviceEventEmitter from '../../EventEmitter/RCTDeviceEventEmitter';\nimport {sendAccessibilityEvent} from '../../ReactNative/RendererProxy';\nimport Platform from '../../Utilities/Platform';\nimport legacySendAccessibilityEvent from './legacySendAccessibilityEvent';\nimport NativeAccessibilityInfoAndroid from './NativeAccessibilityInfo';\nimport NativeAccessibilityManagerIOS from './NativeAccessibilityManager';\n\n// Events that are only supported on Android.\ntype AccessibilityEventDefinitionsAndroid = {\n  accessibilityServiceChanged: [boolean],\n};\n\n// Events that are only supported on iOS.\ntype AccessibilityEventDefinitionsIOS = {\n  announcementFinished: [{announcement: string, success: boolean}],\n  boldTextChanged: [boolean],\n  grayscaleChanged: [boolean],\n  invertColorsChanged: [boolean],\n  reduceTransparencyChanged: [boolean],\n};\n\ntype AccessibilityEventDefinitions = {\n  ...AccessibilityEventDefinitionsAndroid,\n  ...AccessibilityEventDefinitionsIOS,\n  change: [boolean], // screenReaderChanged\n  reduceMotionChanged: [boolean],\n  screenReaderChanged: [boolean],\n};\n\ntype AccessibilityEventTypes = 'click' | 'focus' | 'viewHoverEnter';\n\n// Mapping of public event names to platform-specific event names.\nconst EventNames: Map<\n  $Keys<AccessibilityEventDefinitions>,\n  string,\n> = Platform.OS === 'android'\n  ? new Map([\n      ['change', 'touchExplorationDidChange'],\n      ['reduceMotionChanged', 'reduceMotionDidChange'],\n      ['screenReaderChanged', 'touchExplorationDidChange'],\n      ['accessibilityServiceChanged', 'accessibilityServiceDidChange'],\n    ])\n  : new Map([\n      ['announcementFinished', 'announcementFinished'],\n      ['boldTextChanged', 'boldTextChanged'],\n      ['change', 'screenReaderChanged'],\n      ['grayscaleChanged', 'grayscaleChanged'],\n      ['invertColorsChanged', 'invertColorsChanged'],\n      ['reduceMotionChanged', 'reduceMotionChanged'],\n      ['reduceTransparencyChanged', 'reduceTransparencyChanged'],\n      ['screenReaderChanged', 'screenReaderChanged'],\n    ]);\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader\n * that is currently active. The `AccessibilityInfo` API is designed for this\n * purpose. You can use it to query the current state of the screen reader as\n * well as to register to be notified when the state of the screen reader\n * changes.\n *\n * See https://reactnative.dev/docs/accessibilityinfo\n */\nconst AccessibilityInfo = {\n  /**\n   * Query whether bold text is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when bold text is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isBoldTextEnabled\n   */\n  isBoldTextEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentBoldTextState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether grayscale is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when grayscale is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isGrayscaleEnabled\n   */\n  isGrayscaleEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentGrayscaleState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether inverted colors are currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when invert color is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isInvertColorsEnabled\n   */\n  isInvertColorsEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentInvertColorsState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether reduced motion is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a reduce motion is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isReduceMotionEnabled\n   */\n  isReduceMotionEnabled(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        if (NativeAccessibilityInfoAndroid != null) {\n          NativeAccessibilityInfoAndroid.isReduceMotionEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentReduceMotionState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when  prefer cross-fade transitions is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#prefersCrossFadeTransitions\n   */\n  prefersCrossFadeTransitions(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        if (\n          NativeAccessibilityManagerIOS?.getCurrentPrefersCrossFadeTransitionsState !=\n          null\n        ) {\n          NativeAccessibilityManagerIOS.getCurrentPrefersCrossFadeTransitionsState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Query whether reduced transparency is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a reduce transparency is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isReduceTransparencyEnabled\n   */\n  isReduceTransparencyEnabled(): Promise<boolean> {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(false);\n    } else {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentReduceTransparencyState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      });\n    }\n  },\n\n  /**\n   * Query whether a screen reader is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#isScreenReaderEnabled\n   */\n  isScreenReaderEnabled(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        if (NativeAccessibilityInfoAndroid != null) {\n          NativeAccessibilityInfoAndroid.isTouchExplorationEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        if (NativeAccessibilityManagerIOS != null) {\n          NativeAccessibilityManagerIOS.getCurrentVoiceOverState(\n            resolve,\n            reject,\n          );\n        } else {\n          reject(null);\n        }\n      }\n    });\n  },\n\n  /**\n   * Query whether Accessibility Service is currently enabled.\n   *\n   * Returns a promise which resolves to a boolean.\n   * The result is `true` when any service is enabled and `false` otherwise.\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo/#isaccessibilityserviceenabled-android\n   */\n  isAccessibilityServiceEnabled(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (Platform.OS === 'android') {\n        if (\n          NativeAccessibilityInfoAndroid != null &&\n          NativeAccessibilityInfoAndroid.isAccessibilityServiceEnabled != null\n        ) {\n          NativeAccessibilityInfoAndroid.isAccessibilityServiceEnabled(resolve);\n        } else {\n          reject(null);\n        }\n      } else {\n        reject(null);\n      }\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a reduce\n   *   motion is enabled (or when \"Transition Animation Scale\" in \"Developer options\" is\n   *   \"Animation off\") and `false` otherwise.\n   * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument\n   *   to the event handler is a boolean. The boolean is `true` when a screen\n   *   reader is enabled and `false` otherwise.\n   *\n   * These events are only supported on iOS:\n   *\n   * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a bold text\n   *   is enabled and `false` otherwise.\n   * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.\n   *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale\n   *   is enabled and `false` otherwise.\n   * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle\n   *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert\n   *   colors is enabled and `false` otherwise.\n   * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency\n   *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`\n   *   when a reduce transparency is enabled and `false` otherwise.\n   * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n   *   finished making an announcement. The argument to the event handler is a\n   *   dictionary with these keys:\n   *     - `announcement`: The string announced by the screen reader.\n   *     - `success`: A boolean indicating whether the announcement was\n   *       successfully made.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener\n   */\n  addEventListener<K: $Keys<AccessibilityEventDefinitions>>(\n    eventName: K,\n    // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)\n    handler: (...$ElementType<AccessibilityEventDefinitions, K>) => void,\n  ): EventSubscription {\n    const deviceEventName = EventNames.get(eventName);\n    return deviceEventName == null\n      ? {remove(): void {}}\n      : // $FlowFixMe[incompatible-call]\n        RCTDeviceEventEmitter.addListener(deviceEventName, handler);\n  },\n\n  /**\n   * Set accessibility focus to a React component.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#setaccessibilityfocus\n   */\n  setAccessibilityFocus(reactTag: number): void {\n    legacySendAccessibilityEvent(reactTag, 'focus');\n  },\n\n  /**\n   * Send a named accessibility event to a HostComponent.\n   */\n  sendAccessibilityEvent(\n    handle: ElementRef<HostComponent<mixed>>,\n    eventType: AccessibilityEventTypes,\n  ) {\n    // iOS only supports 'focus' event types\n    if (Platform.OS === 'ios' && eventType === 'click') {\n      return;\n    }\n    // route through React renderer to distinguish between Fabric and non-Fabric handles\n    sendAccessibilityEvent(handle, eventType);\n  },\n\n  /**\n   * Post a string to be announced by the screen reader.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#announceforaccessibility\n   */\n  announceForAccessibility(announcement: string): void {\n    if (Platform.OS === 'android') {\n      NativeAccessibilityInfoAndroid?.announceForAccessibility(announcement);\n    } else {\n      NativeAccessibilityManagerIOS?.announceForAccessibility(announcement);\n    }\n  },\n\n  /**\n   * Post a string to be announced by the screen reader.\n   * - `announcement`: The string announced by the screen reader.\n   * - `options`: An object that configures the reading options.\n   *   - `queue`: The announcement will be queued behind existing announcements. iOS only.\n   */\n  announceForAccessibilityWithOptions(\n    announcement: string,\n    options: {queue?: boolean},\n  ): void {\n    if (Platform.OS === 'android') {\n      NativeAccessibilityInfoAndroid?.announceForAccessibility(announcement);\n    } else {\n      if (NativeAccessibilityManagerIOS?.announceForAccessibilityWithOptions) {\n        NativeAccessibilityManagerIOS?.announceForAccessibilityWithOptions(\n          announcement,\n          options,\n        );\n      } else {\n        NativeAccessibilityManagerIOS?.announceForAccessibility(announcement);\n      }\n    }\n  },\n\n  /**\n   * Get the recommended timeout for changes to the UI needed by this user.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo#getrecommendedtimeoutmillis\n   */\n  getRecommendedTimeoutMillis(originalTimeout: number): Promise<number> {\n    if (Platform.OS === 'android') {\n      return new Promise((resolve, reject) => {\n        if (NativeAccessibilityInfoAndroid?.getRecommendedTimeoutMillis) {\n          NativeAccessibilityInfoAndroid.getRecommendedTimeoutMillis(\n            originalTimeout,\n            resolve,\n          );\n        } else {\n          resolve(originalTimeout);\n        }\n      });\n    } else {\n      return Promise.resolve(originalTimeout);\n    }\n  },\n};\n\nexport default AccessibilityInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeAccessibilityInfo';\nimport NativeAccessibilityInfo from '../../../src/private/specs/modules/NativeAccessibilityInfo';\nexport default NativeAccessibilityInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeAccessibilityManager';\nimport NativeAccessibilityManager from '../../../src/private/specs/modules/NativeAccessibilityManager';\nexport default NativeAccessibilityManager;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport UIManager from '../../ReactNative/UIManager';\nimport nullthrows from 'nullthrows';\n\n/**\n * This is a function exposed to the React Renderer that can be used by the\n * pre-Fabric renderer to emit accessibility events to pre-Fabric nodes.\n */\nfunction legacySendAccessibilityEvent(\n  reactTag: number,\n  eventType: string,\n): void {\n  if (eventType === 'focus') {\n    nullthrows(UIManager.sendAccessibilityEvent)(\n      reactTag,\n      UIManager.getConstants().AccessibilityEventTypes.typeViewFocused,\n    );\n  }\n  if (eventType === 'click') {\n    nullthrows(UIManager.sendAccessibilityEvent)(\n      reactTag,\n      UIManager.getConstants().AccessibilityEventTypes.typeViewClicked,\n    );\n  }\n}\n\nmodule.exports = legacySendAccessibilityEvent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport StyleSheet, {type ColorValue} from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport View from '../View/View';\nimport * as React from 'react';\n\nconst PlatformActivityIndicator =\n  Platform.OS === 'android'\n    ? require('../ProgressBarAndroid/ProgressBarAndroid')\n    : require('./ActivityIndicatorViewNativeComponent').default;\n\nconst GRAY = '#999999';\n\ntype IndicatorSize = number | 'small' | 'large';\n\ntype IOSProps = $ReadOnly<{|\n  /**\n    Whether the indicator should hide when not animating.\n\n    @platform ios\n  */\n  hidesWhenStopped?: ?boolean,\n|}>;\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n\n  /**\n   \tWhether to show the indicator (`true`) or hide it (`false`).\n   */\n  animating?: ?boolean,\n\n  /**\n    The foreground color of the spinner.\n\n    @default {@platform android} `null` (system accent default color)\n    @default {@platform ios} '#999999'\n  */\n  color?: ?ColorValue,\n\n  /**\n    Size of the indicator.\n\n    @type enum(`'small'`, `'large'`)\n    @type {@platform android} number\n  */\n  size?: ?IndicatorSize,\n|}>;\n\nconst ActivityIndicator = (\n  {\n    animating = true,\n    color = Platform.OS === 'ios' ? GRAY : null,\n    hidesWhenStopped = true,\n    onLayout,\n    size = 'small',\n    style,\n    ...restProps\n  }: Props,\n  forwardedRef?: any,\n) => {\n  let sizeStyle;\n  let sizeProp;\n\n  switch (size) {\n    case 'small':\n      sizeStyle = styles.sizeSmall;\n      sizeProp = 'small';\n      break;\n    case 'large':\n      sizeStyle = styles.sizeLarge;\n      sizeProp = 'large';\n      break;\n    default:\n      sizeStyle = {height: size, width: size};\n      break;\n  }\n\n  const nativeProps = {\n    animating,\n    color,\n    hidesWhenStopped,\n    ...restProps,\n    ref: forwardedRef,\n    style: sizeStyle,\n    size: sizeProp,\n  };\n\n  const androidProps = {\n    styleAttr: 'Normal',\n    indeterminate: true,\n  };\n\n  return (\n    <View\n      onLayout={onLayout}\n      style={StyleSheet.compose(styles.container, style)}>\n      {Platform.OS === 'android' ? (\n        // $FlowFixMe[prop-missing] Flow doesn't know when this is the android component\n        <PlatformActivityIndicator {...nativeProps} {...androidProps} />\n      ) : (\n        /* $FlowFixMe[prop-missing] (>=0.106.0 site=react_native_android_fb) This comment\n         * suppresses an error found when Flow v0.106 was deployed. To see the\n         * error, delete this comment and run Flow. */\n        <PlatformActivityIndicator {...nativeProps} />\n      )}\n    </View>\n  );\n};\n\n/**\n  Displays a circular loading indicator.\n\n  ```SnackPlayer name=ActivityIndicator%20Example\n  import React from 'react';\n  import {ActivityIndicator, StyleSheet, View} from 'react-native';\n\n  const App = () => (\n    <View style={[styles.container, styles.horizontal]}>\n      <ActivityIndicator />\n      <ActivityIndicator size=\"large\" />\n      <ActivityIndicator size=\"small\" color=\"#0000ff\" />\n      <ActivityIndicator size=\"large\" color=\"#00ff00\" />\n    </View>\n  );\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n    },\n    horizontal: {\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      padding: 10,\n    },\n  });\n\n  export default App;\n```\n*/\n\nconst ActivityIndicatorWithRef: React.AbstractComponent<\n  Props,\n  HostComponent<mixed>,\n> = React.forwardRef(ActivityIndicator);\nActivityIndicatorWithRef.displayName = 'ActivityIndicator';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  sizeSmall: {\n    width: 20,\n    height: 20,\n  },\n  sizeLarge: {\n    width: 36,\n    height: 36,\n  },\n});\n\nexport default ActivityIndicatorWithRef;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/ActivityIndicatorViewNativeComponent';\nimport ActivityIndicatorViewNativeComponent from '../../../src/private/specs/components/ActivityIndicatorViewNativeComponent';\nexport default ActivityIndicatorViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type {TextStyleProp, ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityState,\n} from './View/ViewAccessibility';\n\nimport StyleSheet, {type ColorValue} from '../StyleSheet/StyleSheet';\nimport Text from '../Text/Text';\nimport Platform from '../Utilities/Platform';\nimport TouchableNativeFeedback from './Touchable/TouchableNativeFeedback';\nimport TouchableOpacity from './Touchable/TouchableOpacity';\nimport View from './View/View';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\ntype ButtonProps = $ReadOnly<{|\n  /**\n    Text to display inside the button. On Android the given title will be\n    converted to the uppercased form.\n   */\n  title: string,\n\n  /**\n    Handler to be called when the user taps the button. The first function\n    argument is an event in form of [PressEvent](pressevent).\n   */\n  onPress: (event?: PressEvent) => mixed,\n\n  /**\n    If `true`, doesn't play system sound on touch.\n\n    @platform android\n\n    @default false\n   */\n  touchSoundDisabled?: ?boolean,\n\n  /**\n    Color of the text (iOS), or background color of the button (Android).\n\n    @default {@platform android} '#2196F3'\n    @default {@platform ios} '#007AFF'\n   */\n  color?: ?ColorValue,\n\n  /**\n    TV preferred focus.\n\n    @platform tv\n\n    @default false\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n    Designates the next view to receive focus when the user navigates down. See\n    the [Android documentation][android:nextFocusDown].\n\n    [android:nextFocusDown]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusDown\n\n    @platform android, tv\n   */\n  nextFocusDown?: ?number,\n\n  /**\n    Designates the next view to receive focus when the user navigates forward.\n    See the [Android documentation][android:nextFocusForward].\n\n    [android:nextFocusForward]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusForward\n\n    @platform android, tv\n   */\n  nextFocusForward?: ?number,\n\n  /**\n    Designates the next view to receive focus when the user navigates left. See\n    the [Android documentation][android:nextFocusLeft].\n\n    [android:nextFocusLeft]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusLeft\n\n    @platform android, tv\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n    Designates the next view to receive focus when the user navigates right. See\n    the [Android documentation][android:nextFocusRight].\n\n    [android:nextFocusRight]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusRight\n\n    @platform android, tv\n   */\n  nextFocusRight?: ?number,\n\n  /**\n    Designates the next view to receive focus when the user navigates up. See\n    the [Android documentation][android:nextFocusUp].\n\n    [android:nextFocusUp]:\n    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusUp\n\n    @platform android, tv\n   */\n  nextFocusUp?: ?number,\n\n  /**\n    Text to display for blindness accessibility features.\n   */\n  accessibilityLabel?: ?string,\n  /**\n   * Alias for accessibilityLabel  https://reactnative.dev/docs/view#accessibilitylabel\n   * https://github.com/facebook/react-native/issues/34424\n   */\n  'aria-label'?: ?string,\n  /**\n    If `true`, disable all interactions for this component.\n\n    @default false\n   */\n  disabled?: ?boolean,\n\n  /**\n    Used to locate this view in end-to-end tests.\n   */\n  testID?: ?string,\n\n  /**\n   * Accessibility props.\n   */\n  accessible?: ?boolean,\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n  accessibilityState?: ?AccessibilityState,\n\n  /**\n   * alias for accessibilityState\n   *\n   * see https://reactnative.dev/docs/accessibility#accessibilitystate\n   */\n  'aria-busy'?: ?boolean,\n  'aria-checked'?: ?boolean | 'mixed',\n  'aria-disabled'?: ?boolean,\n  'aria-expanded'?: ?boolean,\n  'aria-selected'?: ?boolean,\n\n  /**\n   * [Android] Controlling if a view fires accessibility events and if it is reported to accessibility services.\n   */\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  accessibilityHint?: ?string,\n  accessibilityLanguage?: ?Stringish,\n|}>;\n\n/**\n  A basic button component that should render nicely on any platform. Supports a\n  minimal level of customization.\n\n  If this button doesn't look right for your app, you can build your own button\n  using [TouchableOpacity](touchableopacity) or\n  [TouchableWithoutFeedback](touchablewithoutfeedback). For inspiration, look at\n  the [source code for this button component][button:source]. Or, take a look at\n  the [wide variety of button components built by the community]\n  [button:examples].\n\n  [button:source]:\n  https://github.com/facebook/react-native/blob/HEAD/Libraries/Components/Button.js\n\n  [button:examples]:\n  https://js.coach/?menu%5Bcollections%5D=React%20Native&page=1&query=button\n\n  ```jsx\n  <Button\n    onPress={onPressLearnMore}\n    title=\"Learn More\"\n    color=\"#841584\"\n    accessibilityLabel=\"Learn more about this purple button\"\n  />\n  ```\n\n  ```SnackPlayer name=Button%20Example\n  import React from 'react';\n  import { StyleSheet, Button, View, SafeAreaView, Text, Alert } from 'react-native';\n\n  const Separator = () => (\n    <View style={styles.separator} />\n  );\n\n  const App = () => (\n    <SafeAreaView style={styles.container}>\n      <View>\n        <Text style={styles.title}>\n          The title and onPress handler are required. It is recommended to set accessibilityLabel to help make your app usable by everyone.\n        </Text>\n        <Button\n          title=\"Press me\"\n          onPress={() => Alert.alert('Simple Button pressed')}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          Adjust the color in a way that looks standard on each platform. On  iOS, the color prop controls the color of the text. On Android, the color adjusts the background color of the button.\n        </Text>\n        <Button\n          title=\"Press me\"\n          color=\"#f194ff\"\n          onPress={() => Alert.alert('Button with adjusted color pressed')}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          All interaction for the component are disabled.\n        </Text>\n        <Button\n          title=\"Press me\"\n          disabled\n          onPress={() => Alert.alert('Cannot press this one')}\n        />\n      </View>\n      <Separator />\n      <View>\n        <Text style={styles.title}>\n          This layout strategy lets the title define the width of the button.\n        </Text>\n        <View style={styles.fixToText}>\n          <Button\n            title=\"Left button\"\n            onPress={() => Alert.alert('Left button pressed')}\n          />\n          <Button\n            title=\"Right button\"\n            onPress={() => Alert.alert('Right button pressed')}\n          />\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      marginHorizontal: 16,\n    },\n    title: {\n      textAlign: 'center',\n      marginVertical: 8,\n    },\n    fixToText: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    separator: {\n      marginVertical: 8,\n      borderBottomColor: '#737373',\n      borderBottomWidth: StyleSheet.hairlineWidth,\n    },\n  });\n\n  export default App;\n  ```\n */\n\nconst Button: React.AbstractComponent<ButtonProps> = (props: ButtonProps) => {\n  const {\n    accessibilityLabel,\n    accessibilityState,\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-label': ariaLabel,\n    'aria-selected': ariaSelected,\n    importantForAccessibility,\n    color,\n    onPress,\n    touchSoundDisabled,\n    title,\n    hasTVPreferredFocus,\n    nextFocusDown,\n    nextFocusForward,\n    nextFocusLeft,\n    nextFocusRight,\n    nextFocusUp,\n    testID,\n    accessible,\n    accessibilityActions,\n    accessibilityHint,\n    accessibilityLanguage,\n    onAccessibilityAction,\n  } = props;\n  const buttonStyles: Array<ViewStyleProp> = [styles.button];\n  const textStyles: Array<TextStyleProp> = [styles.text];\n  if (color) {\n    if (Platform.OS === 'ios') {\n      textStyles.push({color: color});\n    } else {\n      buttonStyles.push({backgroundColor: color});\n    }\n  }\n\n  let _accessibilityState = {\n    busy: ariaBusy ?? accessibilityState?.busy,\n    checked: ariaChecked ?? accessibilityState?.checked,\n    disabled: ariaDisabled ?? accessibilityState?.disabled,\n    expanded: ariaExpanded ?? accessibilityState?.expanded,\n    selected: ariaSelected ?? accessibilityState?.selected,\n  };\n\n  const disabled =\n    props.disabled != null ? props.disabled : _accessibilityState?.disabled;\n\n  _accessibilityState =\n    disabled !== _accessibilityState?.disabled\n      ? {..._accessibilityState, disabled}\n      : _accessibilityState;\n\n  if (disabled) {\n    buttonStyles.push(styles.buttonDisabled);\n    textStyles.push(styles.textDisabled);\n  }\n\n  invariant(\n    typeof title === 'string',\n    'The title prop of a Button must be a string',\n  );\n  const formattedTitle =\n    Platform.OS === 'android' ? title.toUpperCase() : title;\n  const Touchable =\n    Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n\n  // If `no` is specified for `importantForAccessibility`, it will be changed to `no-hide-descendants` because the text inside should not be focused.\n  const _importantForAccessibility =\n    importantForAccessibility === 'no'\n      ? 'no-hide-descendants'\n      : importantForAccessibility;\n\n  return (\n    <Touchable\n      accessible={accessible}\n      accessibilityActions={accessibilityActions}\n      onAccessibilityAction={onAccessibilityAction}\n      accessibilityLabel={ariaLabel || accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      accessibilityLanguage={accessibilityLanguage}\n      accessibilityRole=\"button\"\n      accessibilityState={_accessibilityState}\n      importantForAccessibility={_importantForAccessibility}\n      hasTVPreferredFocus={hasTVPreferredFocus}\n      nextFocusDown={nextFocusDown}\n      nextFocusForward={nextFocusForward}\n      nextFocusLeft={nextFocusLeft}\n      nextFocusRight={nextFocusRight}\n      nextFocusUp={nextFocusUp}\n      testID={testID}\n      disabled={disabled}\n      onPress={onPress}\n      touchSoundDisabled={touchSoundDisabled}>\n      <View style={buttonStyles}>\n        <Text style={textStyles} disabled={disabled}>\n          {formattedTitle}\n        </Text>\n      </View>\n    </Touchable>\n  );\n};\n\nButton.displayName = 'Button';\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      // Material design blue from https://material.google.com/style/color.html#color-color-palette\n      backgroundColor: '#2196F3',\n      borderRadius: 2,\n    },\n  }),\n  text: {\n    textAlign: 'center',\n    margin: 8,\n    ...Platform.select({\n      ios: {\n        // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/\n        color: '#007AFF',\n        fontSize: 18,\n      },\n      android: {\n        color: 'white',\n        fontWeight: '500',\n      },\n    }),\n  },\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf',\n    },\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd',\n    },\n    android: {\n      color: '#a1a1a1',\n    },\n  }),\n});\n\nexport default Button;\n"],"names":["_RCTDeviceEventEmitter","_interopRequireDefault","require","_NativeRedBox","_NativeBugReporting","defaultExtras","BugReporting","addFileSource","_classCallCheck2","default","_createClass2","key","value","_subscription","RCTDeviceEventEmitter","addListener","collectExtraData","_redboxSubscription","callback","this","_addSource","_extraSources","_fileSources","source","_maybeInit","has","console","warn","set","remove","delete","extraData","_ref","_ref2","_slicedToArray2","fileData","_ref3","_ref4","NativeBugReporting","setExtraData","NativeRedBox","extras","files","Map","module","exports","e","r","__esModule","t","_getRequireWildcardCache","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","_interopRequireWildcard","WeakMap","keys","forEach","prototype","_exportNames","enumerable","_RendererProxy","_Platform","_legacySendAccessibilityEvent","_NativeAccessibilityInfo","_NativeAccessibilityManager","EventNames","Platform","OS","AccessibilityInfo","isBoldTextEnabled","Promise","resolve","reject","NativeAccessibilityManagerIOS","getCurrentBoldTextState","isGrayscaleEnabled","getCurrentGrayscaleState","isInvertColorsEnabled","getCurrentInvertColorsState","isReduceMotionEnabled","NativeAccessibilityInfoAndroid","getCurrentReduceMotionState","prefersCrossFadeTransitions","getCurrentPrefersCrossFadeTransitionsState","isReduceTransparencyEnabled","getCurrentReduceTransparencyState","isScreenReaderEnabled","isTouchExplorationEnabled","getCurrentVoiceOverState","isAccessibilityServiceEnabled","addEventListener","eventName","handler","deviceEventName","setAccessibilityFocus","reactTag","legacySendAccessibilityEvent","sendAccessibilityEvent","handle","eventType","announceForAccessibility","announcement","announceForAccessibilityWithOptions","options","getRecommendedTimeoutMillis","originalTimeout","NativeAccessibilityInfo","NativeAccessibilityManager","_UIManager","_nullthrows","nullthrows","UIManager","getConstants","AccessibilityEventTypes","typeViewFocused","typeViewClicked","_objectWithoutProperties2","_StyleSheet","_View","React","_jsxRuntime","_excluded","PlatformActivityIndicator","ActivityIndicatorWithRef","forwardRef","forwardedRef","sizeStyle","sizeProp","_ref$animating","animating","_ref$color","color","_ref$hidesWhenStopped","hidesWhenStopped","onLayout","_ref$size","size","style","restProps","styles","sizeSmall","sizeLarge","height","width","nativeProps","assign","ref","jsx","StyleSheet","compose","container","children","styleAttr","indeterminate","displayName","create","alignItems","justifyContent","_ActivityIndicatorViewNativeComponent","ActivityIndicatorViewNativeComponent","_Text","_TouchableNativeFeedback","_TouchableOpacity","_invariant","Button","props","_accessibilityState2","_accessibilityState3","accessibilityLabel","accessibilityState","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","importantForAccessibility","onPress","touchSoundDisabled","title","hasTVPreferredFocus","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","testID","accessible","accessibilityActions","accessibilityHint","accessibilityLanguage","onAccessibilityAction","buttonStyles","button","textStyles","text","push","backgroundColor","_accessibilityState","busy","checked","disabled","expanded","selected","buttonDisabled","textDisabled","invariant","formattedTitle","toUpperCase","Touchable","TouchableNativeFeedback","TouchableOpacity","_importantForAccessibility","accessibilityRole","select","ios","android","elevation","borderRadius","textAlign","margin","fontSize","fontWeight"],"sourceRoot":""}