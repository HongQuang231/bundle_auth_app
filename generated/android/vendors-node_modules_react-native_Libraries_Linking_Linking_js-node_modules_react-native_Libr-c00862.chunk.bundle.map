{"version":3,"file":"vendors-node_modules_react-native_Libraries_Linking_Linking_js-node_modules_react-native_Libr-c00862.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/Linking/Linking.js","webpack:///./node_modules/react-native/Libraries/Linking/NativeIntentAndroid.js","webpack:///./node_modules/react-native/Libraries/Linking/NativeLinkingManager.js","webpack:///./node_modules/react-native/Libraries/Lists/FlatList.js","webpack:///./node_modules/react-native/Libraries/Lists/SectionList.js","webpack:///./node_modules/react-native/Libraries/Lists/VirtualizedList.js","webpack:///./node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\nimport NativeIntentAndroid from './NativeIntentAndroid';\nimport NativeLinkingManager from './NativeLinkingManager';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\n\ntype LinkingEventDefinitions = {\n  url: [{url: string}],\n};\n\n/**\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * See https://reactnative.dev/docs/linking\n */\nclass Linking extends NativeEventEmitter<LinkingEventDefinitions> {\n  constructor() {\n    super(Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   *\n   * See https://reactnative.dev/docs/linking#addeventlistener\n   */\n  addEventListener<K: $Keys<LinkingEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,\n    context: $FlowFixMe,\n  ): EventSubscription {\n    return this.addListener(eventType, listener);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * See https://reactnative.dev/docs/linking#openurl\n   */\n  openURL(url: string): Promise<void> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).openURL(url);\n    }\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * See https://reactnative.dev/docs/linking#canopenurl\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).canOpenURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).canOpenURL(url);\n    }\n  }\n\n  /**\n   * Open app settings.\n   *\n   * See https://reactnative.dev/docs/linking#opensettings\n   */\n  openSettings(): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openSettings();\n    } else {\n      return nullthrows(NativeLinkingManager).openSettings();\n    }\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * See https://reactnative.dev/docs/linking#getinitialurl\n   */\n  getInitialURL(): Promise<?string> {\n    return Platform.OS === 'android'\n      ? nullthrows(NativeIntentAndroid).getInitialURL()\n      : nullthrows(NativeLinkingManager).getInitialURL();\n  }\n\n  /*\n   * Launch an Android intent with extras (optional)\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/linking#sendintent\n   */\n  sendIntent(\n    action: string,\n    extras?: Array<{\n      key: string,\n      value: string | number | boolean,\n      ...\n    }>,\n  ): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\n    } else {\n      return new Promise((resolve, reject) => reject(new Error('Unsupported')));\n    }\n  }\n\n  _validateURL(url: string): void {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url,\n    );\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\n\nmodule.exports = (new Linking(): Linking);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeIntentAndroid';\nimport NativeIntentAndroid from '../../src/private/specs/modules/NativeIntentAndroid';\nexport default NativeIntentAndroid;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeLinkingManager';\nimport NativeLinkingManager from '../../src/private/specs/modules/NativeLinkingManager';\nexport default NativeLinkingManager;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport typeof ScrollViewNativeComponent from '../Components/ScrollView/ScrollViewNativeComponent';\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {\n  RenderItemProps,\n  RenderItemType,\n  ViewabilityConfigCallbackPair,\n  ViewToken,\n} from '@react-native/virtualized-lists';\n\nimport * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';\nimport {type ScrollResponderType} from '../Components/ScrollView/ScrollView';\nimport {\n  VirtualizedList,\n  keyExtractor as defaultKeyExtractor,\n} from '@react-native/virtualized-lists';\nimport memoizeOne from 'memoize-one';\n\nconst View = require('../Components/View/View');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst deepDiffer = require('../Utilities/differ/deepDiffer');\nconst Platform = require('../Utilities/Platform');\nconst invariant = require('invariant');\nconst React = require('react');\n\ntype RequiredProps<ItemT> = {|\n  /**\n   * An array (or array-like list) of items to render. Other data types can be\n   * used by targeting VirtualizedList directly.\n   */\n  data: ?$ReadOnly<$ArrayLike<ItemT>>,\n|};\ntype OptionalProps<ItemT> = {|\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem?: ?RenderItemType<ItemT>,\n\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: ViewStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?$ReadOnly<$ArrayLike<ItemT>>,\n    index: number,\n  ) => {\n    length: number,\n    offset: number,\n    index: number,\n    ...\n  },\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender?: ?number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor?: ?(item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   *\n   * The default value is 1.\n   */\n  numColumns?: number,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   *\n   * The default value is true for Android.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ScrollView` for flow type and further documentation.\n   */\n  fadingEdgeLength?: ?number,\n  /**\n   * Enable an optimization to memoize the item renderer to prevent unnecessary rerenders.\n   */\n  strictMode?: boolean,\n|};\n\n/**\n * Default Props Helper Functions\n * Use the following helper functions for default values\n */\n\n// removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)\nfunction removeClippedSubviewsOrDefault(removeClippedSubviews: ?boolean) {\n  if (ReactNativeFeatureFlags.shouldUseRemoveClippedSubviewsAsDefaultOnIOS()) {\n    return removeClippedSubviews ?? true;\n  } else {\n    return removeClippedSubviews ?? Platform.OS === 'android';\n  }\n}\n\n// numColumnsOrDefault(this.props.numColumns)\nfunction numColumnsOrDefault(numColumns: ?number) {\n  return numColumns ?? 1;\n}\n\nfunction isArrayLike(data: mixed): boolean {\n  // $FlowExpectedError[incompatible-use]\n  return typeof Object(data).length === 'number';\n}\n\ntype FlatListProps<ItemT> = {|\n  ...RequiredProps<ItemT>,\n  ...OptionalProps<ItemT>,\n|};\n\ntype VirtualizedListProps = React.ElementConfig<typeof VirtualizedList>;\n\nexport type Props<ItemT> = {\n  ...$Diff<\n    VirtualizedListProps,\n    {\n      getItem: $PropertyType<VirtualizedListProps, 'getItem'>,\n      getItemCount: $PropertyType<VirtualizedListProps, 'getItemCount'>,\n      getItemLayout: $PropertyType<VirtualizedListProps, 'getItemLayout'>,\n      renderItem: $PropertyType<VirtualizedListProps, 'renderItem'>,\n      keyExtractor: $PropertyType<VirtualizedListProps, 'keyExtractor'>,\n      ...\n    },\n  >,\n  ...FlatListProps<ItemT>,\n  ...\n};\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean, ...}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n    ...\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewOffset?: number,\n    viewPosition?: number,\n    ...\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number, ...}) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): ?ScrollResponderType {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  /**\n   * Provides a reference to the underlying host component\n   */\n  getNativeScrollRef():\n    | ?React.ElementRef<typeof View>\n    | ?React.ElementRef<ScrollViewNativeComponent> {\n    if (this._listRef) {\n      /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing\n       * TextInput typing */\n      return this._listRef.getScrollRef();\n    }\n  }\n\n  getScrollableNode(): any {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: {[string]: mixed, ...}) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  constructor(props: Props<ItemT>) {\n    super(props);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs =\n        this.props.viewabilityConfigCallbackPairs.map(pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }));\n    } else if (this.props.onViewableItemsChanged) {\n      this._virtualizedListPairs.push({\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          // NOTE: we use a wrapper function to allow the actual callback to change\n          // while still keeping the function provided to native to be stable\n          (...args) => {\n            invariant(\n              this.props.onViewableItemsChanged,\n              'Changing the nullability of onViewableItemsChanged is not supported. ' +\n                'Once a function or null is supplied that cannot be changed.',\n            );\n            return this.props.onViewableItemsChanged(...args);\n          },\n        ),\n      });\n    }\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  componentDidUpdate(prevProps: Props<ItemT>) {\n    invariant(\n      prevProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      (prevProps.onViewableItemsChanged == null) ===\n        (this.props.onViewableItemsChanged == null),\n      'Changing onViewableItemsChanged nullability on the fly is not supported',\n    );\n    invariant(\n      !deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig),\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(this.props);\n  }\n\n  _listRef: ?React.ElementRef<typeof VirtualizedList>;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  _captureRef = (ref: ?React.ElementRef<typeof VirtualizedList>) => {\n    this._listRef = ref;\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _checkProps(props: Props<ItemT>) {\n    const {\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\n      getItem,\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\n      getItemCount,\n      horizontal,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  _getItem = (\n    data: $ArrayLike<ItemT>,\n    index: number,\n  ): ?(ItemT | $ReadOnlyArray<ItemT>) => {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const itemIndex = index * numColumns + kk;\n        if (itemIndex < data.length) {\n          const item = data[itemIndex];\n          ret.push(item);\n        }\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?$ArrayLike<ItemT>): number => {\n    // Legacy behavior of FlatList was to forward \"undefined\" length if invalid\n    // data like a non-arraylike object is passed. VirtualizedList would then\n    // coerce this, and the math would work out to no-op. For compatibility, if\n    // invalid data is passed, we tell VirtualizedList there are zero items\n    // available to prevent it from trying to read from the invalid data\n    // (without propagating invalidly typed data).\n    if (data != null && isArrayLike(data)) {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;\n    } else {\n      return 0;\n    }\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number): string => {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((item, kk) =>\n          keyExtractor(((item: $FlowFixMe): ItemT), index * numColumns + kk),\n        )\n        .join(':');\n    }\n\n    // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array\n    return keyExtractor(items, index);\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => void,\n    // $FlowFixMe[missing-local-annot]\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed: Array<ViewToken> = [];\n          const viewableItems: Array<ViewToken> = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderer = (\n    ListItemComponent: ?(React.ComponentType<any> | React.Element<any>),\n    renderItem: ?RenderItemType<ItemT>,\n    columnWrapperStyle: ?ViewStyleProp,\n    numColumns: ?number,\n    extraData: ?any,\n    // $FlowFixMe[missing-local-annot]\n  ) => {\n    const cols = numColumnsOrDefault(numColumns);\n\n    const render = (props: RenderItemProps<ItemT>): React.Node => {\n      if (ListItemComponent) {\n        // $FlowFixMe[not-a-component] Component isn't valid\n        // $FlowFixMe[incompatible-type-arg] Component isn't valid\n        // $FlowFixMe[incompatible-return] Component isn't valid\n        return <ListItemComponent {...props} />;\n      } else if (renderItem) {\n        // $FlowFixMe[incompatible-call]\n        return renderItem(props);\n      } else {\n        return null;\n      }\n    };\n\n    const renderProp = (info: RenderItemProps<ItemT>) => {\n      if (cols > 1) {\n        const {item, index} = info;\n        invariant(\n          Array.isArray(item),\n          'Expected array of items with numColumns > 1',\n        );\n        return (\n          <View style={StyleSheet.compose(styles.row, columnWrapperStyle)}>\n            {item.map((it, kk) => {\n              const element = render({\n                // $FlowFixMe[incompatible-call]\n                item: it,\n                index: index * cols + kk,\n                separators: info.separators,\n              });\n              return element != null ? (\n                <React.Fragment key={kk}>{element}</React.Fragment>\n              ) : null;\n            })}\n          </View>\n        );\n      } else {\n        return render(info);\n      }\n    };\n\n    return ListItemComponent\n      ? {ListItemComponent: renderProp}\n      : {renderItem: renderProp};\n  };\n\n  // $FlowFixMe[missing-local-annot]\n  _memoizedRenderer = memoizeOne(this._renderer);\n\n  render(): React.Node {\n    const {\n      numColumns,\n      columnWrapperStyle,\n      removeClippedSubviews: _removeClippedSubviews,\n      strictMode = false,\n      ...restProps\n    } = this.props;\n\n    const renderer = strictMode ? this._memoizedRenderer : this._renderer;\n\n    return (\n      // $FlowFixMe[incompatible-exact] - `restProps` (`Props`) is inexact.\n      <VirtualizedList\n        {...restProps}\n        getItem={this._getItem}\n        getItemCount={this._getItemCount}\n        keyExtractor={this._keyExtractor}\n        ref={this._captureRef}\n        viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n        removeClippedSubviews={removeClippedSubviewsOrDefault(\n          _removeClippedSubviews,\n        )}\n        {...renderer(\n          this.props.ListItemComponent,\n          this.props.renderItem,\n          columnWrapperStyle,\n          numColumns,\n          this.props.extraData,\n        )}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {flexDirection: 'row'},\n});\n\nmodule.exports = FlatList;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {ScrollResponderType} from '../Components/ScrollView/ScrollView';\nimport type {\n  ScrollToLocationParamsType,\n  SectionBase as _SectionBase,\n  VirtualizedSectionListProps,\n} from '@react-native/virtualized-lists';\n\nimport Platform from '../Utilities/Platform';\nimport {VirtualizedSectionList} from '@react-native/virtualized-lists';\nimport * as React from 'react';\n\ntype Item = any;\n\nexport type SectionBase<SectionItemT> = _SectionBase<SectionItemT>;\n\ntype RequiredProps<SectionT: SectionBase<any>> = {|\n  /**\n   * The actual data to render, akin to the `data` prop in [`<FlatList>`](https://reactnative.dev/docs/flatlist).\n   *\n   * General shape:\n   *\n   *     sections: $ReadOnlyArray<{\n   *       data: $ReadOnlyArray<SectionItem>,\n   *       renderItem?: ({item: SectionItem, ...}) => ?React.Element<*>,\n   *       ItemSeparatorComponent?: ?ReactClass<{highlighted: boolean, ...}>,\n   *     }>\n   */\n  sections: $ReadOnlyArray<SectionT>,\n|};\n\ntype OptionalProps<SectionT: SectionBase<any>> = {|\n  /**\n   * Default renderer for every item in every section. Can be over-ridden on a per-section basis.\n   */\n  renderItem?: (info: {\n    item: Item,\n    index: number,\n    section: SectionT,\n    separators: {\n      highlight: () => void,\n      unhighlight: () => void,\n      updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n      ...\n    },\n    ...\n  }) => null | React.Element<any>,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks item.key, then\n   * falls back to using the index, like react does. Note that this sets keys for each item, but\n   * each overall section still needs its own key.\n   */\n  keyExtractor?: ?(item: Item, index: number) => string,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number, ...}) => void,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n|};\n\nexport type Props<SectionT> = {|\n  ...$Diff<\n    VirtualizedSectionListProps<SectionT>,\n    {\n      getItem: $PropertyType<VirtualizedSectionListProps<SectionT>, 'getItem'>,\n      getItemCount: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'getItemCount',\n      >,\n      renderItem: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'renderItem',\n      >,\n      keyExtractor: $PropertyType<\n        VirtualizedSectionListProps<SectionT>,\n        'keyExtractor',\n      >,\n      ...\n    },\n  >,\n  ...RequiredProps<SectionT>,\n  ...OptionalProps<SectionT>,\n|};\n\n/**\n * A performant interface for rendering sectioned lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Configurable viewability callbacks.\n *  - List header support.\n *  - List footer support.\n *  - Item separator support.\n *  - Section header support.\n *  - Section separator support.\n *  - Heterogeneous data and item rendering support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *\n * If you don't need section support and want a simpler interface, use\n * [`<FlatList>`](https://reactnative.dev/docs/flatlist).\n *\n * Simple Examples:\n *\n *     <SectionList\n *       renderItem={({item}) => <ListItem title={item} />}\n *       renderSectionHeader={({section}) => <Header title={section.title} />}\n *       sections={[ // homogeneous rendering between sections\n *         {data: [...], title: ...},\n *         {data: [...], title: ...},\n *         {data: [...], title: ...},\n *       ]}\n *     />\n *\n *     <SectionList\n *       sections={[ // heterogeneous rendering between sections\n *         {data: [...], renderItem: ...},\n *         {data: [...], renderItem: ...},\n *         {data: [...], renderItem: ...},\n *       ]}\n *     />\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate and momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\nexport default class SectionList<\n  SectionT: SectionBase<any>,\n> extends React.PureComponent<Props<SectionT>, void> {\n  props: Props<SectionT>;\n\n  /**\n   * Scrolls to the item at the specified `sectionIndex` and `itemIndex` (within the section)\n   * positioned in the viewable area such that `viewPosition` 0 places it at the top (and may be\n   * covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle. `viewOffset` is a\n   * fixed number of pixels to offset the final target position, e.g. to compensate for sticky\n   * headers.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToLocation(params: ScrollToLocationParamsType) {\n    if (this._wrapperListRef != null) {\n      this._wrapperListRef.scrollToLocation(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    listRef && listRef.recordInteraction();\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    listRef && listRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): ?ScrollResponderType {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      return listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode(): any {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      return listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: Object) {\n    const listRef = this._wrapperListRef && this._wrapperListRef.getListRef();\n    if (listRef) {\n      listRef.setNativeProps(props);\n    }\n  }\n\n  render(): React.Node {\n    const {\n      stickySectionHeadersEnabled: _stickySectionHeadersEnabled,\n      ...restProps\n    } = this.props;\n    const stickySectionHeadersEnabled =\n      _stickySectionHeadersEnabled ?? Platform.OS === 'ios';\n    return (\n      /* $FlowFixMe[incompatible-type] Error revealed after improved builtin\n       * React utility types */\n      /* $FlowFixMe[incompatible-type] Error revealed after improved builtin\n       * React utility types */\n      <VirtualizedSectionList\n        {...restProps}\n        stickySectionHeadersEnabled={stickySectionHeadersEnabled}\n        ref={this._captureRef}\n        // $FlowFixMe[missing-local-annot]\n        getItemCount={items => items.length}\n        // $FlowFixMe[missing-local-annot]\n        getItem={(items, index) => items[index]}\n      />\n    );\n  }\n\n  _wrapperListRef: ?React.ElementRef<typeof VirtualizedSectionList>;\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _captureRef = ref => {\n    this._wrapperListRef = ref;\n  };\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport {typeof VirtualizedList as VirtualizedListType} from '@react-native/virtualized-lists';\n\nconst VirtualizedList: VirtualizedListType =\n  require('@react-native/virtualized-lists').VirtualizedList;\n\nexport type {\n  RenderItemProps,\n  RenderItemType,\n  Separators,\n} from '@react-native/virtualized-lists';\nmodule.exports = VirtualizedList;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport {typeof VirtualizedSectionList as VirtualizedSectionListType} from '@react-native/virtualized-lists';\n\nconst VirtualizedSectionList: VirtualizedSectionListType =\n  require('@react-native/virtualized-lists').VirtualizedSectionList;\n\nexport type {\n  SectionBase,\n  ScrollToLocationParamsType,\n} from '@react-native/virtualized-lists';\nmodule.exports = VirtualizedSectionList;\n"],"names":["_NativeEventEmitter2","_interopRequireDefault","require","_Platform","_NativeIntentAndroid","_NativeLinkingManager","_invariant","_nullthrows","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","Linking","_NativeEventEmitter","_classCallCheck2","Platform","OS","nullthrows","NativeLinkingManager","undefined","_inherits2","_createClass2","key","value","eventType","listener","context","this","addListener","url","_validateURL","NativeIntentAndroid","openURL","canOpenURL","openSettings","getInitialURL","action","extras","sendIntent","Promise","resolve","reject","Error","invariant","NativeEventEmitter","module","exports","r","__esModule","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","i","set","_interopRequireWildcard","WeakMap","keys","forEach","_exportNames","enumerable","ReactNativeFeatureFlags","_virtualizedLists","_memoizeOne","_jsxRuntime","_excluded","View","StyleSheet","deepDiffer","React","numColumnsOrDefault","numColumns","FlatList","_React$PureComponent","props","_this","_virtualizedListPairs","_captureRef","ref","_listRef","_getItem","data","index","ret","kk","itemIndex","length","item","push","_getItemCount","isArrayLike","Math","ceil","_keyExtractor","items","_this$props$keyExtrac","keyExtractor","defaultKeyExtractor","Array","isArray","map","join","_renderer","ListItemComponent","renderItem","columnWrapperStyle","extraData","cols","render","jsx","assign","renderProp","info","style","compose","styles","row","children","it","element","separators","Fragment","_memoizedRenderer","memoizeOne","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","_this$props","arguments","params","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollRef","getScrollableNode","setNativeProps","prevProps","getItem","getItemCount","horizontal","arr","v","_this$props$keyExtrac2","ii","_this2","changed","viewableItems","_pushMultiColumnViewable","removeClippedSubviews","_this$props2","_removeClippedSubviews","_this$props2$strictMo","strictMode","restProps","_objectWithoutProperties2","renderer","VirtualizedList","shouldUseRemoveClippedSubviewsAsDefaultOnIOS","PureComponent","create","flexDirection","SectionList","_len","args","_key","concat","_wrapperListRef","scrollToLocation","listRef","getListRef","_stickySectionHeadersEnabled","stickySectionHeadersEnabled","VirtualizedSectionList"],"sourceRoot":""}