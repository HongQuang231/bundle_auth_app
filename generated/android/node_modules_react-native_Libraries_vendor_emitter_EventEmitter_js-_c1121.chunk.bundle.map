{"version":3,"file":"node_modules_react-native_Libraries_vendor_emitter_EventEmitter_js-_c1121.chunk.bundle","mappings":"+UA+DiCA,EAAAA,SAGU,EAAAC,EAAAC,UAHV,SAAAC,KAAA,EAAAC,EAAAF,SAAA,KAAAC,GAAAE,OAAAC,eAAA,KAAAC,EAAA,CAAAC,UAAA,EAAAC,MAGQ,CAAC,GAAC,KAAAC,IAAA,cAAAD,MAMzC,SACEE,EACAC,EACAC,GAEA,GAAwB,mBAAbD,EACT,MAAM,IAAIE,UACR,mEAGJ,IAAMC,EA4DV,SAKEC,EACAL,GAEA,IAAII,EAAgDC,EAASL,GAK7D,OAJqB,MAAjBI,IACFA,EAAgB,IAAIE,IACpBD,EAASL,GAAaI,GAEjBA,CACT,CA1E0BG,EAAQ,EAAAC,EAAAjB,SAI5BkB,KAAIb,GAAAA,GAAYI,GACZU,EAAsD,CAC1DR,QAAAA,EACAD,SAAAA,EACAU,OAAM,WACJP,EAAcQ,OAAOF,EACvB,GAGF,OADAN,EAAcS,IAAIH,GACXA,CACT,GAAC,CAAAX,IAAA,OAAAD,MASD,SACEE,GAGA,IAAMI,GACJ,EAAAI,EAAAjB,SAAAkB,KAAIb,GAAAA,GAAWI,GACjB,GAAqB,MAAjBI,EAAuB,CAAC,IAAD,IAAAU,EAAAC,UAAAC,OAJxBC,EAAI,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAJF,EAAIE,EAAA,GAAAJ,UAAAI,GAOL,IAAK,IAAMT,KAAgBQ,MAAME,KAAKhB,GACpCM,EAAaT,SAASoB,MAAMX,EAAaR,QAASe,EAEtD,CACF,GAAC,CAAAlB,IAAA,qBAAAD,MAKD,SACEE,GAEiB,MAAbA,GACF,EAAAQ,EAAAjB,SAAAkB,KAAIb,GAAAA,GAAa,CAAC,SAEX,EAAAY,EAAAjB,SAAAkB,KAAIb,GAAAA,GAAWI,EAE1B,GAAC,CAAAD,IAAA,gBAAAD,MAKD,SAA8CE,GAC5C,IAAMI,GAA2C,EAAAI,EAAAjB,SAAAkB,KAAIb,GAAAA,GAAWI,GAChE,OAAwB,MAAjBI,EAAwB,EAAIA,EAAckB,IACnD,I,oBCvIFC,EAAOlC,QAJP,SAAgCmC,EAAGC,GACjC,IAAK,CAAC,EAAEC,eAAeC,KAAKH,EAAGC,GAAI,MAAM,IAAItB,UAAU,kDACvD,OAAOqB,CACT,EACyCD,EAAOlC,QAAQuC,YAAa,EAAML,EAAOlC,QAAiB,QAAIkC,EAAOlC,O,oBCJ9G,IAAIwC,EAAK,EAITN,EAAOlC,QAHP,SAA+BmC,GAC7B,MAAO,aAAeK,IAAO,IAAML,CACrC,EACwCD,EAAOlC,QAAQuC,YAAa,EAAML,EAAOlC,QAAiB,QAAIkC,EAAOlC,O","sources":["webpack:///./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js","webpack:///./node_modules/@babel/runtime/helpers/classPrivateFieldLooseBase.js","webpack:///./node_modules/@babel/runtime/helpers/classPrivateFieldLooseKey.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: TEventToArgsMap[TEvent]) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: TEventToArgsMap[TEvent]\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\n// $FlowFixMe[deprecated-type]\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  #registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: TEventToArgsMap[TEvent]) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    if (typeof listener !== 'function') {\n      throw new TypeError(\n        'EventEmitter.addListener(...): 2nd argument must be a function.',\n      );\n    }\n    const registrations = allocate<\n      TEventToArgsMap,\n      TEvent,\n      TEventToArgsMap[TEvent],\n    >(this.#registry, eventType);\n    const registration: Registration<TEventToArgsMap[TEvent]> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: TEventToArgsMap[TEvent]\n  ): void {\n    const registrations: ?Set<Registration<TEventToArgsMap[TEvent]>> =\n      this.#registry[eventType];\n    if (registrations != null) {\n      // Copy `registrations` to take a snapshot when we invoke `emit`, in case\n      // registrations are added or removed when listeners are invoked.\n      for (const registration of Array.from(registrations)) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this.#registry = {};\n    } else {\n      delete this.#registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this.#registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: TEventToArgsMap[TEvent],\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n","function _classPrivateFieldBase(e, t) {\n  if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\");\n  return e;\n}\nmodule.exports = _classPrivateFieldBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var id = 0;\nfunction _classPrivateFieldKey(e) {\n  return \"__private_\" + id++ + \"_\" + e;\n}\nmodule.exports = _classPrivateFieldKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["exports","_createClass2","default","EventEmitter","_classCallCheck2","Object","defineProperty","_registry","writable","value","key","eventType","listener","context","TypeError","registrations","registry","Set","allocate","_classPrivateFieldLooseBase2","this","registration","remove","delete","add","_len","arguments","length","args","Array","_key","from","apply","size","module","e","t","hasOwnProperty","call","__esModule","id"],"sourceRoot":""}