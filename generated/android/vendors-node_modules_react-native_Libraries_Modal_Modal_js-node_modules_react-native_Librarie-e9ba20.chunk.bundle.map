{"version":3,"file":"vendors-node_modules_react-native_Libraries_Modal_Modal_js-node_modules_react-native_Librarie-e9ba20.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/LogBox/LogBox.js","webpack:///./node_modules/react-native/Libraries/Modal/Modal.js","webpack:///./node_modules/react-native/Libraries/Modal/ModalInjection.js","webpack:///./node_modules/react-native/Libraries/Modal/NativeModalManager.js","webpack:///./node_modules/react-native/Libraries/Modal/RCTModalHostViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/NativeModules/specs/NativeDevSettings.js","webpack:///./node_modules/react-native/Libraries/PermissionsAndroid/NativePermissionsAndroid.js","webpack:///./node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js","webpack:///./node_modules/react-native/Libraries/Pressability/HoverState.js","webpack:///./node_modules/react-native/Libraries/Pressability/Pressability.js","webpack:///./node_modules/react-native/Libraries/Pressability/PressabilityDebug.js","webpack:///./node_modules/react-native/Libraries/Pressability/PressabilityPerformanceEventEmitter.js","webpack:///./node_modules/react-native/Libraries/Pressability/usePressability.js","webpack:///./node_modules/react-native/Libraries/PushNotificationIOS/NativePushNotificationManagerIOS.js","webpack:///./node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js","webpack:///./node_modules/react-native/Libraries/ReactNative/I18nManager.js","webpack:///./node_modules/react-native/Libraries/ReactNative/NativeI18nManager.js","webpack:///./node_modules/react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils.js","webpack:///./node_modules/react-native/Libraries/ReactNative/ReactNativeFeatureFlags.js","webpack:///./node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Renderer/shims/createReactNativeComponentClass.js","webpack:///./node_modules/react-native/Libraries/Settings/Settings.js","webpack:///./node_modules/react-native/Libraries/Share/NativeShareModule.js","webpack:///./node_modules/react-native/Libraries/Share/Share.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypesIOS.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/Rect.js","webpack:///./node_modules/react-native/Libraries/StyleSheet/splitLayoutProps.js","webpack:///./node_modules/react-native/Libraries/Text/Text.js","webpack:///./node_modules/react-native/Libraries/Text/TextNativeComponent.js","webpack:///./node_modules/react-native/Libraries/UTFSequence.js","webpack:///./node_modules/react-native/Libraries/Utilities/Appearance.js","webpack:///./node_modules/react-native/Libraries/Utilities/DebugEnvironment.js","webpack:///./node_modules/react-native/Libraries/Utilities/DevSettings.js","webpack:///./node_modules/react-native/Libraries/Utilities/DeviceInfo.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativeAppearance.js","webpack:///./node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Utilities/dismissKeyboard.js","webpack:///./node_modules/react-native/Libraries/Utilities/logError.js","webpack:///./node_modules/react-native/Libraries/Utilities/useColorScheme.js","webpack:///./node_modules/react-native/Libraries/Utilities/useMergeRefs.js","webpack:///./node_modules/react-native/Libraries/Utilities/useRefEffect.js","webpack:///./node_modules/react-native/Libraries/Utilities/useWindowDimensions.js","webpack:///./node_modules/react-native/Libraries/Vibration/NativeVibration.js","webpack:///./node_modules/react-native/Libraries/Vibration/Vibration.js","webpack:///./node_modules/react-native/Libraries/YellowBox/YellowBoxDeprecated.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {IgnorePattern, LogData} from './Data/LogBoxData';\nimport type {ExtendedExceptionData} from './Data/parseLogBoxLog';\n\nimport Platform from '../Utilities/Platform';\nimport RCTLog from '../Utilities/RCTLog';\n\nexport type {LogData, ExtendedExceptionData, IgnorePattern};\n\nlet LogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs($ReadOnlyArray<IgnorePattern>): void;\n  ignoreAllLogs(?boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require('./Data/LogBoxData');\n  const {parseLogBoxLog, parseInterpolation} = require('./Data/parseLogBoxLog');\n\n  let originalConsoleError;\n  let originalConsoleWarn;\n  let consoleErrorImpl;\n  let consoleWarnImpl: (...args: Array<mixed>) => void;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      require('../NativeModules/specs/NativeLogBox');\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        originalConsoleWarn = console.warn.bind(console);\n\n        // $FlowExpectedError[cannot-write]\n        console.error = (...args) => {\n          consoleErrorImpl(...args);\n        };\n        // $FlowExpectedError[cannot-write]\n        console.warn = (...args) => {\n          consoleWarnImpl(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n      consoleWarnImpl = registerWarning;\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n\n      RCTLog.setWarningHandler((...args) => {\n        registerWarning(...args);\n      });\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      consoleWarnImpl = originalConsoleWarn;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isRCTLogAdviceWarning = (...args: Array<mixed>) => {\n    // RCTLogAdvice is a native logging function designed to show users\n    // a message in the console, but not show it to them in Logbox.\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n\n  const isWarningModuleWarning = (...args: Array<mixed>) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  const registerWarning = (...args: Array<mixed>): void => {\n    // Let warnings within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      originalConsoleError(...args);\n      return;\n    } else {\n      // Be sure to pass LogBox warnings through.\n      originalConsoleWarn(...args);\n    }\n\n    try {\n      if (!isRCTLogAdviceWarning(...args)) {\n        const {category, message, componentStack} = parseLogBoxLog(args);\n\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          LogBoxData.addLog({\n            level: 'warn',\n            category,\n            message,\n            componentStack,\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  const registerError = (...args): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError(...args);\n        return;\n      }\n\n      const format = args[0].replace('Warning: ', '');\n      const filterResult = LogBoxData.checkWarningFilter(format);\n      if (filterResult.suppressCompletely) {\n        return;\n      }\n\n      let level = 'error';\n      if (filterResult.suppressDialog_LEGACY === true) {\n        level = 'warn';\n      } else if (filterResult.forceDialogImmediately === true) {\n        level = 'fatal'; // Do not downgrade. These are real bugs with same severity as throws.\n      }\n\n      // Unfortunately, we need to add the Warning: prefix back for downstream dependencies.\n      args[0] = `Warning: ${filterResult.finalFormat}`;\n      const {category, message, componentStack} = parseLogBoxLog(args);\n\n      // Interpolate the message so they are formatted for adb and other CLIs.\n      // This is different than the message.content above because it includes component stacks.\n      const interpolated = parseInterpolation(args);\n      originalConsoleError(interpolated.message.content);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        LogBoxData.addLog({\n          level,\n          category,\n          message,\n          componentStack,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {\n      // Do nothing.\n    },\n\n    uninstall(): void {\n      // Do nothing.\n    },\n\n    isInstalled(): boolean {\n      return false;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      // Do nothing.\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      // Do nothing.\n    },\n\n    clearAllLogs(): void {\n      // Do nothing.\n    },\n\n    addLog(log: LogData): void {\n      // Do nothing.\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      // Do nothing.\n    },\n  };\n}\n\nexport default (LogBox: ILogBox);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ViewProps} from '../Components/View/ViewPropTypes';\nimport type {RootTag} from '../ReactNative/RootTag';\nimport type {DirectEventHandler} from '../Types/CodegenTypes';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport ModalInjection from './ModalInjection';\nimport NativeModalManager from './NativeModalManager';\nimport RCTModalHostView from './RCTModalHostViewNativeComponent';\nimport {VirtualizedListContextResetter} from '@react-native/virtualized-lists';\n\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst View = require('../Components/View/View');\nconst AppContainer = require('../ReactNative/AppContainer');\nconst I18nManager = require('../ReactNative/I18nManager');\nconst {RootTagContext} = require('../ReactNative/RootTag');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst Platform = require('../Utilities/Platform');\nconst React = require('react');\n\ntype ModalEventDefinitions = {\n  modalDismissed: [{modalID: number}],\n};\n\nconst ModalEventEmitter =\n  Platform.OS === 'ios' && NativeModalManager != null\n    ? new NativeEventEmitter<ModalEventDefinitions>(\n        // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n        // If you want to use the native module on other platforms, please remove this condition and test its behavior\n        Platform.OS !== 'ios' ? null : NativeModalManager,\n      )\n    : null;\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n *\n * See https://reactnative.dev/docs/modal\n */\n\n// In order to route onDismiss callbacks, we need to uniquely identifier each\n// <Modal> on screen. There can be different ones, either nested or as siblings.\n// We cannot pass the onDismiss callback to native as the view will be\n// destroyed before the callback is fired.\nlet uniqueModalIdentifier = 0;\n\ntype OrientationChangeEvent = $ReadOnly<{|\n  orientation: 'portrait' | 'landscape',\n|}>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * The `animationType` prop controls how the modal animates.\n   *\n   * See https://reactnative.dev/docs/modal#animationtype\n   */\n  animationType?: ?('none' | 'slide' | 'fade'),\n\n  /**\n   * The `presentationStyle` prop controls how the modal appears.\n   *\n   * See https://reactnative.dev/docs/modal#presentationstyle\n   */\n  presentationStyle?: ?(\n    | 'fullScreen'\n    | 'pageSheet'\n    | 'formSheet'\n    | 'overFullScreen'\n  ),\n\n  /**\n   * The `transparent` prop determines whether your modal will fill the\n   * entire view.\n   *\n   * See https://reactnative.dev/docs/modal#transparent\n   */\n  transparent?: ?boolean,\n\n  /**\n   * The `statusBarTranslucent` prop determines whether your modal should go under\n   * the system statusbar.\n   *\n   * See https://reactnative.dev/docs/modal.html#statusbartranslucent-android\n   */\n  statusBarTranslucent?: ?boolean,\n\n  /**\n   * The `hardwareAccelerated` prop controls whether to force hardware\n   * acceleration for the underlying window.\n   *\n   * This prop works only on Android.\n   *\n   * See https://reactnative.dev/docs/modal#hardwareaccelerated\n   */\n  hardwareAccelerated?: ?boolean,\n\n  /**\n   * The `visible` prop determines whether your modal is visible.\n   *\n   * See https://reactnative.dev/docs/modal#visible\n   */\n  visible?: ?boolean,\n\n  /**\n   * The `onRequestClose` callback is called when the user taps the hardware\n   * back button on Android or the menu button on Apple TV.\n   *\n   * This is required on Apple TV and Android.\n   *\n   * See https://reactnative.dev/docs/modal#onrequestclose\n   */\n  onRequestClose?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onShow` prop allows passing a function that will be called once the\n   * modal has been shown.\n   *\n   * See https://reactnative.dev/docs/modal#onshow\n   */\n  onShow?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onDismiss` prop allows passing a function that will be called once\n   * the modal has been dismissed.\n   *\n   * See https://reactnative.dev/docs/modal#ondismiss\n   */\n  onDismiss?: ?() => mixed,\n\n  /**\n   * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n   *\n   * See https://reactnative.dev/docs/modal#supportedorientations\n   */\n  supportedOrientations?: ?$ReadOnlyArray<\n    | 'portrait'\n    | 'portrait-upside-down'\n    | 'landscape'\n    | 'landscape-left'\n    | 'landscape-right',\n  >,\n\n  /**\n   * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n   *\n   * See https://reactnative.dev/docs/modal#onorientationchange\n   */\n  onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,\n|}>;\n\nfunction confirmProps(props: Props) {\n  if (__DEV__) {\n    if (\n      props.presentationStyle &&\n      props.presentationStyle !== 'overFullScreen' &&\n      props.transparent === true\n    ) {\n      console.warn(\n        `Modal with '${props.presentationStyle}' presentation style and 'transparent' value is not supported.`,\n      );\n    }\n  }\n}\n\n// Create a state to track whether the Modal is rendering or not.\n// This is the only prop that controls whether the modal is rendered or not.\ntype State = {\n  isRendered: boolean,\n};\n\nclass Modal extends React.Component<Props, State> {\n  static defaultProps: {|hardwareAccelerated: boolean, visible: boolean|} = {\n    visible: true,\n    hardwareAccelerated: false,\n  };\n\n  static contextType: React.Context<RootTag> = RootTagContext;\n\n  _identifier: number;\n  _eventSubscription: ?EventSubscription;\n\n  constructor(props: Props) {\n    super(props);\n    if (__DEV__) {\n      confirmProps(props);\n    }\n    this._identifier = uniqueModalIdentifier++;\n    this.state = {\n      isRendered: props.visible === true,\n    };\n  }\n\n  componentDidMount() {\n    // 'modalDismissed' is for the old renderer in iOS only\n    if (ModalEventEmitter) {\n      this._eventSubscription = ModalEventEmitter.addListener(\n        'modalDismissed',\n        event => {\n          this.setState({isRendered: false}, () => {\n            if (event.modalID === this._identifier && this.props.onDismiss) {\n              this.props.onDismiss();\n            }\n          });\n        },\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({isRendered: false});\n    if (this._eventSubscription) {\n      this._eventSubscription.remove();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible === false && this.props.visible === true) {\n      this.setState({isRendered: true});\n    }\n\n    if (__DEV__) {\n      confirmProps(this.props);\n    }\n  }\n\n  // Helper function to encapsulate platform specific logic to show or not the Modal.\n  _shouldShowModal(): boolean {\n    if (Platform.OS === 'ios') {\n      return this.props.visible === true || this.state.isRendered === true;\n    }\n\n    return this.props.visible === true;\n  }\n\n  render(): React.Node {\n    if (!this._shouldShowModal()) {\n      return null;\n    }\n\n    const containerStyles = {\n      backgroundColor:\n        this.props.transparent === true ? 'transparent' : 'white',\n    };\n\n    let animationType = this.props.animationType || 'none';\n\n    let presentationStyle = this.props.presentationStyle;\n    if (!presentationStyle) {\n      presentationStyle = 'fullScreen';\n      if (this.props.transparent === true) {\n        presentationStyle = 'overFullScreen';\n      }\n    }\n\n    const innerChildren = __DEV__ ? (\n      <AppContainer rootTag={this.context}>{this.props.children}</AppContainer>\n    ) : (\n      this.props.children\n    );\n\n    const onDismiss = () => {\n      // OnDismiss is implemented on iOS only.\n      if (Platform.OS === 'ios') {\n        this.setState({isRendered: false}, () => {\n          if (this.props.onDismiss) {\n            this.props.onDismiss();\n          }\n        });\n      }\n    };\n\n    return (\n      <RCTModalHostView\n        animationType={animationType}\n        presentationStyle={presentationStyle}\n        transparent={this.props.transparent}\n        hardwareAccelerated={this.props.hardwareAccelerated}\n        onRequestClose={this.props.onRequestClose}\n        onShow={this.props.onShow}\n        onDismiss={onDismiss}\n        visible={this.props.visible}\n        statusBarTranslucent={this.props.statusBarTranslucent}\n        identifier={this._identifier}\n        style={styles.modal}\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        onStartShouldSetResponder={this._shouldSetResponder}\n        supportedOrientations={this.props.supportedOrientations}\n        onOrientationChange={this.props.onOrientationChange}\n        testID={this.props.testID}>\n        <VirtualizedListContextResetter>\n          <ScrollView.Context.Provider value={null}>\n            <View\n              style={[styles.container, containerStyles]}\n              collapsable={false}>\n              {innerChildren}\n            </View>\n          </ScrollView.Context.Provider>\n        </VirtualizedListContextResetter>\n      </RCTModalHostView>\n    );\n  }\n\n  // We don't want any responder events bubbling out of the modal.\n  _shouldSetResponder(): boolean {\n    return true;\n  }\n}\n\nconst side = I18nManager.getConstants().isRTL ? 'right' : 'left';\nconst styles = StyleSheet.create({\n  modal: {\n    position: 'absolute',\n  },\n  container: {\n    /* $FlowFixMe[invalid-computed-prop] (>=0.111.0 site=react_native_fb) This\n     * comment suppresses an error found when Flow v0.111 was deployed. To see\n     * the error, delete this comment and run Flow. */\n    [side]: 0,\n    top: 0,\n    flex: 1,\n  },\n});\n\nconst ExportedModal: React.AbstractComponent<\n  React.ElementConfig<typeof Modal>,\n> = ModalInjection.unstable_Modal ?? Modal;\n\nmodule.exports = ExportedModal;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport typeof Modal from './Modal';\n\nexport default {\n  unstable_Modal: (null: ?Modal),\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeModalManager';\nimport NativeModalManager from '../../src/private/specs/modules/NativeModalManager';\nexport default NativeModalManager;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../src/private/specs/components/RCTModalHostViewNativeComponent';\nimport RCTModalHostViewNativeComponent from '../../src/private/specs/components/RCTModalHostViewNativeComponent';\nexport default RCTModalHostViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeDevSettings';\nimport NativeDevSettings from '../../../src/private/specs/modules/NativeDevSettings';\nexport default NativeDevSettings;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativePermissionsAndroid';\nimport NativePermissionsAndroid from '../../src/private/specs/modules/NativePermissionsAndroid';\nexport default NativePermissionsAndroid;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {\n  PermissionStatus,\n  PermissionType,\n} from './NativePermissionsAndroid';\n\nimport NativeDialogManagerAndroid from '../NativeModules/specs/NativeDialogManagerAndroid';\nimport NativePermissionsAndroid from './NativePermissionsAndroid';\nimport invariant from 'invariant';\n\nconst Platform = require('../Utilities/Platform');\n\nexport type Rationale = {\n  title: string,\n  message: string,\n  buttonPositive?: string,\n  buttonNegative?: string,\n  buttonNeutral?: string,\n  ...\n};\n\nconst PERMISSION_REQUEST_RESULT = Object.freeze({\n  GRANTED: 'granted',\n  DENIED: 'denied',\n  NEVER_ASK_AGAIN: 'never_ask_again',\n});\n\nconst PERMISSIONS = Object.freeze({\n  READ_CALENDAR: 'android.permission.READ_CALENDAR',\n  WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',\n  CAMERA: 'android.permission.CAMERA',\n  READ_CONTACTS: 'android.permission.READ_CONTACTS',\n  WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',\n  GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',\n  ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',\n  ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',\n  ACCESS_BACKGROUND_LOCATION: 'android.permission.ACCESS_BACKGROUND_LOCATION',\n  RECORD_AUDIO: 'android.permission.RECORD_AUDIO',\n  READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',\n  CALL_PHONE: 'android.permission.CALL_PHONE',\n  READ_CALL_LOG: 'android.permission.READ_CALL_LOG',\n  WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',\n  ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',\n  READ_VOICEMAIL: 'com.android.voicemail.permission.READ_VOICEMAIL',\n  WRITE_VOICEMAIL: 'com.android.voicemail.permission.WRITE_VOICEMAIL',\n  USE_SIP: 'android.permission.USE_SIP',\n  PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',\n  BODY_SENSORS: 'android.permission.BODY_SENSORS',\n  BODY_SENSORS_BACKGROUND: 'android.permission.BODY_SENSORS_BACKGROUND',\n  SEND_SMS: 'android.permission.SEND_SMS',\n  RECEIVE_SMS: 'android.permission.RECEIVE_SMS',\n  READ_SMS: 'android.permission.READ_SMS',\n  RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',\n  RECEIVE_MMS: 'android.permission.RECEIVE_MMS',\n  READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',\n  READ_MEDIA_IMAGES: 'android.permission.READ_MEDIA_IMAGES',\n  READ_MEDIA_VIDEO: 'android.permission.READ_MEDIA_VIDEO',\n  READ_MEDIA_AUDIO: 'android.permission.READ_MEDIA_AUDIO',\n  READ_MEDIA_VISUAL_USER_SELECTED:\n    'android.permission.READ_MEDIA_VISUAL_USER_SELECTED',\n  WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE',\n  BLUETOOTH_CONNECT: 'android.permission.BLUETOOTH_CONNECT',\n  BLUETOOTH_SCAN: 'android.permission.BLUETOOTH_SCAN',\n  BLUETOOTH_ADVERTISE: 'android.permission.BLUETOOTH_ADVERTISE',\n  ACCESS_MEDIA_LOCATION: 'android.permission.ACCESS_MEDIA_LOCATION',\n  ACCEPT_HANDOVER: 'android.permission.ACCEPT_HANDOVER',\n  ACTIVITY_RECOGNITION: 'android.permission.ACTIVITY_RECOGNITION',\n  ANSWER_PHONE_CALLS: 'android.permission.ANSWER_PHONE_CALLS',\n  READ_PHONE_NUMBERS: 'android.permission.READ_PHONE_NUMBERS',\n  UWB_RANGING: 'android.permission.UWB_RANGING',\n  POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',\n  NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES',\n});\n\n/**\n * `PermissionsAndroid` provides access to Android M's new permissions model.\n *\n * See https://reactnative.dev/docs/permissionsandroid\n */\n\nclass PermissionsAndroid {\n  PERMISSIONS: {|\n    ACCEPT_HANDOVER: string,\n    ACCESS_BACKGROUND_LOCATION: string,\n    ACCESS_COARSE_LOCATION: string,\n    ACCESS_FINE_LOCATION: string,\n    ACCESS_MEDIA_LOCATION: string,\n    ACTIVITY_RECOGNITION: string,\n    ADD_VOICEMAIL: string,\n    READ_VOICEMAIL: string,\n    WRITE_VOICEMAIL: string,\n    ANSWER_PHONE_CALLS: string,\n    BLUETOOTH_ADVERTISE: string,\n    BLUETOOTH_CONNECT: string,\n    BLUETOOTH_SCAN: string,\n    BODY_SENSORS: string,\n    BODY_SENSORS_BACKGROUND: string,\n    CALL_PHONE: string,\n    CAMERA: string,\n    GET_ACCOUNTS: string,\n    NEARBY_WIFI_DEVICES: string,\n    POST_NOTIFICATIONS: string,\n    PROCESS_OUTGOING_CALLS: string,\n    READ_CALENDAR: string,\n    READ_CALL_LOG: string,\n    READ_CONTACTS: string,\n    READ_EXTERNAL_STORAGE: string,\n    READ_MEDIA_IMAGES: string,\n    READ_MEDIA_VIDEO: string,\n    READ_MEDIA_AUDIO: string,\n    READ_MEDIA_VISUAL_USER_SELECTED: string,\n    READ_PHONE_NUMBERS: string,\n    READ_PHONE_STATE: string,\n    READ_SMS: string,\n    RECEIVE_MMS: string,\n    RECEIVE_SMS: string,\n    RECEIVE_WAP_PUSH: string,\n    RECORD_AUDIO: string,\n    SEND_SMS: string,\n    USE_SIP: string,\n    UWB_RANGING: string,\n    WRITE_CALENDAR: string,\n    WRITE_CALL_LOG: string,\n    WRITE_CONTACTS: string,\n    WRITE_EXTERNAL_STORAGE: string,\n  |} = PERMISSIONS;\n  RESULTS: {|\n    DENIED: 'denied',\n    GRANTED: 'granted',\n    NEVER_ASK_AGAIN: 'never_ask_again',\n  |} = PERMISSION_REQUEST_RESULT;\n\n  /**\n   * DEPRECATED - use check\n   *\n   * Returns a promise resolving to a boolean value as to whether the specified\n   * permissions has been granted\n   *\n   * @deprecated\n   */\n  checkPermission(permission: PermissionType): Promise<boolean> {\n    console.warn(\n      '\"PermissionsAndroid.checkPermission\" is deprecated. Use \"PermissionsAndroid.check\" instead',\n    );\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve(false);\n    }\n\n    invariant(\n      NativePermissionsAndroid,\n      'PermissionsAndroid is not installed correctly.',\n    );\n\n    return NativePermissionsAndroid.checkPermission(permission);\n  }\n\n  /**\n   * Returns a promise resolving to a boolean value as to whether the specified\n   * permissions has been granted\n   *\n   * See https://reactnative.dev/docs/permissionsandroid#check\n   */\n  check(permission: PermissionType): Promise<boolean> {\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve(false);\n    }\n\n    invariant(\n      NativePermissionsAndroid,\n      'PermissionsAndroid is not installed correctly.',\n    );\n\n    return NativePermissionsAndroid.checkPermission(permission);\n  }\n\n  /**\n   * DEPRECATED - use request\n   *\n   * Prompts the user to enable a permission and returns a promise resolving to a\n   * boolean value indicating whether the user allowed or denied the request\n   *\n   * If the optional rationale argument is included (which is an object with a\n   * `title` and `message`), this function checks with the OS whether it is\n   * necessary to show a dialog explaining why the permission is needed\n   * (https://developer.android.com/training/permissions/requesting#explain)\n   * and then shows the system permission dialog\n   *\n   * @deprecated\n   */\n  async requestPermission(\n    permission: PermissionType,\n    rationale?: Rationale,\n  ): Promise<boolean> {\n    console.warn(\n      '\"PermissionsAndroid.requestPermission\" is deprecated. Use \"PermissionsAndroid.request\" instead',\n    );\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve(false);\n    }\n\n    const response = await this.request(permission, rationale);\n    return response === this.RESULTS.GRANTED;\n  }\n\n  /**\n   * Prompts the user to enable a permission and returns a promise resolving to a\n   * string value indicating whether the user allowed or denied the request\n   *\n   * See https://reactnative.dev/docs/permissionsandroid#request\n   */\n  async request(\n    permission: PermissionType,\n    rationale?: Rationale,\n  ): Promise<PermissionStatus> {\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve(this.RESULTS.DENIED);\n    }\n\n    invariant(\n      NativePermissionsAndroid,\n      'PermissionsAndroid is not installed correctly.',\n    );\n\n    if (rationale) {\n      const shouldShowRationale =\n        await NativePermissionsAndroid.shouldShowRequestPermissionRationale(\n          permission,\n        );\n\n      if (shouldShowRationale && !!NativeDialogManagerAndroid) {\n        return new Promise((resolve, reject) => {\n          const options = {\n            ...rationale,\n          };\n          NativeDialogManagerAndroid.showAlert(\n            /* $FlowFixMe[incompatible-exact] (>=0.111.0 site=react_native_fb)\n             * This comment suppresses an error found when Flow v0.111 was\n             * deployed. To see the error, delete this comment and run Flow.\n             */\n            options,\n            () => reject(new Error('Error showing rationale')),\n            () =>\n              resolve(NativePermissionsAndroid.requestPermission(permission)),\n          );\n        });\n      }\n    }\n    return NativePermissionsAndroid.requestPermission(permission);\n  }\n\n  /**\n   * Prompts the user to enable multiple permissions in the same dialog and\n   * returns an object with the permissions as keys and strings as values\n   * indicating whether the user allowed or denied the request\n   *\n   * See https://reactnative.dev/docs/permissionsandroid#requestmultiple\n   */\n  requestMultiple(\n    permissions: Array<PermissionType>,\n  ): Promise<{[permission: PermissionType]: PermissionStatus, ...}> {\n    if (Platform.OS !== 'android') {\n      console.warn(\n        '\"PermissionsAndroid\" module works only for Android platform.',\n      );\n      return Promise.resolve({});\n    }\n\n    invariant(\n      NativePermissionsAndroid,\n      'PermissionsAndroid is not installed correctly.',\n    );\n    return NativePermissionsAndroid.requestMultiplePermissions(permissions);\n  }\n}\n\nconst PermissionsAndroidInstance: PermissionsAndroid = new PermissionsAndroid();\n\nmodule.exports = PermissionsAndroidInstance;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\nlet isEnabled = false;\n\nif (Platform.OS === 'web') {\n  const canUseDOM = Boolean(\n    typeof window !== 'undefined' &&\n      window.document &&\n      window.document.createElement,\n  );\n\n  if (canUseDOM) {\n    /**\n     * Web browsers emulate mouse events (and hover states) after touch events.\n     * This code infers when the currently-in-use modality supports hover\n     * (including for multi-modality devices) and considers \"hover\" to be enabled\n     * if a mouse movement occurs more than 1 second after the last touch event.\n     * This threshold is long enough to account for longer delays between the\n     * browser firing touch and mouse events on low-powered devices.\n     */\n    const HOVER_THRESHOLD_MS = 1000;\n    let lastTouchTimestamp = 0;\n\n    const enableHover = () => {\n      if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n        return;\n      }\n      isEnabled = true;\n    };\n\n    const disableHover = () => {\n      lastTouchTimestamp = Date.now();\n      if (isEnabled) {\n        isEnabled = false;\n      }\n    };\n\n    document.addEventListener('touchstart', disableHover, true);\n    document.addEventListener('touchmove', disableHover, true);\n    document.addEventListener('mousemove', enableHover, true);\n  }\n}\n\nexport function isHoverEnabled(): boolean {\n  return isEnabled;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  MouseEvent,\n  PressEvent,\n} from '../Types/CoreEventTypes';\n\nimport SoundManager from '../Components/Sound/SoundManager';\nimport ReactNativeFeatureFlags from '../ReactNative/ReactNativeFeatureFlags';\nimport UIManager from '../ReactNative/UIManager';\nimport {type RectOrSize, normalizeRect} from '../StyleSheet/Rect';\nimport {type PointerEvent} from '../Types/CoreEventTypes';\nimport Platform from '../Utilities/Platform';\nimport {isHoverEnabled} from './HoverState';\nimport PressabilityPerformanceEventEmitter from './PressabilityPerformanceEventEmitter.js';\nimport {type PressabilityTouchSignal as TouchSignal} from './PressabilityTypes.js';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nexport type PressabilityConfig = $ReadOnly<{|\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Whether to disable initialization of the press gesture.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Amount to extend the `VisualRect` by to create `HitRect`.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Amount to extend the `HitRect` by to create `PressRect`.\n   */\n  pressRectOffset?: ?RectOrSize,\n\n  /**\n   * Whether to disable the systemm sound when `onPress` fires on Android.\n   **/\n  android_disableSound?: ?boolean,\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   */\n  delayHoverIn?: ?number,\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   */\n  delayHoverOut?: ?number,\n\n  /**\n   * Duration (in addition to `delayPressIn`) after which a press gesture is\n   * considered a long press gesture. Defaults to 500 (milliseconds).\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  delayPressIn?: ?number,\n\n  /**\n   * Duration to wait after letting up before calling `onPressOut`.\n   */\n  delayPressOut?: ?number,\n\n  /**\n   * Minimum duration to wait between calling `onPressIn` and `onPressOut`.\n   */\n  minPressDuration?: ?number,\n\n  /**\n   * Called after the element loses focus.\n   */\n  onBlur?: ?(event: BlurEvent) => mixed,\n\n  /**\n   * Called after the element is focused.\n   */\n  onFocus?: ?(event: FocusEvent) => mixed,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when a long press gesture has been triggered.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a press gesture has been triggered.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press is activated to provide visual feedback.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press location moves. (This should rarely be used.)\n   */\n  onPressMove?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press is deactivated to undo visual feedback.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Whether to prevent any other native components from becoming responder\n   * while this pressable is responder.\n   */\n  blockNativeResponder?: ?boolean,\n\n  /**\n   * Returns whether a long press gesture should cancel the press gesture.\n   * Defaults to true.\n   *\n   * @deprecated\n   */\n  onLongPressShouldCancelPress_DEPRECATED?: ?() => boolean,\n\n  /**\n   * If `cancelable` is set, this will be ignored.\n   *\n   * Returns whether to yield to a lock termination request (e.g. if a native\n   * scroll gesture attempts to steal the responder lock).\n   *\n   * @deprecated\n   */\n  onResponderTerminationRequest_DEPRECATED?: ?() => boolean,\n\n  /**\n   * If `disabled` is set, this will be ignored.\n   *\n   * Returns whether to start a press gesture.\n   *\n   * @deprecated\n   */\n  onStartShouldSetResponder_DEPRECATED?: ?() => boolean,\n|}>;\n\nexport type EventHandlers = $ReadOnly<{|\n  onBlur: (event: BlurEvent) => void,\n  onClick: (event: PressEvent) => void,\n  onFocus: (event: FocusEvent) => void,\n  onMouseEnter?: (event: MouseEvent) => void,\n  onMouseLeave?: (event: MouseEvent) => void,\n  onPointerEnter?: (event: PointerEvent) => void,\n  onPointerLeave?: (event: PointerEvent) => void,\n  onResponderGrant: (event: PressEvent) => void | boolean,\n  onResponderMove: (event: PressEvent) => void,\n  onResponderRelease: (event: PressEvent) => void,\n  onResponderTerminate: (event: PressEvent) => void,\n  onResponderTerminationRequest: () => boolean,\n  onStartShouldSetResponder: () => boolean,\n|}>;\n\ntype TouchState =\n  | 'NOT_RESPONDER'\n  | 'RESPONDER_INACTIVE_PRESS_IN'\n  | 'RESPONDER_INACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_PRESS_IN'\n  | 'RESPONDER_ACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_OUT'\n  | 'ERROR';\n\nconst Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'ERROR',\n    RESPONDER_TERMINATED: 'ERROR',\n    ENTER_PRESS_RECT: 'ERROR',\n    LEAVE_PRESS_RECT: 'ERROR',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_IN',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  ERROR: {\n    DELAY: 'NOT_RESPONDER',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'NOT_RESPONDER',\n    LEAVE_PRESS_RECT: 'NOT_RESPONDER',\n    LONG_PRESS_DETECTED: 'NOT_RESPONDER',\n  },\n});\n\nconst isActiveSignal = (signal: TouchState) =>\n  signal === 'RESPONDER_ACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n\nconst isActivationSignal = (signal: TouchState) =>\n  signal === 'RESPONDER_ACTIVE_PRESS_OUT' ||\n  signal === 'RESPONDER_ACTIVE_PRESS_IN';\n\nconst isPressInSignal = (signal: TouchState) =>\n  signal === 'RESPONDER_INACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n\nconst isTerminalSignal = (signal: TouchSignal) =>\n  signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';\n\nconst DEFAULT_LONG_PRESS_DELAY_MS = 500;\nconst DEFAULT_PRESS_RECT_OFFSETS = {\n  bottom: 30,\n  left: 20,\n  right: 20,\n  top: 20,\n};\nconst DEFAULT_MIN_PRESS_DURATION = 130;\n\nconst DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE = 10;\nlet longPressDeactivationDistance = DEFAULT_LONG_PRESS_DEACTIVATION_DISTANCE;\n\n/**\n * Pressability implements press handling capabilities.\n *\n * =========================== Pressability Tutorial ===========================\n *\n * The `Pressability` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press should trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * This should be consumed by functional components using `usePressability`. The\n * following steps are only relevant for using `Pressability` in classes:\n *\n * 1. Instantiate `Pressability` and store it on your component's state.\n *\n *    state = {\n *      pressability: new Pressability({\n *        // ...\n *      }),\n *    };\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressability.getEventHandlers()} />\n *    );\n *\n * 3. Update `Pressability` when your component mounts, updates, and unmounts.\n *\n *    componentDidMount() {\n *      this.state.pressability.configure(...);\n *    }\n *\n *    componentDidUpdate() {\n *      this.state.pressability.configure(...);\n *    }\n *\n *    componentWillUnmount() {\n *      this.state.pressability.reset();\n *    }\n *\n * ==================== Pressability Implementation Details ====================\n *\n * `Pressability` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`, which\n *  │  │  ┌────────────┐  │  │   is expanded via the prop `hitSlop`.\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates for\n *  │  └──────────────────┘  │   as long as the press stays within `PressRect`.\n *  │       PressRect    o   │\n *  └────────────────────│───┘\n *          Out Region   └────── `PressRect`, which is expanded via the prop\n *                               `pressRectOffset`, allows presses to move\n *                               beyond `HitRect` while maintaining activation\n *                               and being eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_IN            ├────────▶ │ PRESS_IN          ├────────────▶ │ LONG_PRESS_IN     │\n * └─┬───────────────────┘          └─┬─────────────────┘              └─┬─────────────────┘\n *   │           ▲                    │           ▲                      │           ▲\n *   │LEAVE_     │                    │LEAVE_     │                      │LEAVE_     │\n *   │PRESS_RECT │ENTER_              │PRESS_RECT │ENTER_                │PRESS_RECT │ENTER_\n *   │           │PRESS_RECT          │           │PRESS_RECT            │           │PRESS_RECT\n *   ▼           │                    ▼           │                      ▼           │\n * ┌─────────────┴───────┐          ┌─────────────┴─────┐              ┌─────────────┴─────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │              │ RESPONDER_ACTIVE_ │\n * │ PRESS_OUT           ├────────▶ │ PRESS_OUT         │              │ LONG_PRESS_OUT    │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onPress` and `onLongPress` that occur when a\n * responder is release while in the \"press in\" states.\n */\nexport default class Pressability {\n  _config: PressabilityConfig;\n  _eventHandlers: ?EventHandlers = null;\n  _hoverInDelayTimeout: ?TimeoutID = null;\n  _hoverOutDelayTimeout: ?TimeoutID = null;\n  _isHovered: boolean = false;\n  _longPressDelayTimeout: ?TimeoutID = null;\n  _pressDelayTimeout: ?TimeoutID = null;\n  _pressOutDelayTimeout: ?TimeoutID = null;\n  _responderID: ?number | React.ElementRef<HostComponent<mixed>> = null;\n  _responderRegion: ?$ReadOnly<{|\n    bottom: number,\n    left: number,\n    right: number,\n    top: number,\n  |}> = null;\n  _touchActivatePosition: ?$ReadOnly<{|\n    pageX: number,\n    pageY: number,\n  |}>;\n  _touchActivateTime: ?number;\n  _touchState: TouchState = 'NOT_RESPONDER';\n\n  constructor(config: PressabilityConfig) {\n    this.configure(config);\n  }\n\n  configure(config: PressabilityConfig): void {\n    this._config = config;\n  }\n\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  reset(): void {\n    this._cancelHoverInDelayTimeout();\n    this._cancelHoverOutDelayTimeout();\n    this._cancelLongPressDelayTimeout();\n    this._cancelPressDelayTimeout();\n    this._cancelPressOutDelayTimeout();\n\n    // Ensure that, if any async event handlers are fired after unmount\n    // due to a race, we don't call any configured callbacks.\n    this._config = Object.freeze({});\n  }\n\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  getEventHandlers(): EventHandlers {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n    return this._eventHandlers;\n  }\n\n  static setLongPressDeactivationDistance(distance: number): void {\n    longPressDeactivationDistance = distance;\n  }\n\n  _createEventHandlers(): EventHandlers {\n    const focusEventHandlers = {\n      onBlur: (event: BlurEvent): void => {\n        const {onBlur} = this._config;\n        if (onBlur != null) {\n          onBlur(event);\n        }\n      },\n      onFocus: (event: FocusEvent): void => {\n        const {onFocus} = this._config;\n        if (onFocus != null) {\n          onFocus(event);\n        }\n      },\n    };\n\n    const responderEventHandlers = {\n      onStartShouldSetResponder: (): boolean => {\n        const {disabled} = this._config;\n        if (disabled == null) {\n          const {onStartShouldSetResponder_DEPRECATED} = this._config;\n          return onStartShouldSetResponder_DEPRECATED == null\n            ? true\n            : onStartShouldSetResponder_DEPRECATED();\n        }\n        return !disabled;\n      },\n\n      onResponderGrant: (event: PressEvent): void | boolean => {\n        event.persist();\n\n        this._cancelPressOutDelayTimeout();\n\n        this._responderID = event.currentTarget;\n        this._touchState = 'NOT_RESPONDER';\n        this._receiveSignal('RESPONDER_GRANT', event);\n\n        const delayPressIn = normalizeDelay(this._config.delayPressIn);\n        if (delayPressIn > 0) {\n          this._pressDelayTimeout = setTimeout(() => {\n            this._receiveSignal('DELAY', event);\n          }, delayPressIn);\n        } else {\n          this._receiveSignal('DELAY', event);\n        }\n\n        const delayLongPress = normalizeDelay(\n          this._config.delayLongPress,\n          10,\n          DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn,\n        );\n        this._longPressDelayTimeout = setTimeout(() => {\n          this._handleLongPress(event);\n        }, delayLongPress + delayPressIn);\n\n        return this._config.blockNativeResponder === true;\n      },\n\n      onResponderMove: (event: PressEvent): void => {\n        const {onPressMove} = this._config;\n        if (onPressMove != null) {\n          onPressMove(event);\n        }\n\n        // Region may not have finished being measured, yet.\n        const responderRegion = this._responderRegion;\n        if (responderRegion == null) {\n          return;\n        }\n\n        const touch = getTouchFromPressEvent(event);\n        if (touch == null) {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n          return;\n        }\n\n        if (this._touchActivatePosition != null) {\n          const deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          const deltaY = this._touchActivatePosition.pageY - touch.pageY;\n          if (Math.hypot(deltaX, deltaY) > longPressDeactivationDistance) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n\n        if (this._isTouchWithinResponderRegion(touch, responderRegion)) {\n          this._receiveSignal('ENTER_PRESS_RECT', event);\n        } else {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n        }\n      },\n\n      onResponderRelease: (event: PressEvent): void => {\n        this._receiveSignal('RESPONDER_RELEASE', event);\n      },\n\n      onResponderTerminate: (event: PressEvent): void => {\n        this._receiveSignal('RESPONDER_TERMINATED', event);\n      },\n\n      onResponderTerminationRequest: (): boolean => {\n        const {cancelable} = this._config;\n        if (cancelable == null) {\n          const {onResponderTerminationRequest_DEPRECATED} = this._config;\n          return onResponderTerminationRequest_DEPRECATED == null\n            ? true\n            : onResponderTerminationRequest_DEPRECATED();\n        }\n        return cancelable;\n      },\n\n      onClick: (event: PressEvent): void => {\n        // If event has `pointerType`, it was emitted from a PointerEvent and\n        // we should ignore it to avoid triggering `onPress` twice.\n        if (event?.nativeEvent?.hasOwnProperty?.('pointerType')) {\n          return;\n        }\n\n        // for non-pointer click events (e.g. accessibility clicks), we should only dispatch when we're the \"real\" target\n        // in particular, we shouldn't respond to clicks from nested pressables\n        if (event?.currentTarget !== event?.target) {\n          event?.stopPropagation();\n          return;\n        }\n\n        const {onPress, disabled} = this._config;\n        if (onPress != null && disabled !== true) {\n          onPress(event);\n        }\n      },\n    };\n\n    if (process.env.NODE_ENV === 'test') {\n      // We are setting this in order to find this node in ReactNativeTestTools\n      // $FlowFixMe[prop-missing]\n      responderEventHandlers.onStartShouldSetResponder.testOnly_pressabilityConfig =\n        () => this._config;\n    }\n\n    if (\n      ReactNativeFeatureFlags.shouldPressibilityUseW3CPointerEventsForHover()\n    ) {\n      const hoverPointerEvents = {\n        onPointerEnter: (undefined: void | (PointerEvent => void)),\n        onPointerLeave: (undefined: void | (PointerEvent => void)),\n      };\n      const {onHoverIn, onHoverOut} = this._config;\n      if (onHoverIn != null) {\n        hoverPointerEvents.onPointerEnter = (event: PointerEvent) => {\n          this._isHovered = true;\n          this._cancelHoverOutDelayTimeout();\n          if (onHoverIn != null) {\n            const delayHoverIn = normalizeDelay(this._config.delayHoverIn);\n            if (delayHoverIn > 0) {\n              event.persist();\n              this._hoverInDelayTimeout = setTimeout(() => {\n                onHoverIn(convertPointerEventToMouseEvent(event));\n              }, delayHoverIn);\n            } else {\n              onHoverIn(convertPointerEventToMouseEvent(event));\n            }\n          }\n        };\n      }\n      if (onHoverOut != null) {\n        hoverPointerEvents.onPointerLeave = (event: PointerEvent) => {\n          if (this._isHovered) {\n            this._isHovered = false;\n            this._cancelHoverInDelayTimeout();\n            if (onHoverOut != null) {\n              const delayHoverOut = normalizeDelay(this._config.delayHoverOut);\n              if (delayHoverOut > 0) {\n                event.persist();\n                this._hoverOutDelayTimeout = setTimeout(() => {\n                  onHoverOut(convertPointerEventToMouseEvent(event));\n                }, delayHoverOut);\n              } else {\n                onHoverOut(convertPointerEventToMouseEvent(event));\n              }\n            }\n          }\n        };\n      }\n      return {\n        ...focusEventHandlers,\n        ...responderEventHandlers,\n        ...hoverPointerEvents,\n      };\n    } else {\n      const mouseEventHandlers =\n        Platform.OS === 'ios' || Platform.OS === 'android'\n          ? null\n          : {\n              onMouseEnter: (event: MouseEvent): void => {\n                if (isHoverEnabled()) {\n                  this._isHovered = true;\n                  this._cancelHoverOutDelayTimeout();\n                  const {onHoverIn} = this._config;\n                  if (onHoverIn != null) {\n                    const delayHoverIn = normalizeDelay(\n                      this._config.delayHoverIn,\n                    );\n                    if (delayHoverIn > 0) {\n                      event.persist();\n                      this._hoverInDelayTimeout = setTimeout(() => {\n                        onHoverIn(event);\n                      }, delayHoverIn);\n                    } else {\n                      onHoverIn(event);\n                    }\n                  }\n                }\n              },\n\n              onMouseLeave: (event: MouseEvent): void => {\n                if (this._isHovered) {\n                  this._isHovered = false;\n                  this._cancelHoverInDelayTimeout();\n                  const {onHoverOut} = this._config;\n                  if (onHoverOut != null) {\n                    const delayHoverOut = normalizeDelay(\n                      this._config.delayHoverOut,\n                    );\n                    if (delayHoverOut > 0) {\n                      event.persist();\n                      this._hoverInDelayTimeout = setTimeout(() => {\n                        onHoverOut(event);\n                      }, delayHoverOut);\n                    } else {\n                      onHoverOut(event);\n                    }\n                  }\n                }\n              },\n            };\n      return {\n        ...focusEventHandlers,\n        ...responderEventHandlers,\n        ...mouseEventHandlers,\n      };\n    }\n  }\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  _receiveSignal(signal: TouchSignal, event: PressEvent): void {\n    // Especially on iOS, not all events have timestamps associated.\n    // For telemetry purposes, this doesn't matter too much, as long as *some* do.\n    // Since the native timestamp is integral for logging telemetry, just skip\n    // events if they don't have a timestamp attached.\n    if (event.nativeEvent.timestamp != null) {\n      PressabilityPerformanceEventEmitter.emitEvent(() => {\n        return {\n          signal,\n          nativeTimestamp: event.nativeEvent.timestamp,\n        };\n      });\n    }\n\n    const prevState = this._touchState;\n    const nextState = Transitions[prevState]?.[signal];\n    if (this._responderID == null && signal === 'RESPONDER_RELEASE') {\n      return;\n    }\n    invariant(\n      nextState != null && nextState !== 'ERROR',\n      'Pressability: Invalid signal `%s` for state `%s` on responder: %s',\n      signal,\n      prevState,\n      typeof this._responderID === 'number'\n        ? this._responderID\n        : '<<host component>>',\n    );\n    if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n      this._touchState = nextState;\n    }\n  }\n\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  _performTransitionSideEffects(\n    prevState: TouchState,\n    nextState: TouchState,\n    signal: TouchSignal,\n    event: PressEvent,\n  ): void {\n    if (isTerminalSignal(signal)) {\n      this._touchActivatePosition = null;\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      prevState === 'NOT_RESPONDER' &&\n      nextState === 'RESPONDER_INACTIVE_PRESS_IN';\n\n    const isActivationTransition =\n      !isActivationSignal(prevState) && isActivationSignal(nextState);\n\n    if (isInitialTransition || isActivationTransition) {\n      this._measureResponderRegion();\n    }\n\n    if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {\n      const {onLongPress} = this._config;\n      if (onLongPress != null) {\n        onLongPress(event);\n      }\n    }\n\n    const isPrevActive = isActiveSignal(prevState);\n    const isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {\n      // If we never activated (due to delays), activate and deactivate now.\n      if (!isNextActive && !isPrevActive) {\n        this._activate(event);\n        this._deactivate(event);\n      }\n      const {onLongPress, onPress, android_disableSound} = this._config;\n      if (onPress != null) {\n        const isPressCanceledByLongPress =\n          onLongPress != null &&\n          prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN' &&\n          this._shouldLongPressCancelPress();\n        if (!isPressCanceledByLongPress) {\n          if (Platform.OS === 'android' && android_disableSound !== true) {\n            SoundManager.playTouchSound();\n          }\n          onPress(event);\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  }\n\n  _activate(event: PressEvent): void {\n    const {onPressIn} = this._config;\n    const {pageX, pageY} = getTouchFromPressEvent(event);\n    this._touchActivatePosition = {pageX, pageY};\n    this._touchActivateTime = Date.now();\n    if (onPressIn != null) {\n      onPressIn(event);\n    }\n  }\n\n  _deactivate(event: PressEvent): void {\n    const {onPressOut} = this._config;\n    if (onPressOut != null) {\n      const minPressDuration = normalizeDelay(\n        this._config.minPressDuration,\n        0,\n        DEFAULT_MIN_PRESS_DURATION,\n      );\n      const pressDuration = Date.now() - (this._touchActivateTime ?? 0);\n      const delayPressOut = Math.max(\n        minPressDuration - pressDuration,\n        normalizeDelay(this._config.delayPressOut),\n      );\n      if (delayPressOut > 0) {\n        event.persist();\n        this._pressOutDelayTimeout = setTimeout(() => {\n          onPressOut(event);\n        }, delayPressOut);\n      } else {\n        onPressOut(event);\n      }\n    }\n    this._touchActivateTime = null;\n  }\n\n  _measureResponderRegion(): void {\n    if (this._responderID == null) {\n      return;\n    }\n\n    if (typeof this._responderID === 'number') {\n      UIManager.measure(this._responderID, this._measureCallback);\n    } else {\n      this._responderID.measure(this._measureCallback);\n    }\n  }\n\n  _measureCallback = (\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n    pageX: number,\n    pageY: number,\n  ) => {\n    if (!left && !top && !width && !height && !pageX && !pageY) {\n      return;\n    }\n    this._responderRegion = {\n      bottom: pageY + height,\n      left: pageX,\n      right: pageX + width,\n      top: pageY,\n    };\n  };\n\n  _isTouchWithinResponderRegion(\n    touch: $PropertyType<PressEvent, 'nativeEvent'>,\n    responderRegion: $ReadOnly<{|\n      bottom: number,\n      left: number,\n      right: number,\n      top: number,\n    |}>,\n  ): boolean {\n    const hitSlop = normalizeRect(this._config.hitSlop);\n    const pressRectOffset = normalizeRect(this._config.pressRectOffset);\n\n    let regionBottom = responderRegion.bottom;\n    let regionLeft = responderRegion.left;\n    let regionRight = responderRegion.right;\n    let regionTop = responderRegion.top;\n\n    if (hitSlop != null) {\n      if (hitSlop.bottom != null) {\n        regionBottom += hitSlop.bottom;\n      }\n      if (hitSlop.left != null) {\n        regionLeft -= hitSlop.left;\n      }\n      if (hitSlop.right != null) {\n        regionRight += hitSlop.right;\n      }\n      if (hitSlop.top != null) {\n        regionTop -= hitSlop.top;\n      }\n    }\n\n    regionBottom +=\n      pressRectOffset?.bottom ?? DEFAULT_PRESS_RECT_OFFSETS.bottom;\n    regionLeft -= pressRectOffset?.left ?? DEFAULT_PRESS_RECT_OFFSETS.left;\n    regionRight += pressRectOffset?.right ?? DEFAULT_PRESS_RECT_OFFSETS.right;\n    regionTop -= pressRectOffset?.top ?? DEFAULT_PRESS_RECT_OFFSETS.top;\n\n    return (\n      touch.pageX > regionLeft &&\n      touch.pageX < regionRight &&\n      touch.pageY > regionTop &&\n      touch.pageY < regionBottom\n    );\n  }\n\n  _handleLongPress(event: PressEvent): void {\n    if (\n      this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' ||\n      this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n    ) {\n      this._receiveSignal('LONG_PRESS_DETECTED', event);\n    }\n  }\n\n  _shouldLongPressCancelPress(): boolean {\n    return (\n      this._config.onLongPressShouldCancelPress_DEPRECATED == null ||\n      this._config.onLongPressShouldCancelPress_DEPRECATED()\n    );\n  }\n\n  _cancelHoverInDelayTimeout(): void {\n    if (this._hoverInDelayTimeout != null) {\n      clearTimeout(this._hoverInDelayTimeout);\n      this._hoverInDelayTimeout = null;\n    }\n  }\n\n  _cancelHoverOutDelayTimeout(): void {\n    if (this._hoverOutDelayTimeout != null) {\n      clearTimeout(this._hoverOutDelayTimeout);\n      this._hoverOutDelayTimeout = null;\n    }\n  }\n\n  _cancelLongPressDelayTimeout(): void {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressDelayTimeout(): void {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressOutDelayTimeout(): void {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n}\n\nfunction normalizeDelay(\n  delay: ?number,\n  min: number = 0,\n  fallback: number = 0,\n): number {\n  return Math.max(min, delay ?? fallback);\n}\n\nconst getTouchFromPressEvent = (event: PressEvent) => {\n  const {changedTouches, touches} = event.nativeEvent;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n  return event.nativeEvent;\n};\n\nfunction convertPointerEventToMouseEvent(input: PointerEvent): MouseEvent {\n  const {clientX, clientY} = input.nativeEvent;\n  return {\n    ...input,\n    nativeEvent: {\n      clientX,\n      clientY,\n      pageX: clientX,\n      pageY: clientY,\n      timestamp: input.timeStamp,\n    },\n  };\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ColorValue} from '../StyleSheet/StyleSheet';\n\nimport View from '../Components/View/View';\nimport normalizeColor from '../StyleSheet/normalizeColor';\nimport {type RectOrSize, normalizeRect} from '../StyleSheet/Rect';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  color: ColorValue,\n  hitSlop: ?RectOrSize,\n|}>;\n\n/**\n * Displays a debug overlay to visualize press targets when enabled via the\n * React Native Inspector. Calls to this module should be guarded by `__DEV__`,\n * for example:\n *\n *   return (\n *     <View>\n *       {children}\n *       {__DEV__ ? (\n *         <PressabilityDebugView color=\"...\" hitSlop={props.hitSlop} />\n *       ) : null}\n *     </View>\n *   );\n *\n */\nexport function PressabilityDebugView(props: Props): React.Node {\n  if (__DEV__) {\n    if (isEnabled()) {\n      const normalizedColor = normalizeColor(props.color);\n      if (typeof normalizedColor !== 'number') {\n        return null;\n      }\n      const baseColor =\n        '#' + (normalizedColor ?? 0).toString(16).padStart(8, '0');\n      const hitSlop = normalizeRect(props.hitSlop);\n      return (\n        <View\n          pointerEvents=\"none\"\n          style={\n            // eslint-disable-next-line react-native/no-inline-styles\n            {\n              backgroundColor: baseColor.slice(0, -2) + '0F', // 15%\n              borderColor: baseColor.slice(0, -2) + '55', // 85%\n              borderStyle: 'dashed',\n              borderWidth: 1,\n              bottom: -(hitSlop?.bottom ?? 0),\n              left: -(hitSlop?.left ?? 0),\n              position: 'absolute',\n              right: -(hitSlop?.right ?? 0),\n              top: -(hitSlop?.top ?? 0),\n            }\n          }\n        />\n      );\n    }\n  }\n  return null;\n}\n\nlet isDebugEnabled = false;\n\nexport function isEnabled(): boolean {\n  if (__DEV__) {\n    return isDebugEnabled;\n  }\n  return false;\n}\n\nexport function setEnabled(value: boolean): void {\n  if (__DEV__) {\n    isDebugEnabled = value;\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport {type PressabilityTouchSignal as TouchSignal} from './PressabilityTypes.js';\n\nexport type PressabilityPerformanceEvent = $ReadOnly<{|\n  signal: TouchSignal,\n  nativeTimestamp: number,\n|}>;\nexport type PressabilityPerformanceEventListener =\n  PressabilityPerformanceEvent => void;\n\nclass PressabilityPerformanceEventEmitter {\n  _listeners: Array<PressabilityPerformanceEventListener> = [];\n\n  constructor() {}\n\n  addListener(listener: PressabilityPerformanceEventListener): void {\n    this._listeners.push(listener);\n  }\n\n  removeListener(listener: PressabilityPerformanceEventListener): void {\n    const index = this._listeners.indexOf(listener);\n    if (index > -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  emitEvent(constructEvent: () => PressabilityPerformanceEvent): void {\n    if (this._listeners.length === 0) {\n      return;\n    }\n\n    const event = constructEvent();\n    this._listeners.forEach(listener => listener(event));\n  }\n}\n\nconst PressabilityPerformanceEventEmitterSingleton: PressabilityPerformanceEventEmitter =\n  new PressabilityPerformanceEventEmitter();\n\nexport default PressabilityPerformanceEventEmitterSingleton;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Pressability, {\n  type EventHandlers,\n  type PressabilityConfig,\n} from './Pressability';\nimport {useEffect, useRef} from 'react';\n\n/**\n * Creates a persistent instance of `Pressability` that automatically configures\n * itself and resets. Accepts null `config` to support lazy initialization. Once\n * initialized, will not un-initialize until the component has been unmounted.\n *\n * In order to use `usePressability`, do the following:\n *\n *   const config = useMemo(...);\n *   const eventHandlers = usePressability(config);\n *   const pressableView = <View {...eventHandlers} />;\n *\n */\nexport default function usePressability(\n  config: ?PressabilityConfig,\n): ?EventHandlers {\n  const pressabilityRef = useRef<?Pressability>(null);\n  if (config != null && pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n  const pressability = pressabilityRef.current;\n\n  // On the initial mount, this is a no-op. On updates, `pressability` will be\n  // re-configured to use the new configuration.\n  useEffect(() => {\n    if (config != null && pressability != null) {\n      pressability.configure(config);\n    }\n  }, [config, pressability]);\n\n  // On unmount, reset pending state and timers inside `pressability`. This is\n  // a separate effect because we do not want to reset when `config` changes.\n  useEffect(() => {\n    if (pressability != null) {\n      return () => {\n        pressability.reset();\n      };\n    }\n  }, [pressability]);\n\n  return pressability == null ? null : pressability.getEventHandlers();\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativePushNotificationManagerIOS';\nimport NativePushNotificationManagerIOS from '../../src/private/specs/modules/NativePushNotificationManagerIOS';\nexport default NativePushNotificationManagerIOS;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\nimport NativePushNotificationManagerIOS from './NativePushNotificationManagerIOS';\nimport invariant from 'invariant';\n\ntype NativePushNotificationIOSEventDefinitions = {\n  remoteNotificationReceived: [\n    {\n      notificationId: string,\n      remote: boolean,\n      ...\n    },\n  ],\n  remoteNotificationsRegistered: [\n    {\n      deviceToken?: ?string,\n      ...\n    },\n  ],\n  remoteNotificationRegistrationError: [\n    {\n      message: string,\n      code: number,\n      details: {...},\n    },\n  ],\n  localNotificationReceived: [{...}],\n};\n\nconst PushNotificationEmitter =\n  new NativeEventEmitter<NativePushNotificationIOSEventDefinitions>(\n    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n    // If you want to use the native module on other platforms, please remove this condition and test its behavior\n    Platform.OS !== 'ios' ? null : NativePushNotificationManagerIOS,\n  );\n\nconst _notifHandlers = new Map<string, void | EventSubscription>();\n\nconst DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nconst NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nconst NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nconst DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nexport type ContentAvailable = 1 | null | void;\n\nexport type FetchResult = {\n  NewData: string,\n  NoData: string,\n  ResultFailed: string,\n  ...\n};\n\n/**\n * An event emitted by PushNotificationIOS.\n */\nexport type PushNotificationEventName = $Keys<{\n  /**\n   * Fired when a remote notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`. This will handle notifications\n   * that arrive in the foreground or were tapped to open the app from the\n   * background.\n   */\n  notification: string,\n  /**\n   * Fired when a local notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`. This will handle notifications\n   * that arrive in the foreground or were tapped to open the app from the\n   * background.\n   */\n  localNotification: string,\n  /**\n   * Fired when the user registers for remote notifications. The handler will be\n   * invoked with a hex string representing the deviceToken.\n   */\n  register: string,\n  /**\n   * Fired when the user fails to register for remote notifications. Typically\n   * occurs due to APNS issues or if the device is a simulator. The handler\n   * will be invoked with {message: string, code: number, details: any}.\n   */\n  registrationError: string,\n  ...\n}>;\n\n/**\n *\n * Handle notifications for your app, including scheduling and permissions.\n *\n * See https://reactnative.dev/docs/pushnotificationios\n */\nclass PushNotificationIOS {\n  _data: Object;\n  _alert: string | Object;\n  _sound: string;\n  _category: string;\n  _contentAvailable: ContentAvailable;\n  _badgeCount: number;\n  _notificationId: string;\n  _isRemote: boolean;\n  _remoteNotificationCompleteCallbackCalled: boolean;\n  _threadID: string;\n\n  static FetchResult: FetchResult = {\n    NewData: 'UIBackgroundFetchResultNewData',\n    NoData: 'UIBackgroundFetchResultNoData',\n    ResultFailed: 'UIBackgroundFetchResultFailed',\n  };\n\n  /**\n   * Schedules a local notification for immediate presentation.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#presentlocalnotification\n   */\n  static presentLocalNotification(details: Object): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.presentLocalNotification(details);\n  }\n\n  /**\n   * Schedules a local notification for future presentation.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#schedulelocalnotification\n   */\n  static scheduleLocalNotification(details: Object): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.scheduleLocalNotification(details);\n  }\n\n  /**\n   * Cancels all scheduled local notifications.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#cancelalllocalnotifications\n   */\n  static cancelAllLocalNotifications(): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.cancelAllLocalNotifications();\n  }\n\n  /**\n   * Removes all delivered notifications from Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#removealldeliverednotifications\n   */\n  static removeAllDeliveredNotifications(): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Provides a list of the app’s notifications that are currently displayed\n   * in Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getdeliverednotifications\n   */\n  static getDeliveredNotifications(\n    callback: (notifications: Array<Object>) => void,\n  ): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getDeliveredNotifications(callback);\n  }\n\n  /**\n   * Removes the specified notifications from Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#removedeliverednotifications\n   */\n  static removeDeliveredNotifications(identifiers: Array<string>): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.removeDeliveredNotifications(identifiers);\n  }\n\n  /**\n   * Sets the badge number for the app icon on the Home Screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#setapplicationiconbadgenumber\n   */\n  static setApplicationIconBadgeNumber(number: number): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.setApplicationIconBadgeNumber(number);\n  }\n\n  /**\n   * Gets the current badge number for the app icon on the Home Screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getapplicationiconbadgenumber\n   */\n  static getApplicationIconBadgeNumber(callback: Function): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getApplicationIconBadgeNumber(callback);\n  }\n\n  /**\n   * Cancels any scheduled local notifications which match the fields in the\n   * provided `userInfo`.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#cancellocalnotification\n   */\n  static cancelLocalNotifications(userInfo: Object): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.cancelLocalNotifications(userInfo);\n  }\n\n  /**\n   * Gets the list of local notifications that are currently scheduled.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getscheduledlocalnotifications\n   */\n  static getScheduledLocalNotifications(callback: Function): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getScheduledLocalNotifications(callback);\n  }\n\n  /**\n   * Attaches a listener to notification events including local notifications,\n   * remote notifications, and notification registration results.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#addeventlistener\n   */\n  static addEventListener(\n    type: PushNotificationEventName,\n    handler: Function,\n  ): void {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    let listener;\n    if (type === 'notification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'localNotification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_LOCAL_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'register') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTER_EVENT,\n        registrationInfo => {\n          handler(registrationInfo.deviceToken);\n        },\n      );\n    } else if (type === 'registrationError') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTRATION_ERROR_EVENT,\n        errorInfo => {\n          handler(errorInfo);\n        },\n      );\n    }\n    _notifHandlers.set(type, listener);\n  }\n\n  /**\n   * Removes the event listener. Do this in `componentWillUnmount` to prevent\n   * memory leaks.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#removeeventlistener\n   */\n  static removeEventListener(type: PushNotificationEventName): void {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    const listener = _notifHandlers.get(type);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _notifHandlers.delete(type);\n  }\n\n  /**\n   * Requests notification permissions from iOS, prompting the user with a\n   * dialog box. By default, it will request all notification permissions, but\n   * you can optionally specify which permissions to request.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#requestpermissions\n   */\n  static requestPermissions(permissions?: {\n    alert?: boolean,\n    badge?: boolean,\n    sound?: boolean,\n    ...\n  }): Promise<{\n    alert: boolean,\n    badge: boolean,\n    sound: boolean,\n    ...\n  }> {\n    let requestedPermissions = {\n      alert: true,\n      badge: true,\n      sound: true,\n    };\n    if (permissions) {\n      requestedPermissions = {\n        alert: !!permissions.alert,\n        badge: !!permissions.badge,\n        sound: !!permissions.sound,\n      };\n    }\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    return NativePushNotificationManagerIOS.requestPermissions(\n      requestedPermissions,\n    );\n  }\n\n  /**\n   * Unregister for all remote notifications received via Apple Push Notification\n   * service. This should be called in rare circumstances only.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#abandonpermissions\n   */\n  static abandonPermissions(): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.abandonPermissions();\n  }\n\n  /**\n   * Check which push permissions are currently enabled. `callback` will be\n   * invoked with a `Permissions` object.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#checkpermissions\n   */\n  static checkPermissions(callback: Function): void {\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.checkPermissions(callback);\n  }\n\n  /**\n   * This method returns a promise that resolves to either the notification\n   * object if the app was launched by a push notification, or `null` otherwise.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getinitialnotification\n   */\n  static getInitialNotification(): Promise<?PushNotificationIOS> {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    return NativePushNotificationManagerIOS.getInitialNotification().then(\n      notification => {\n        return notification && new PushNotificationIOS(notification);\n      },\n    );\n  }\n\n  /**\n   * This method returns a promise that resolves to the current notification\n   * authorization status. See UNAuthorizationStatus for possible values.\n   */\n  static getAuthorizationStatus(\n    callback: (authorizationStatus: number) => void,\n  ): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n\n    NativePushNotificationManagerIOS.getAuthorizationStatus(callback);\n  }\n\n  /**\n   * You will never need to instantiate `PushNotificationIOS` yourself.\n   * Listening to the `notification` event and invoking\n   * `getInitialNotification` is sufficient.\n   *\n   */\n  constructor(nativeNotif: Object) {\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    if (nativeNotif.remote) {\n      // Extract data from Apple's `aps` dict as defined:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService\n      Object.keys(nativeNotif).forEach(notifKey => {\n        const notifVal = nativeNotif[notifKey];\n        if (notifKey === 'aps') {\n          this._alert = notifVal.alert;\n          this._sound = notifVal.sound;\n          this._badgeCount = notifVal.badge;\n          this._category = notifVal.category;\n          this._contentAvailable = notifVal['content-available'];\n          this._threadID = notifVal['thread-id'];\n        } else {\n          this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      // Local notifications aren't being sent down with `aps` dict.\n      this._badgeCount = nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.soundName;\n      this._alert = nativeNotif.alertBody;\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n    }\n  }\n\n  /**\n   * This method is available for remote notifications that have been received via:\n   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`. See docs\n   * for more information.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#finish\n   */\n  finish(fetchResult: string): void {\n    if (\n      !this._isRemote ||\n      !this._notificationId ||\n      this._remoteNotificationCompleteCallbackCalled\n    ) {\n      return;\n    }\n    this._remoteNotificationCompleteCallbackCalled = true;\n\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.onFinishRemoteNotification(\n      this._notificationId,\n      fetchResult,\n    );\n  }\n\n  /**\n   * An alias for `getAlert` to get the notification's main message string.\n   */\n  getMessage(): ?string | ?Object {\n    // alias because \"alert\" is an ambiguous name\n    return this._alert;\n  }\n\n  /**\n   * Gets the sound string from the `aps` object. This will be `null` for local\n   * notifications.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getsound\n   */\n  getSound(): ?string {\n    return this._sound;\n  }\n\n  /**\n   * Gets the category string from the `aps` object.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getcategory\n   */\n  getCategory(): ?string {\n    return this._category;\n  }\n\n  /**\n   * Gets the notification's main message from the `aps` object. Also see the\n   * alias: `getMessage()`.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getalert\n   */\n  getAlert(): ?string | ?Object {\n    return this._alert;\n  }\n\n  /**\n   * Gets the content-available number from the `aps` object.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getcontentavailable\n   */\n  getContentAvailable(): ContentAvailable {\n    return this._contentAvailable;\n  }\n\n  /**\n   * Gets the badge count number from the `aps` object.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getbadgecount\n   */\n  getBadgeCount(): ?number {\n    return this._badgeCount;\n  }\n\n  /**\n   * Gets the data object on the notification.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getdata\n   */\n  getData(): ?Object {\n    return this._data;\n  }\n\n  /**\n   * Gets the thread ID on the notification.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios#getthreadid\n   */\n  getThreadID(): ?string {\n    return this._threadID;\n  }\n}\n\nmodule.exports = PushNotificationIOS;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {I18nManagerConstants} from './NativeI18nManager';\n\nimport NativeI18nManager from './NativeI18nManager';\n\nconst i18nConstants: I18nManagerConstants = getI18nManagerConstants();\n\nfunction getI18nManagerConstants(): I18nManagerConstants {\n  if (NativeI18nManager) {\n    const {isRTL, doLeftAndRightSwapInRTL, localeIdentifier} =\n      NativeI18nManager.getConstants();\n    return {isRTL, doLeftAndRightSwapInRTL, localeIdentifier};\n  }\n\n  return {\n    isRTL: false,\n    doLeftAndRightSwapInRTL: true,\n  };\n}\n\nmodule.exports = {\n  getConstants: (): I18nManagerConstants => {\n    return i18nConstants;\n  },\n\n  allowRTL: (shouldAllow: boolean) => {\n    if (!NativeI18nManager) {\n      return;\n    }\n\n    NativeI18nManager.allowRTL(shouldAllow);\n  },\n\n  forceRTL: (shouldForce: boolean) => {\n    if (!NativeI18nManager) {\n      return;\n    }\n\n    NativeI18nManager.forceRTL(shouldForce);\n  },\n\n  swapLeftAndRightInRTL: (flipStyles: boolean) => {\n    if (!NativeI18nManager) {\n      return;\n    }\n\n    NativeI18nManager.swapLeftAndRightInRTL(flipStyles);\n  },\n\n  isRTL: i18nConstants.isRTL,\n  doLeftAndRightSwapInRTL: i18nConstants.doLeftAndRightSwapInRTL,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeI18nManager';\nimport NativeI18nManager from '../../src/private/specs/modules/NativeI18nManager';\nexport default NativeI18nManager;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n/**\n * IMPORTANT!!\n *\n * This module cannot import `ReactFabric` (directly or indirectly)\n * because it can be used by apps only using the legacy renderer.\n * In that case `nativeFabricUIManager` isn't defined and `ReactFabric` throws.\n */\n\nexport function isPublicInstance(maybeInstance: mixed): boolean {\n  return (\n    maybeInstance != null &&\n    // TODO: implement a better check when the instance is defined in the React Native repository.\n    (maybeInstance.__nativeTag != null ||\n      // TODO: remove this check when syncing the new version of the renderer from React to React Native.\n      isLegacyFabricInstance(maybeInstance))\n  );\n}\n\nfunction isLegacyFabricInstance(maybeInstance: mixed): boolean {\n  /* eslint-disable dot-notation */\n  return (\n    maybeInstance != null &&\n    // $FlowExpectedError[incompatible-use]\n    maybeInstance['_internalInstanceHandle'] != null &&\n    maybeInstance['_internalInstanceHandle'].stateNode != null &&\n    maybeInstance['_internalInstanceHandle'].stateNode.canonical != null\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport type FeatureFlags = {|\n  /**\n   * Function used to enable / disable W3C pointer event emitting in React Native.\n   * If enabled you must also flip the equivalent native flags on each platform:\n   * iOS -> RCTSetDispatchW3CPointerEvents\n   * Android -> ReactFeatureFlags.dispatchPointerEvents\n   */\n  shouldEmitW3CPointerEvents: () => boolean,\n  /**\n   * Function used to enable / disable Pressibility from using W3C Pointer Events\n   * for its hover callbacks\n   */\n  shouldPressibilityUseW3CPointerEventsForHover: () => boolean,\n|};\n\nconst ReactNativeFeatureFlags: FeatureFlags = {\n  shouldEmitW3CPointerEvents: () => false,\n  shouldPressibilityUseW3CPointerEventsForHover: () => false,\n};\n\nmodule.exports = ReactNativeFeatureFlags;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\n\nconst createReactNativeComponentClass = require('../Renderer/shims/createReactNativeComponentClass');\nconst getNativeComponentAttributes = require('./getNativeComponentAttributes');\n\n/**\n * Creates values that can be used like React components which represent native\n * view managers. You should create JavaScript modules that wrap these values so\n * that the results are memoized. Example:\n *\n *   const View = requireNativeComponent('RCTView');\n *\n */\n\nconst requireNativeComponent = <T>(uiViewClassName: string): HostComponent<T> =>\n  ((createReactNativeComponentClass(uiViewClassName, () =>\n    getNativeComponentAttributes(uiViewClassName),\n  ): any): HostComponent<T>);\n\nexport default requireNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noformat\n * @flow strict-local\n * @nolint\n * @generated SignedSource<<ede54ac2fa1b9a09e234cdf098048989>>\n */\n\n'use strict';\n\nimport {ReactNativeViewConfigRegistry} from 'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface';\nimport {type ViewConfig} from './ReactNativeTypes';\n\nconst {register} = ReactNativeViewConfigRegistry;\n\n/**\n * Creates a renderable ReactNative host component.\n * Use this method for view configs that are loaded from UIManager.\n * Use createReactNativeComponentClass() for view configs defined within JavaScript.\n *\n * @param {string} config iOS View configuration.\n * @private\n */\nconst createReactNativeComponentClass = function (\n  name: string,\n  callback: () => ViewConfig,\n): string {\n  return register(name, callback);\n};\n\nmodule.exports = createReactNativeComponentClass;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Settings = {\n  get(key: string): mixed {\n    console.warn('Settings is not yet supported on this platform.');\n    return null;\n  },\n\n  set(settings: Object) {\n    console.warn('Settings is not yet supported on this platform.');\n  },\n\n  watchKeys(keys: string | Array<string>, callback: Function): number {\n    console.warn('Settings is not yet supported on this platform.');\n    return -1;\n  },\n\n  clearWatch(watchId: number) {\n    console.warn('Settings is not yet supported on this platform.');\n  },\n};\n\nmodule.exports = Settings;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeShareModule';\nimport NativeShareModule from '../../src/private/specs/modules/NativeShareModule';\nexport default NativeShareModule;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeActionSheetManager from '../ActionSheetIOS/NativeActionSheetManager';\nimport NativeShareModule from './NativeShareModule';\n\nconst processColor = require('../StyleSheet/processColor').default;\nconst Platform = require('../Utilities/Platform');\nconst invariant = require('invariant');\n\ntype Content =\n  | {\n      title?: string,\n      message: string,\n      ...\n    }\n  | {\n      title?: string,\n      url: string,\n      ...\n    };\ntype Options = {\n  dialogTitle?: string,\n  excludedActivityTypes?: Array<string>,\n  tintColor?: string,\n  subject?: string,\n  anchor?: number,\n  ...\n};\n\nclass Share {\n  /**\n   * Open a dialog to share text content.\n   *\n   * In iOS, Returns a Promise which will be invoked an object containing `action`, `activityType`.\n   * If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction`\n   * and all the other keys being undefined.\n   *\n   * In Android, Returns a Promise which always be resolved with action being `Share.sharedAction`.\n   *\n   * ### Content\n   *\n   *  - `message` - a message to share\n   *\n   * #### iOS\n   *\n   *  - `url` - a URL to share\n   *\n   * At least one of URL and message is required.\n   *\n   * #### Android\n   *\n   * - `title` - title of the message\n   *\n   * ### Options\n   *\n   * #### iOS\n   *\n   *  - `subject` - a subject to share via email\n   *  - `excludedActivityTypes`\n   *  - `tintColor`\n   *\n   * #### Android\n   *\n   *  - `dialogTitle`\n   *\n   */\n  static share(\n    content: Content,\n    options: Options = {},\n  ): Promise<{action: string, activityType: ?string}> {\n    invariant(\n      typeof content === 'object' && content !== null,\n      'Content to share must be a valid object',\n    );\n    invariant(\n      typeof content.url === 'string' || typeof content.message === 'string',\n      'At least one of URL and message is required',\n    );\n    invariant(\n      typeof options === 'object' && options !== null,\n      'Options must be a valid object',\n    );\n\n    if (Platform.OS === 'android') {\n      invariant(\n        NativeShareModule,\n        'ShareModule should be registered on Android.',\n      );\n      invariant(\n        content.title == null || typeof content.title === 'string',\n        'Invalid title: title should be a string.',\n      );\n\n      const newContent = {\n        title: content.title,\n        message:\n          typeof content.message === 'string' ? content.message : undefined,\n      };\n\n      return NativeShareModule.share(newContent, options.dialogTitle).then(\n        result => ({\n          activityType: null,\n          ...result,\n        }),\n      );\n    } else if (Platform.OS === 'ios') {\n      return new Promise((resolve, reject) => {\n        const tintColor = processColor(options.tintColor);\n\n        invariant(\n          tintColor == null || typeof tintColor === 'number',\n          'Unexpected color given for options.tintColor',\n        );\n\n        invariant(\n          NativeActionSheetManager,\n          'NativeActionSheetManager is not registered on iOS, but it should be.',\n        );\n\n        NativeActionSheetManager.showShareActionSheetWithOptions(\n          {\n            message:\n              typeof content.message === 'string' ? content.message : undefined,\n            url: typeof content.url === 'string' ? content.url : undefined,\n            subject: options.subject,\n            tintColor: typeof tintColor === 'number' ? tintColor : undefined,\n            anchor:\n              typeof options.anchor === 'number' ? options.anchor : undefined,\n            excludedActivityTypes: options.excludedActivityTypes,\n          },\n          error => reject(error),\n          (success, activityType) => {\n            if (success) {\n              resolve({\n                action: 'sharedAction',\n                activityType: activityType,\n              });\n            } else {\n              resolve({\n                action: 'dismissedAction',\n                activityType: null,\n              });\n            }\n          },\n        );\n      });\n    } else {\n      return Promise.reject(new Error('Unsupported platform'));\n    }\n  }\n\n  /**\n   * The content was successfully shared.\n   */\n  static sharedAction: 'sharedAction' = 'sharedAction';\n\n  /**\n   * The dialog has been dismissed.\n   * @platform ios\n   */\n  static dismissedAction: 'dismissedAction' = 'dismissedAction';\n}\n\nmodule.exports = Share;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ColorValue} from './StyleSheet';\n\nexport type DynamicColorIOSTuple = {\n  light: ColorValue,\n  dark: ColorValue,\n  highContrastLight?: ColorValue,\n  highContrastDark?: ColorValue,\n};\n\nexport const DynamicColorIOS = (tuple: DynamicColorIOSTuple): ColorValue => {\n  throw new Error('DynamicColorIOS is not available on this platform.');\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nexport type Rect = $ReadOnly<{|\n  bottom?: ?number,\n  left?: ?number,\n  right?: ?number,\n  top?: ?number,\n|}>;\n\nexport type RectOrSize = Rect | number;\n\nexport function createSquare(size: number): Rect {\n  return {bottom: size, left: size, right: size, top: size};\n}\n\nexport function normalizeRect(rectOrSize: ?RectOrSize): ?Rect {\n  return typeof rectOrSize === 'number' ? createSquare(rectOrSize) : rectOrSize;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {____ViewStyle_Internal} from './StyleSheetTypes';\n\nexport default function splitLayoutProps(props: ?____ViewStyle_Internal): {\n  outer: ?____ViewStyle_Internal,\n  inner: ?____ViewStyle_Internal,\n} {\n  let outer: ?____ViewStyle_Internal = null;\n  let inner: ?____ViewStyle_Internal = null;\n\n  if (props != null) {\n    // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.\n    outer = {};\n    // $FlowIgnore[incompatible-exact] Will contain a subset of keys from `props`.\n    inner = {};\n\n    for (const prop of Object.keys(props)) {\n      switch (prop) {\n        case 'margin':\n        case 'marginHorizontal':\n        case 'marginVertical':\n        case 'marginBottom':\n        case 'marginTop':\n        case 'marginLeft':\n        case 'marginRight':\n        case 'flex':\n        case 'flexGrow':\n        case 'flexShrink':\n        case 'flexBasis':\n        case 'alignSelf':\n        case 'height':\n        case 'minHeight':\n        case 'maxHeight':\n        case 'width':\n        case 'minWidth':\n        case 'maxWidth':\n        case 'position':\n        case 'left':\n        case 'right':\n        case 'bottom':\n        case 'top':\n        case 'transform':\n        case 'transformOrigin':\n        case 'rowGap':\n        case 'columnGap':\n        case 'gap':\n          // $FlowFixMe[cannot-write]\n          // $FlowFixMe[incompatible-use]\n          // $FlowFixMe[prop-missing]\n          outer[prop] = props[prop];\n          break;\n        default:\n          // $FlowFixMe[cannot-write]\n          // $FlowFixMe[incompatible-use]\n          // $FlowFixMe[prop-missing]\n          inner[prop] = props[prop];\n          break;\n      }\n    }\n  }\n\n  return {outer, inner};\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {TextProps} from './TextProps';\n\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport flattenStyle from '../StyleSheet/flattenStyle';\nimport processColor from '../StyleSheet/processColor';\nimport Platform from '../Utilities/Platform';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: React.AbstractComponent<\n  TextProps,\n  React.ElementRef<typeof NativeText | typeof NativeVirtualText>,\n> = React.forwardRef((props: TextProps, forwardedRef) => {\n  const {\n    accessible,\n    accessibilityLabel,\n    accessibilityState,\n    allowFontScaling,\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-label': ariaLabel,\n    'aria-selected': ariaSelected,\n    ellipsizeMode,\n    id,\n    nativeID,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onResponderGrant,\n    onResponderMove,\n    onResponderRelease,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onStartShouldSetResponder,\n    pressRetentionOffset,\n    suppressHighlighting,\n    ...restProps\n  } = props;\n\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  let _accessibilityState;\n  if (\n    accessibilityState != null ||\n    ariaBusy != null ||\n    ariaChecked != null ||\n    ariaDisabled != null ||\n    ariaExpanded != null ||\n    ariaSelected != null\n  ) {\n    _accessibilityState = {\n      busy: ariaBusy ?? accessibilityState?.busy,\n      checked: ariaChecked ?? accessibilityState?.checked,\n      disabled: ariaDisabled ?? accessibilityState?.disabled,\n      expanded: ariaExpanded ?? accessibilityState?.expanded,\n      selected: ariaSelected ?? accessibilityState?.selected,\n    };\n  }\n\n  const _disabled =\n    restProps.disabled != null\n      ? restProps.disabled\n      : _accessibilityState?.disabled;\n\n  const nativeTextAccessibilityState =\n    _disabled !== _accessibilityState?.disabled\n      ? {..._accessibilityState, disabled: _disabled}\n      : _accessibilityState;\n\n  const isPressable =\n    (onPress != null ||\n      onLongPress != null ||\n      onStartShouldSetResponder != null) &&\n    _disabled !== true;\n\n  const initialized = useLazyInitialization(isPressable);\n  const config = useMemo(\n    () =>\n      initialized\n        ? {\n            disabled: !isPressable,\n            pressRectOffset: pressRetentionOffset,\n            onLongPress,\n            onPress,\n            onPressIn(event: PressEvent) {\n              // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it\n              // in the best case, and cause issues with text selection in the worst case. Forcing\n              // the isHighlighted prop to false on all platforms except iOS.\n              setHighlighted(\n                (suppressHighlighting == null || !suppressHighlighting) &&\n                  Platform.OS === 'ios',\n              );\n              onPressIn?.(event);\n            },\n            onPressOut(event: PressEvent) {\n              setHighlighted(false);\n              onPressOut?.(event);\n            },\n            onResponderTerminationRequest_DEPRECATED:\n              onResponderTerminationRequest,\n            onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder,\n          }\n        : null,\n    [\n      initialized,\n      isPressable,\n      pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      suppressHighlighting,\n    ],\n  );\n\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event: PressEvent) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event: PressEvent) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event: PressEvent) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event: PressEvent) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onClick: eventHandlers.onClick,\n            onResponderTerminationRequest:\n              eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n    ],\n  );\n\n  // TODO: Move this processing to the view configuration.\n  const selectionColor =\n    restProps.selectionColor == null\n      ? null\n      : processColor(restProps.selectionColor);\n\n  let style = restProps.style;\n\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      style = [restProps.style, {color: 'magenta'}];\n    }\n  }\n\n  let numberOfLines = restProps.numberOfLines;\n  if (numberOfLines != null && !(numberOfLines >= 0)) {\n    console.error(\n      `'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`,\n    );\n    numberOfLines = 0;\n  }\n\n  const hasTextAncestor = useContext(TextAncestor);\n\n  const _accessible = Platform.select({\n    ios: accessible !== false,\n    default: accessible,\n  });\n\n  // $FlowFixMe[underconstrained-implicit-instantiation]\n  style = flattenStyle(style);\n\n  if (typeof style?.fontWeight === 'number') {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.fontWeight = style?.fontWeight.toString();\n  }\n\n  let _selectable = restProps.selectable;\n  if (style?.userSelect != null) {\n    // $FlowFixMe[invalid-computed-prop]\n    _selectable = userSelectToSelectableMap[style.userSelect];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.userSelect;\n  }\n\n  if (style?.verticalAlign != null) {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.textAlignVertical =\n      // $FlowFixMe[invalid-computed-prop]\n      verticalAlignToTextAlignVerticalMap[style.verticalAlign];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.verticalAlign;\n  }\n\n  const _hasOnPressOrOnLongPress =\n    props.onPress != null || props.onLongPress != null;\n\n  return hasTextAncestor ? (\n    <NativeVirtualText\n      {...restProps}\n      {...eventHandlersForText}\n      accessibilityLabel={ariaLabel ?? accessibilityLabel}\n      accessibilityState={_accessibilityState}\n      isHighlighted={isHighlighted}\n      isPressable={isPressable}\n      nativeID={id ?? nativeID}\n      numberOfLines={numberOfLines}\n      ref={forwardedRef}\n      selectable={_selectable}\n      selectionColor={selectionColor}\n      style={style}\n    />\n  ) : (\n    <TextAncestor.Provider value={true}>\n      <NativeText\n        {...restProps}\n        {...eventHandlersForText}\n        accessibilityLabel={ariaLabel ?? accessibilityLabel}\n        accessibilityState={nativeTextAccessibilityState}\n        accessible={\n          accessible == null && Platform.OS === 'android'\n            ? _hasOnPressOrOnLongPress\n            : _accessible\n        }\n        allowFontScaling={allowFontScaling !== false}\n        disabled={_disabled}\n        ellipsizeMode={ellipsizeMode ?? 'tail'}\n        isHighlighted={isHighlighted}\n        nativeID={id ?? nativeID}\n        numberOfLines={numberOfLines}\n        ref={forwardedRef}\n        selectable={_selectable}\n        selectionColor={selectionColor}\n        style={style}\n      />\n    </TextAncestor.Provider>\n  );\n});\n\nText.displayName = 'Text';\n\n/**\n * Returns false until the first time `newValue` is true, after which this will\n * always return true. This is necessary to lazily initialize `Pressability` so\n * we do not eagerly create one for every pressable `Text` component.\n */\nfunction useLazyInitialization(newValue: boolean): boolean {\n  const [oldValue, setValue] = useState(newValue);\n  if (!oldValue && newValue) {\n    setValue(newValue);\n  }\n  return oldValue;\n}\n\nconst userSelectToSelectableMap = {\n  auto: true,\n  text: true,\n  none: false,\n  contain: true,\n  all: true,\n};\n\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center',\n};\n\nmodule.exports = Text;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport {createViewConfig} from '../NativeComponent/ViewConfig';\nimport UIManager from '../ReactNative/UIManager';\nimport createReactNativeComponentClass from '../Renderer/shims/createReactNativeComponentClass';\nimport {type HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport {type ProcessedColorValue} from '../StyleSheet/processColor';\nimport {type PressEvent} from '../Types/CoreEventTypes';\nimport {type TextProps} from './TextProps';\n\ntype NativeTextProps = $ReadOnly<{\n  ...TextProps,\n  isHighlighted?: ?boolean,\n  selectionColor?: ?ProcessedColorValue,\n  onClick?: ?(event: PressEvent) => mixed,\n  // This is only needed for platforms that optimize text hit testing, e.g.,\n  // react-native-windows. It can be used to only hit test virtual text spans\n  // that have pressable events attached to them.\n  isPressable?: ?boolean,\n}>;\n\nconst textViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    dynamicTypeRamp: true,\n    maxFontSizeMultiplier: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n    onInlineViewLayout: true,\n    dataDetectorType: true,\n    android_hyphenationFrequency: true,\n    lineBreakStrategyIOS: true,\n  },\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout',\n    },\n    topInlineViewLayout: {\n      registrationName: 'onInlineViewLayout',\n    },\n  },\n  uiViewClassName: 'RCTText',\n};\n\nconst virtualTextViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    maxFontSizeMultiplier: true,\n  },\n  uiViewClassName: 'RCTVirtualText',\n};\n\nexport const NativeText: HostComponent<NativeTextProps> =\n  (createReactNativeComponentClass('RCTText', () =>\n    createViewConfig(textViewConfig),\n  ): any);\n\nexport const NativeVirtualText: HostComponent<NativeTextProps> =\n  !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText')\n    ? NativeText\n    : (createReactNativeComponentClass('RCTVirtualText', () =>\n        createViewConfig(virtualTextViewConfig),\n      ): any);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nconst deepFreezeAndThrowOnMutationInDev = require('./Utilities/deepFreezeAndThrowOnMutationInDev');\n\n/**\n * A collection of Unicode sequences for various characters and emoji.\n *\n *  - More explicit than using the sequences directly in code.\n *  - Source code should be limited to ASCII.\n *  - Less chance of typos.\n */\nconst UTFSequence: {|\n  BOM: string,\n  BULLET: string,\n  BULLET_SP: string,\n  MDASH: string,\n  MDASH_SP: string,\n  MIDDOT: string,\n  MIDDOT_KATAKANA: string,\n  MIDDOT_SP: string,\n  NBSP: string,\n  NDASH: string,\n  NDASH_SP: string,\n  NEWLINE: string,\n  PIZZA: string,\n  TRIANGLE_LEFT: string,\n  TRIANGLE_RIGHT: string,\n|} = deepFreezeAndThrowOnMutationInDev({\n  BOM: '\\ufeff', // byte order mark\n  BULLET: '\\u2022', // bullet: &#8226;\n  BULLET_SP: '\\u00A0\\u2022\\u00A0', // &nbsp;&#8226;&nbsp;\n  MIDDOT: '\\u00B7', // normal middle dot: &middot;\n  MIDDOT_SP: '\\u00A0\\u00B7\\u00A0', // &nbsp;&middot;&nbsp;\n  MIDDOT_KATAKANA: '\\u30FB', // katakana middle dot\n  MDASH: '\\u2014', // em dash: &mdash;\n  MDASH_SP: '\\u00A0\\u2014\\u00A0', // &nbsp;&mdash;&nbsp;\n  NDASH: '\\u2013', // en dash: &ndash;\n  NDASH_SP: '\\u00A0\\u2013\\u00A0', // &nbsp;&ndash;&nbsp;\n  NEWLINE: '\\u000A',\n  NBSP: '\\u00A0', // non-breaking space: &nbsp;\n  PIZZA: '\\uD83C\\uDF55',\n  TRIANGLE_LEFT: '\\u25c0', // black left-pointing triangle\n  TRIANGLE_RIGHT: '\\u25b6', // black right-pointing triangle\n});\n\nexport default UTFSequence;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport {isAsyncDebugging} from './DebugEnvironment';\nimport NativeAppearance, {\n  type AppearancePreferences,\n  type ColorSchemeName,\n} from './NativeAppearance';\nimport invariant from 'invariant';\n\ntype AppearanceListener = (preferences: AppearancePreferences) => void;\nconst eventEmitter = new EventEmitter<{\n  change: [AppearancePreferences],\n}>();\n\ntype NativeAppearanceEventDefinitions = {\n  appearanceChanged: [AppearancePreferences],\n};\n\nif (NativeAppearance) {\n  const nativeEventEmitter =\n    new NativeEventEmitter<NativeAppearanceEventDefinitions>(\n      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n      // If you want to use the native module on other platforms, please remove this condition and test its behavior\n      Platform.OS !== 'ios' ? null : NativeAppearance,\n    );\n  nativeEventEmitter.addListener(\n    'appearanceChanged',\n    (newAppearance: AppearancePreferences) => {\n      const {colorScheme} = newAppearance;\n      invariant(\n        colorScheme === 'dark' ||\n          colorScheme === 'light' ||\n          colorScheme == null,\n        \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n      );\n      eventEmitter.emit('change', {colorScheme});\n    },\n  );\n}\n\nmodule.exports = {\n  /**\n   * Note: Although color scheme is available immediately, it may change at any\n   * time. Any rendering logic or styles that depend on this should try to call\n   * this function on every render, rather than caching the value (for example,\n   * using inline styles rather than setting a value in a `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.getColorScheme();`\n   *\n   * @returns {?ColorSchemeName} Value for the color scheme preference.\n   */\n  getColorScheme(): ?ColorSchemeName {\n    if (__DEV__) {\n      if (isAsyncDebugging) {\n        // Hard code light theme when using the async debugger as\n        // sync calls aren't supported\n        return 'light';\n      }\n    }\n\n    // TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union\n    const nativeColorScheme: ?string =\n      NativeAppearance == null\n        ? null\n        : NativeAppearance.getColorScheme() || null;\n    invariant(\n      nativeColorScheme === 'dark' ||\n        nativeColorScheme === 'light' ||\n        nativeColorScheme == null,\n      \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n    );\n    return nativeColorScheme;\n  },\n\n  setColorScheme(colorScheme: ?ColorSchemeName): void {\n    const nativeColorScheme = colorScheme == null ? 'unspecified' : colorScheme;\n\n    invariant(\n      colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null,\n      \"Unrecognized color scheme. Did you mean 'dark', 'light' or null?\",\n    );\n\n    if (NativeAppearance != null && NativeAppearance.setColorScheme != null) {\n      NativeAppearance.setColorScheme(nativeColorScheme);\n    }\n  },\n\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  addChangeListener(listener: AppearanceListener): EventSubscription {\n    return eventEmitter.addListener('change', listener);\n  },\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nexport let isAsyncDebugging: boolean = false;\n\nif (__DEV__) {\n  // These native interfaces don't exist in asynchronous debugging environments.\n  isAsyncDebugging = !global.nativeCallSyncHook && !global.RN$Bridgeless;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport NativeDevSettings from '../NativeModules/specs/NativeDevSettings';\nimport Platform from '../Utilities/Platform';\n\nlet DevSettings: {\n  addMenuItem(title: string, handler: () => mixed): void,\n  reload(reason?: string): void,\n  onFastRefresh(): void,\n} = {\n  addMenuItem(title: string, handler: () => mixed): void {},\n  reload(reason?: string): void {},\n  onFastRefresh(): void {},\n};\n\ntype DevSettingsEventDefinitions = {\n  didPressMenuItem: [{title: string}],\n};\n\nif (__DEV__) {\n  const emitter = new NativeEventEmitter<DevSettingsEventDefinitions>(\n    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n    // If you want to use the native module on other platforms, please remove this condition and test its behavior\n    Platform.OS !== 'ios' ? null : NativeDevSettings,\n  );\n  const subscriptions = new Map<string, EventSubscription>();\n\n  DevSettings = {\n    addMenuItem(title: string, handler: () => mixed): void {\n      // Make sure items are not added multiple times. This can\n      // happen when hot reloading the module that registers the\n      // menu items. The title is used as the id which means we\n      // don't support multiple items with the same name.\n      let subscription = subscriptions.get(title);\n      if (subscription != null) {\n        subscription.remove();\n      } else {\n        NativeDevSettings.addMenuItem(title);\n      }\n\n      subscription = emitter.addListener('didPressMenuItem', event => {\n        if (event.title === title) {\n          handler();\n        }\n      });\n      subscriptions.set(title, subscription);\n    },\n    reload(reason?: string): void {\n      if (NativeDevSettings.reloadWithReason != null) {\n        NativeDevSettings.reloadWithReason(reason ?? 'Uncategorized from JS');\n      } else {\n        NativeDevSettings.reload();\n      }\n    },\n    onFastRefresh(): void {\n      NativeDevSettings.onFastRefresh?.();\n    },\n  };\n}\n\nmodule.exports = DevSettings;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeDeviceInfo from './NativeDeviceInfo';\n\nmodule.exports = NativeDeviceInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport type * from '../../src/private/specs/modules/NativeAppearance';\nimport NativeAppearance from '../../src/private/specs/modules/NativeAppearance';\nexport default NativeAppearance;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// TODO: move this file to shims/ReactNative (requires React update and sync)\n\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\n\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\nimport UIManager from '../ReactNative/UIManager';\n\n// TODO: import from CodegenSchema once workspaces are enabled\ntype Options = $ReadOnly<{|\n  interfaceOnly?: boolean,\n  paperComponentName?: string,\n  paperComponentNameDeprecated?: string,\n  excludedPlatforms?: $ReadOnlyArray<'iOS' | 'android'>,\n|}>;\n\nexport type NativeComponentType<T> = HostComponent<T>;\n\n// If this function runs then that means the view configs were not\n// generated at build time using `GenerateViewConfigJs.js`. Thus\n// we need to `requireNativeComponent` to get the view configs from view managers.\n// `requireNativeComponent` is not available in Bridgeless mode.\n// e.g. This function runs at runtime if `codegenNativeComponent` was not called\n// from a file suffixed with NativeComponent.js.\nfunction codegenNativeComponent<Props>(\n  componentName: string,\n  options?: Options,\n): NativeComponentType<Props> {\n  if (global.RN$Bridgeless === true && __DEV__) {\n    console.warn(\n      `Codegen didn't run for ${componentName}. This will be an error in the future. Make sure you are using @react-native/babel-preset when building your JavaScript code.`,\n    );\n  }\n\n  let componentNameInUse =\n    options && options.paperComponentName != null\n      ? options.paperComponentName\n      : componentName;\n\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.hasViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (\n      options.paperComponentNameDeprecated != null &&\n      UIManager.hasViewManagerConfig(options.paperComponentNameDeprecated)\n    ) {\n      // $FlowFixMe[incompatible-type]\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      throw new Error(\n        `Failed to find native component for either ${componentName} or ${\n          options.paperComponentNameDeprecated ?? '(unknown)'\n        }`,\n      );\n    }\n  }\n\n  return (requireNativeComponent<Props>(\n    // $FlowFixMe[incompatible-call]\n    componentNameInUse,\n  ): HostComponent<Props>);\n}\n\nexport default codegenNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n// This function dismisses the currently-open keyboard, if any.\n\n'use strict';\n\nconst TextInputState = require('../Components/TextInput/TextInputState');\n\nfunction dismissKeyboard() {\n  TextInputState.blurTextInput(TextInputState.currentlyFocusedInput());\n}\n\nmodule.exports = dismissKeyboard;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/**\n * Small utility that can be used as an error handler. You cannot just pass\n * `console.error` as a failure callback - it's not properly bound.  If passes an\n * `Error` object, it will print the message and stack.\n */\nconst logError = function (...args: $ReadOnlyArray<mixed>) {\n  if (args.length === 1 && args[0] instanceof Error) {\n    const err = args[0];\n    console.error('Error: \"' + err.message + '\".  Stack:\\n' + err.stack);\n  } else {\n    console.error.apply(console, args);\n  }\n};\n\nmodule.exports = logError;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ColorSchemeName} from './NativeAppearance';\n\nimport Appearance from './Appearance';\nimport {useSyncExternalStore} from 'react';\n\nconst subscribe = (onStoreChange: () => void) => {\n  const appearanceSubscription = Appearance.addChangeListener(onStoreChange);\n  return () => appearanceSubscription.remove();\n};\n\nexport default function useColorScheme(): ?ColorSchemeName {\n  return useSyncExternalStore(subscribe, Appearance.getColorScheme);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport * as React from 'react';\nimport {useCallback} from 'react';\n\n/**\n * Constructs a new ref that forwards new values to each of the given refs. The\n * given refs will always be invoked in the order that they are supplied.\n *\n * WARNING: A known problem of merging refs using this approach is that if any\n * of the given refs change, the returned callback ref will also be changed. If\n * the returned callback ref is supplied as a `ref` to a React element, this may\n * lead to problems with the given refs being invoked more times than desired.\n */\nexport default function useMergeRefs<Instance>(\n  ...refs: $ReadOnlyArray<?React.RefSetter<Instance>>\n): (Instance | null) => void {\n  return useCallback(\n    (current: Instance | null) => {\n      for (const ref of refs) {\n        if (ref != null) {\n          if (typeof ref === 'function') {\n            ref(current);\n          } else {\n            ref.current = current;\n          }\n        }\n      }\n    },\n    [...refs], // eslint-disable-line react-hooks/exhaustive-deps\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport {useCallback, useRef} from 'react';\n\ntype CallbackRef<T> = T => mixed;\n\n/**\n * Constructs a callback ref that provides similar semantics as `useEffect`. The\n * supplied `effect` callback will be called with non-null component instances.\n * The `effect` callback can also optionally return a cleanup function.\n *\n * When a component is updated or unmounted, the cleanup function is called. The\n * `effect` callback will then be called again, if applicable.\n *\n * When a new `effect` callback is supplied, the previously returned cleanup\n * function will be called before the new `effect` callback is called with the\n * same instance.\n *\n * WARNING: The `effect` callback should be stable (e.g. using `useCallback`).\n */\nexport default function useRefEffect<TInstance>(\n  effect: TInstance => (() => void) | void,\n): CallbackRef<TInstance | null> {\n  const cleanupRef = useRef<(() => void) | void>(undefined);\n  return useCallback(\n    (instance: null | TInstance) => {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n        cleanupRef.current = undefined;\n      }\n      if (instance != null) {\n        cleanupRef.current = effect(instance);\n      }\n    },\n    [effect],\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport Dimensions from './Dimensions';\nimport {\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n} from './NativeDeviceInfo';\nimport {useEffect, useState} from 'react';\n\nexport default function useWindowDimensions():\n  | DisplayMetrics\n  | DisplayMetricsAndroid {\n  const [dimensions, setDimensions] = useState(() => Dimensions.get('window'));\n  useEffect(() => {\n    function handleChange({\n      window,\n    }: {\n      window: DisplayMetrics | DisplayMetricsAndroid,\n    }) {\n      if (\n        dimensions.width !== window.width ||\n        dimensions.height !== window.height ||\n        dimensions.scale !== window.scale ||\n        dimensions.fontScale !== window.fontScale\n      ) {\n        setDimensions(window);\n      }\n    }\n    const subscription = Dimensions.addEventListener('change', handleChange);\n    // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    handleChange({window: Dimensions.get('window')});\n    return () => {\n      subscription.remove();\n    };\n  }, [dimensions]);\n  return dimensions;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeVibration';\nimport NativeVibration from '../../src/private/specs/modules/NativeVibration';\nexport default NativeVibration;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n * @jsdoc\n */\n\nimport NativeVibration from './NativeVibration';\n\nconst Platform = require('../Utilities/Platform');\n\n/**\n * Vibration API\n *\n * See https://reactnative.dev/docs/vibration\n */\n\nlet _vibrating: boolean = false;\nlet _id: number = 0; // _id is necessary to prevent race condition.\nconst _default_vibration_length = 400;\n\nfunction vibrateByPattern(pattern: Array<number>, repeat: boolean = false) {\n  if (_vibrating) {\n    return;\n  }\n  _vibrating = true;\n  if (pattern[0] === 0) {\n    NativeVibration.vibrate(_default_vibration_length);\n    // $FlowFixMe[reassign-const]\n    pattern = pattern.slice(1);\n  }\n  if (pattern.length === 0) {\n    _vibrating = false;\n    return;\n  }\n  setTimeout(() => vibrateScheduler(++_id, pattern, repeat, 1), pattern[0]);\n}\n\nfunction vibrateScheduler(\n  id: number,\n  pattern: Array<number>,\n  repeat: boolean,\n  nextIndex: number,\n) {\n  if (!_vibrating || id !== _id) {\n    return;\n  }\n  NativeVibration.vibrate(_default_vibration_length);\n  if (nextIndex >= pattern.length) {\n    if (repeat) {\n      // $FlowFixMe[reassign-const]\n      nextIndex = 0;\n    } else {\n      _vibrating = false;\n      return;\n    }\n  }\n  setTimeout(\n    () => vibrateScheduler(id, pattern, repeat, nextIndex + 1),\n    pattern[nextIndex],\n  );\n}\n\nconst Vibration = {\n  /**\n   * Trigger a vibration with specified `pattern`.\n   *\n   * See https://reactnative.dev/docs/vibration#vibrate\n   */\n  vibrate: function (\n    pattern: number | Array<number> = _default_vibration_length,\n    repeat: boolean = false,\n  ) {\n    if (Platform.OS === 'android') {\n      if (typeof pattern === 'number') {\n        NativeVibration.vibrate(pattern);\n      } else if (Array.isArray(pattern)) {\n        NativeVibration.vibrateByPattern(pattern, repeat ? 0 : -1);\n      } else {\n        throw new Error('Vibration pattern should be a number or array');\n      }\n    } else {\n      if (_vibrating) {\n        return;\n      }\n      if (typeof pattern === 'number') {\n        NativeVibration.vibrate(pattern);\n      } else if (Array.isArray(pattern)) {\n        vibrateByPattern(pattern, repeat);\n      } else {\n        throw new Error('Vibration pattern should be a number or array');\n      }\n    }\n  },\n  /**\n   * Stop vibration\n   *\n   * See https://reactnative.dev/docs/vibration#cancel\n   */\n  cancel: function () {\n    if (Platform.OS === 'ios') {\n      _vibrating = false;\n    } else {\n      NativeVibration.cancel();\n    }\n  },\n};\n\nmodule.exports = Vibration;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {IgnorePattern} from '../LogBox/Data/LogBoxData';\n\nconst LogBox = require('../LogBox/LogBox').default;\nconst React = require('react');\n\ntype Props = $ReadOnly<{||}>;\n\nlet YellowBox;\nif (__DEV__) {\n  YellowBox = class extends React.Component<Props> {\n    static ignoreWarnings(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      console.warn(\n        'YellowBox has been replaced with LogBox. Please call LogBox.ignoreLogs() instead.',\n      );\n\n      LogBox.ignoreLogs(patterns);\n    }\n\n    static install(): void {\n      console.warn(\n        'YellowBox has been replaced with LogBox. Please call LogBox.install() instead.',\n      );\n      LogBox.install();\n    }\n\n    static uninstall(): void {\n      console.warn(\n        'YellowBox has been replaced with LogBox. Please call LogBox.uninstall() instead.',\n      );\n      LogBox.uninstall();\n    }\n\n    render(): React.Node {\n      return null;\n    }\n  };\n} else {\n  YellowBox = class extends React.Component<Props> {\n    static ignoreWarnings(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      // Do nothing.\n    }\n\n    static install(): void {\n      // Do nothing.\n    }\n\n    static uninstall(): void {\n      // Do nothing.\n    }\n\n    render(): React.Node {\n      return null;\n    }\n  };\n}\n\n// $FlowFixMe[method-unbinding]\nmodule.exports = (YellowBox: Class<React.Component<Props>> & {\n  ignoreWarnings($ReadOnlyArray<IgnorePattern>): void,\n  install(): void,\n  uninstall(): void,\n  ...\n});\n"],"names":["LogBox","_interopRequireDefault","require","install","uninstall","isInstalled","ignoreLogs","patterns","ignoreAllLogs","value","clearAllLogs","addLog","log","addException","error","exports","_ModalInjection$unsta","_NativeEventEmitter","_ModalInjection","_NativeModalManager","_RCTModalHostViewNativeComponent","_virtualizedLists","_jsxRuntime","_callSuper","t","o","e","_getPrototypeOf2","default","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","ScrollView","View","I18nManager","RootTagContext","StyleSheet","Platform","React","ModalEventEmitter","OS","NativeModalManager","NativeEventEmitter","uniqueModalIdentifier","Modal","_React$Component","props","_this","_classCallCheck2","_identifier","state","isRendered","visible","_inherits2","_createClass2","key","_this2","this","_eventSubscription","addListener","event","setState","modalID","onDismiss","remove","prevProps","_this3","_shouldShowModal","containerStyles","backgroundColor","transparent","animationType","presentationStyle","innerChildren","children","jsx","hardwareAccelerated","onRequestClose","onShow","statusBarTranslucent","identifier","style","styles","modal","onStartShouldSetResponder","_shouldSetResponder","supportedOrientations","onOrientationChange","testID","VirtualizedListContextResetter","Context","Provider","container","collapsable","Component","defaultProps","contextType","side","getConstants","isRTL","create","position","_defineProperty2","ExportedModal","ModalInjection","unstable_Modal","module","r","__esModule","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","i","set","_interopRequireWildcard","WeakMap","keys","forEach","_exportNames","enumerable","RCTModalHostViewNativeComponent","_NativeDevSettings","NativeDevSettings","_NativePermissionsAndroid","NativePermissionsAndroid","_request","_requestPermission","_NativeDialogManagerAndroid","_invariant","PERMISSION_REQUEST_RESULT","freeze","GRANTED","DENIED","NEVER_ASK_AGAIN","PERMISSIONS","READ_CALENDAR","WRITE_CALENDAR","CAMERA","READ_CONTACTS","WRITE_CONTACTS","GET_ACCOUNTS","ACCESS_FINE_LOCATION","ACCESS_COARSE_LOCATION","ACCESS_BACKGROUND_LOCATION","RECORD_AUDIO","READ_PHONE_STATE","CALL_PHONE","READ_CALL_LOG","WRITE_CALL_LOG","ADD_VOICEMAIL","READ_VOICEMAIL","WRITE_VOICEMAIL","USE_SIP","PROCESS_OUTGOING_CALLS","BODY_SENSORS","BODY_SENSORS_BACKGROUND","SEND_SMS","RECEIVE_SMS","READ_SMS","RECEIVE_WAP_PUSH","RECEIVE_MMS","READ_EXTERNAL_STORAGE","READ_MEDIA_IMAGES","READ_MEDIA_VIDEO","READ_MEDIA_AUDIO","READ_MEDIA_VISUAL_USER_SELECTED","WRITE_EXTERNAL_STORAGE","BLUETOOTH_CONNECT","BLUETOOTH_SCAN","BLUETOOTH_ADVERTISE","ACCESS_MEDIA_LOCATION","ACCEPT_HANDOVER","ACTIVITY_RECOGNITION","ANSWER_PHONE_CALLS","READ_PHONE_NUMBERS","UWB_RANGING","POST_NOTIFICATIONS","NEARBY_WIFI_DEVICES","PermissionsAndroid","RESULTS","permission","console","warn","Promise","resolve","invariant","checkPermission","_asyncToGenerator2","rationale","request","_x","_x2","arguments","shouldShowRequestPermissionRationale","NativeDialogManagerAndroid","reject","options","assign","showAlert","Error","requestPermission","_x3","_x4","permissions","requestMultiplePermissions","PermissionsAndroidInstance","isEnabled","_Platform","window","document","createElement","lastTouchTimestamp","disableHover","Date","now","addEventListener","_SoundManager","_ReactNativeFeatureFlags","_UIManager","_Rect","_HoverState","_PressabilityPerformanceEventEmitter","Transitions","NOT_RESPONDER","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","isActiveSignal","signal","isActivationSignal","isPressInSignal","DEFAULT_PRESS_RECT_OFFSETS","longPressDeactivationDistance","Pressability","config","_eventHandlers","_hoverInDelayTimeout","_hoverOutDelayTimeout","_isHovered","_longPressDelayTimeout","_pressDelayTimeout","_pressOutDelayTimeout","_responderID","_responderRegion","_touchState","_measureCallback","left","top","width","height","pageX","pageY","bottom","right","configure","_config","_cancelHoverInDelayTimeout","_cancelHoverOutDelayTimeout","_cancelLongPressDelayTimeout","_cancelPressDelayTimeout","_cancelPressOutDelayTimeout","_createEventHandlers","focusEventHandlers","onBlur","onFocus","responderEventHandlers","disabled","onStartShouldSetResponder_DEPRECATED","onResponderGrant","persist","currentTarget","_receiveSignal","delayPressIn","normalizeDelay","setTimeout","delayLongPress","_handleLongPress","blockNativeResponder","onResponderMove","onPressMove","responderRegion","touch","getTouchFromPressEvent","_touchActivatePosition","deltaX","deltaY","Math","hypot","_isTouchWithinResponderRegion","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","onResponderTerminationRequest_DEPRECATED","onClick","_event$nativeEvent","nativeEvent","target","_this2$_config","onPress","stopPropagation","ReactNativeFeatureFlags","shouldPressibilityUseW3CPointerEventsForHover","hoverPointerEvents","onPointerEnter","undefined","onPointerLeave","_this$_config","onHoverIn","onHoverOut","delayHoverIn","convertPointerEventToMouseEvent","delayHoverOut","mouseEventHandlers","onMouseEnter","isHoverEnabled","onMouseLeave","_Transitions$prevStat","timestamp","PressabilityPerformanceEventEmitter","emitEvent","nativeTimestamp","prevState","nextState","_performTransitionSideEffects","isTerminalSignal","isInitialTransition","isActivationTransition","_measureResponderRegion","onLongPress","isPrevActive","isNextActive","_activate","_deactivate","_this$_config2","android_disableSound","_shouldLongPressCancelPress","SoundManager","playTouchSound","onPressIn","_getTouchFromPressEve","_touchActivateTime","onPressOut","_this$_touchActivateT","minPressDuration","pressDuration","delayPressOut","max","UIManager","measure","_pressRectOffset$bott","_pressRectOffset$left","_pressRectOffset$righ","_pressRectOffset$top","hitSlop","normalizeRect","pressRectOffset","regionBottom","regionLeft","regionRight","regionTop","onLongPressShouldCancelPress_DEPRECATED","clearTimeout","distance","delay","min","length","fallback","_event$nativeEvent2","changedTouches","touches","input","_input$nativeEvent","clientX","clientY","timeStamp","__DEV__","PressabilityPerformanceEventEmitterSingleton","_listeners","listener","push","index","indexOf","splice","constructEvent","pressabilityRef","useRef","current","pressability","useEffect","reset","getEventHandlers","_Pressability","_react","_NativePushNotificationManagerIOS","NativePushNotificationManagerIOS","PushNotificationEmitter","_notifHandlers","Map","PushNotificationIOS","nativeNotif","_data","_remoteNotificationCompleteCallbackCalled","_isRemote","remote","_notificationId","notificationId","notifKey","notifVal","_alert","alert","_sound","sound","_badgeCount","badge","_category","category","_contentAvailable","_threadID","applicationIconBadgeNumber","soundName","alertBody","userInfo","fetchResult","onFinishRemoteNotification","details","presentLocalNotification","scheduleLocalNotification","cancelAllLocalNotifications","removeAllDeliveredNotifications","callback","getDeliveredNotifications","identifiers","removeDeliveredNotifications","number","setApplicationIconBadgeNumber","getApplicationIconBadgeNumber","cancelLocalNotifications","getScheduledLocalNotifications","type","handler","notifData","registrationInfo","deviceToken","errorInfo","delete","requestedPermissions","requestPermissions","abandonPermissions","checkPermissions","getInitialNotification","then","notification","getAuthorizationStatus","FetchResult","NewData","NoData","ResultFailed","_NativeI18nManager","i18nConstants","NativeI18nManager","_NativeI18nManager$ge","doLeftAndRightSwapInRTL","localeIdentifier","getI18nManagerConstants","allowRTL","shouldAllow","forceRTL","shouldForce","swapLeftAndRightInRTL","flipStyles","maybeInstance","__nativeTag","stateNode","canonical","isLegacyFabricInstance","shouldEmitW3CPointerEvents","createReactNativeComponentClass","getNativeComponentAttributes","uiViewClassName","register","ReactNativeViewConfigRegistry","name","Settings","settings","watchKeys","clearWatch","watchId","_NativeShareModule","NativeShareModule","_NativeActionSheetManager","processColor","Share","content","url","message","title","newContent","share","dialogTitle","result","activityType","tintColor","NativeActionSheetManager","showShareActionSheetWithOptions","subject","anchor","excludedActivityTypes","success","action","sharedAction","dismissedAction","tuple","createSquare","size","rectOrSize","outer","inner","prop","_usePressability","_flattenStyle","_processColor","_TextAncestor","_TextNativeComponent","_excluded","Text","forwardRef","forwardedRef","_accessibilityState2","_accessibilityState3","_style","_style3","_style4","_accessibilityState","accessible","accessibilityLabel","accessibilityState","allowFontScaling","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","ellipsizeMode","id","nativeID","pressRetentionOffset","suppressHighlighting","restProps","_objectWithoutProperties2","_useState","useState","_useState2","_slicedToArray2","isHighlighted","setHighlighted","busy","checked","expanded","selected","_disabled","nativeTextAccessibilityState","isPressable","initialized","newValue","_useState3","_useState4","oldValue","setValue","useLazyInitialization","useMemo","eventHandlers","usePressability","eventHandlersForText","selectionColor","numberOfLines","_style2","hasTextAncestor","useContext","TextAncestor","_accessible","select","ios","flattenStyle","fontWeight","toString","_selectable","selectable","userSelect","userSelectToSelectableMap","verticalAlign","textAlignVertical","verticalAlignToTextAlignVerticalMap","_hasOnPressOrOnLongPress","NativeVirtualText","ref","NativeText","displayName","auto","text","none","contain","all","middle","_ViewConfig","_createReactNativeComponentClass","textViewConfig","validAttributes","dynamicTypeRamp","maxFontSizeMultiplier","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","onInlineViewLayout","dataDetectorType","android_hyphenationFrequency","lineBreakStrategyIOS","directEventTypes","topTextLayout","registrationName","topInlineViewLayout","virtualTextViewConfig","createViewConfig","global","RN$Bridgeless","hasViewManagerConfig","UTFSequence","deepFreezeAndThrowOnMutationInDev","BOM","BULLET","BULLET_SP","MIDDOT","MIDDOT_SP","MIDDOT_KATAKANA","MDASH","MDASH_SP","NDASH","NDASH_SP","NEWLINE","NBSP","PIZZA","TRIANGLE_LEFT","TRIANGLE_RIGHT","_EventEmitter","_NativeAppearance","eventEmitter","EventEmitter","NativeAppearance","newAppearance","colorScheme","emit","getColorScheme","nativeColorScheme","setColorScheme","addChangeListener","addMenuItem","reload","reason","onFastRefresh","_NativeDeviceInfo","NativeDeviceInfo","_requireNativeComponent","componentName","componentNameInUse","paperComponentName","paperComponentNameDeprecated","_options$paperCompone","requireNativeComponent","TextInputState","blurTextInput","currentlyFocusedInput","_len","args","Array","_key","err","stack","useSyncExternalStore","subscribe","Appearance","_Appearance","onStoreChange","appearanceSubscription","refs","useCallback","concat","effect","cleanupRef","instance","Dimensions","dimensions","setDimensions","handleChange","_ref","scale","fontScale","subscription","_Dimensions","_NativeVibration","NativeVibration","_vibrating","_id","_default_vibration_length","vibrateByPattern","pattern","repeat","vibrate","slice","vibrateScheduler","nextIndex","Vibration","isArray","cancel","YellowBox","_React$Component2"],"sourceRoot":""}