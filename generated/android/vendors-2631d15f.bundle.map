{"version":3,"file":"vendors-2631d15f.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/Components/Clipboard/Clipboard.js","webpack:///./node_modules/react-native/Libraries/Components/Clipboard/NativeClipboard.js","webpack:///./node_modules/react-native/Libraries/Components/DrawerAndroid/AndroidDrawerLayoutNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js","webpack:///./node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js","webpack:///./node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js","webpack:///./node_modules/react-native/Libraries/Components/Keyboard/NativeKeyboardObserver.js","webpack:///./node_modules/react-native/Libraries/Components/Pressable/Pressable.js","webpack:///./node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js","webpack:///./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js","webpack:///./node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroidNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/RefreshControl/AndroidSwipeRefreshLayoutNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/RefreshControl/PullToRefreshViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js","webpack:///./node_modules/react-native/Libraries/Components/SafeAreaView/RCTSafeAreaViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/AndroidHorizontalScrollContentViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/AndroidHorizontalScrollViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/ScrollContentViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewCommands.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewContext.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js","webpack:///./node_modules/react-native/Libraries/Components/ScrollView/processDecelerationRate.js","webpack:///./node_modules/react-native/Libraries/Components/Sound/NativeSoundManager.js","webpack:///./node_modules/react-native/Libraries/Components/Sound/SoundManager.js","webpack:///./node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerAndroid.js","webpack:///./node_modules/react-native/Libraries/Components/StatusBar/NativeStatusBarManagerIOS.js","webpack:///./node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js","webpack:///./node_modules/react-native/Libraries/Components/Switch/AndroidSwitchNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/Switch/Switch.js","webpack:///./node_modules/react-native/Libraries/Components/Switch/SwitchNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/RCTInputAccessoryViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/RCTMultilineTextInputNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/RCTSingelineTextInputNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/TextInput.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/TextInputState.js","webpack:///./node_modules/react-native/Libraries/Components/ToastAndroid/NativeToastAndroid.js","webpack:///./node_modules/react-native/Libraries/Components/ToastAndroid/ToastAndroid.android.js","webpack:///./node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js","webpack:///./node_modules/react-native/Libraries/Components/Touchable/PooledClass.js","webpack:///./node_modules/react-native/Libraries/Components/Touchable/Position.js","webpack:///./node_modules/react-native/Libraries/Components/Touchable/Touchable.js","webpack:///./node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js","webpack:///./node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js","webpack:///./node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js","webpack:///./node_modules/react-native/Libraries/Components/Touchable/TouchableWithoutFeedback.js","webpack:///./node_modules/react-native/Libraries/Components/View/ReactNativeStyleAttributes.js","webpack:///./node_modules/react-native/Libraries/Components/View/View.js","webpack:///./node_modules/react-native/Libraries/Components/View/ViewNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Core/Devtools/getDevServer.js","webpack:///./node_modules/react-native/Libraries/Core/Devtools/parseErrorStack.js","webpack:///./node_modules/react-native/Libraries/Core/Devtools/parseHermesStack.js","webpack:///./node_modules/react-native/Libraries/Core/ExceptionsManager.js","webpack:///./node_modules/react-native/Libraries/Core/InitializeCore.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport NativeClipboard from './NativeClipboard';\n\n/**\n * `Clipboard` gives you an interface for setting and getting content from Clipboard on both iOS and Android\n */\nmodule.exports = {\n  /**\n   * Get content of string type, this method returns a `Promise`, so you can use following code to get clipboard content\n   * ```javascript\n   * async _getContent() {\n   *   var content = await Clipboard.getString();\n   * }\n   * ```\n   */\n  getString(): Promise<string> {\n    return NativeClipboard.getString();\n  },\n  /**\n   * Set content of string type. You can use following code to set clipboard content\n   * ```javascript\n   * _setContent() {\n   *   Clipboard.setString('hello world');\n   * }\n   * ```\n   * @param {string} content the content to be stored in the clipboard.\n   */\n  setString(content: string) {\n    NativeClipboard.setString(content);\n  },\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeClipboard';\nimport NativeClipboard from '../../../src/private/specs/modules/NativeClipboard';\nexport default NativeClipboard;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/AndroidDrawerLayoutNativeComponent';\nimport AndroidDrawerLayoutNativeComponent from '../../../src/private/specs/components/AndroidDrawerLayoutNativeComponent';\nexport default AndroidDrawerLayoutNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {AccessibilityRole} from '../../Components/View/ViewAccessibility';\nimport type {\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureOnSuccessCallback,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {ColorValue, ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {DirectEventHandler} from '../../Types/CodegenTypes';\n\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport StatusBar from '../StatusBar/StatusBar';\nimport View from '../View/View';\nimport AndroidDrawerLayoutNativeComponent, {\n  Commands,\n} from './AndroidDrawerLayoutNativeComponent';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\n\nconst DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];\n\ntype DrawerStates = 'Idle' | 'Dragging' | 'Settling';\n\ntype DrawerSlideEvent = $ReadOnly<{|\n  offset: number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  accessibilityRole?: ?AccessibilityRole,\n\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *   - 'none' (the default), drags do not dismiss the keyboard.\n   *   - 'on-drag', the keyboard is dismissed when a drag begins.\n   */\n  keyboardDismissMode?: ?('none' | 'on-drag'),\n\n  /**\n   * Specifies the background color of the drawer. The default value is white.\n   * If you want to set the opacity of the drawer, use rgba. Example:\n   *\n   * ```\n   * return (\n   *   <DrawerLayoutAndroid drawerBackgroundColor=\"rgba(0,0,0,0.5)\">\n   *   </DrawerLayoutAndroid>\n   * );\n   * ```\n   */\n  drawerBackgroundColor?: ?ColorValue,\n\n  /**\n   * Specifies the side of the screen from which the drawer will slide in.\n   */\n  drawerPosition: ?('left' | 'right'),\n\n  /**\n   * Specifies the width of the drawer, more precisely the width of the view that be pulled in\n   * from the edge of the window.\n   */\n  drawerWidth?: ?number,\n\n  /**\n   * Specifies the lock mode of the drawer. The drawer can be locked in 3 states:\n   * - unlocked (default), meaning that the drawer will respond (open/close) to touch gestures.\n   * - locked-closed, meaning that the drawer will stay closed and not respond to gestures.\n   * - locked-open, meaning that the drawer will stay opened and not respond to gestures.\n   * The drawer may still be opened and closed programmatically (`openDrawer`/`closeDrawer`).\n   */\n  drawerLockMode?: ?('unlocked' | 'locked-closed' | 'locked-open'),\n\n  /**\n   * Function called whenever there is an interaction with the navigation view.\n   */\n  onDrawerSlide?: ?DirectEventHandler<DrawerSlideEvent>,\n\n  /**\n   * Function called when the drawer state has changed. The drawer can be in 3 states:\n   * - Idle, meaning there is no interaction with the navigation view happening at the time\n   * - Dragging, meaning there is currently an interaction with the navigation view\n   * - Settling, meaning that there was an interaction with the navigation view, and the\n   * navigation view is now finishing its closing or opening animation\n   */\n  onDrawerStateChanged?: ?(state: DrawerStates) => mixed,\n\n  /**\n   * Function called whenever the navigation view has been opened.\n   */\n  onDrawerOpen?: ?() => mixed,\n\n  /**\n   * Function called whenever the navigation view has been closed.\n   */\n  onDrawerClose?: ?() => mixed,\n\n  /**\n   * The navigation view that will be rendered to the side of the screen and can be pulled in.\n   */\n  renderNavigationView: () => React.Element<any>,\n\n  /**\n   * Make the drawer take the entire screen and draw the background of the\n   * status bar to allow it to open over the status bar. It will only have an\n   * effect on API 21+.\n   */\n  statusBarBackgroundColor?: ?ColorValue,\n\n  children?: React.Node,\n  style?: ?ViewStyleProp,\n|}>;\n\ntype State = {|\n  statusBarBackgroundColor: ColorValue,\n|};\n\n/**\n * React component that wraps the platform `DrawerLayout` (Android only). The\n * Drawer (typically used for navigation) is rendered with `renderNavigationView`\n * and direct children are the main view (where your content goes). The navigation\n * view is initially not visible on the screen, but can be pulled in from the\n * side of the window specified by the `drawerPosition` prop and its width can\n * be set by the `drawerWidth` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   var navigationView = (\n *     <View style={{flex: 1, backgroundColor: '#fff'}}>\n *       <Text style={{margin: 10, fontSize: 15, textAlign: 'left'}}>I'm in the Drawer!</Text>\n *     </View>\n *   );\n *   return (\n *     <DrawerLayoutAndroid\n *       drawerWidth={300}\n *       drawerPosition=\"left\"\n *       renderNavigationView={() => navigationView}>\n *       <View style={{flex: 1, alignItems: 'center'}}>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>Hello</Text>\n *         <Text style={{margin: 10, fontSize: 15, textAlign: 'right'}}>World!</Text>\n *       </View>\n *     </DrawerLayoutAndroid>\n *   );\n * },\n * ```\n */\nclass DrawerLayoutAndroid extends React.Component<Props, State> {\n  static get positions(): mixed {\n    console.warn(\n      'Setting DrawerLayoutAndroid drawerPosition using `DrawerLayoutAndroid.positions` is deprecated. Instead pass the string value \"left\" or \"right\"',\n    );\n\n    return {Left: 'left', Right: 'right'};\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _nativeRef =\n    React.createRef<\n      React.ElementRef<typeof AndroidDrawerLayoutNativeComponent>,\n    >();\n\n  state: State = {statusBarBackgroundColor: null};\n\n  render(): React.Node {\n    const {\n      drawerBackgroundColor = 'white',\n      onDrawerStateChanged,\n      renderNavigationView,\n      onDrawerOpen,\n      onDrawerClose,\n      ...props\n    } = this.props;\n    const drawStatusBar = this.props.statusBarBackgroundColor != null;\n    const drawerViewWrapper = (\n      <View\n        style={[\n          styles.drawerSubview,\n          {\n            width: this.props.drawerWidth,\n            backgroundColor: drawerBackgroundColor,\n          },\n        ]}\n        collapsable={false}>\n        {renderNavigationView()}\n        {drawStatusBar && <View style={styles.drawerStatusBar} />}\n      </View>\n    );\n    const childrenWrapper = (\n      <View style={styles.mainSubview} collapsable={false}>\n        {drawStatusBar && (\n          <StatusBar\n            translucent\n            backgroundColor={this.props.statusBarBackgroundColor}\n          />\n        )}\n        {drawStatusBar && (\n          <View\n            style={[\n              styles.statusBar,\n              {backgroundColor: this.props.statusBarBackgroundColor},\n            ]}\n          />\n        )}\n        {this.props.children}\n      </View>\n    );\n    return (\n      <AndroidDrawerLayoutNativeComponent\n        {...props}\n        ref={this._nativeRef}\n        drawerBackgroundColor={drawerBackgroundColor}\n        drawerWidth={this.props.drawerWidth}\n        drawerPosition={this.props.drawerPosition}\n        drawerLockMode={this.props.drawerLockMode}\n        style={[styles.base, this.props.style]}\n        onDrawerSlide={this._onDrawerSlide}\n        onDrawerOpen={this._onDrawerOpen}\n        onDrawerClose={this._onDrawerClose}\n        onDrawerStateChanged={this._onDrawerStateChanged}>\n        {childrenWrapper}\n        {drawerViewWrapper}\n      </AndroidDrawerLayoutNativeComponent>\n    );\n  }\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _onDrawerSlide = event => {\n    if (this.props.onDrawerSlide) {\n      // $FlowFixMe[unused-promise]\n      this.props.onDrawerSlide(event);\n    }\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      dismissKeyboard();\n    }\n  };\n\n  _onDrawerOpen = () => {\n    if (this.props.onDrawerOpen) {\n      this.props.onDrawerOpen();\n    }\n  };\n\n  _onDrawerClose = () => {\n    if (this.props.onDrawerClose) {\n      this.props.onDrawerClose();\n    }\n  };\n\n  /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n   * LTI update could not be added via codemod */\n  _onDrawerStateChanged = event => {\n    if (this.props.onDrawerStateChanged) {\n      this.props.onDrawerStateChanged(\n        DRAWER_STATES[event.nativeEvent.drawerState],\n      );\n    }\n  };\n\n  /**\n   * Opens the drawer.\n   */\n  openDrawer() {\n    Commands.openDrawer(nullthrows(this._nativeRef.current));\n  }\n\n  /**\n   * Closes the drawer.\n   */\n  closeDrawer() {\n    Commands.closeDrawer(nullthrows(this._nativeRef.current));\n  }\n\n  /**\n   * Closing and opening example\n   * Note: To access the drawer you have to give it a ref\n   *\n   * Class component:\n   *\n   * render () {\n   *   this.openDrawer = () => {\n   *     this.refs.DRAWER.openDrawer()\n   *   }\n   *   this.closeDrawer = () => {\n   *     this.refs.DRAWER.closeDrawer()\n   *   }\n   *   return (\n   *     <DrawerLayoutAndroid ref={'DRAWER'}>\n   *      {children}\n   *     </DrawerLayoutAndroid>\n   *   )\n   * }\n   *\n   * Function component:\n   *\n   * const drawerRef = useRef()\n   * const openDrawer = () => {\n   *   drawerRef.current.openDrawer()\n   * }\n   * const closeDrawer = () => {\n   *   drawerRef.current.closeDrawer()\n   * }\n   * return (\n   *   <DrawerLayoutAndroid ref={drawerRef}>\n   *     {children}\n   *   </DrawerLayoutAndroid>\n   * )\n   */\n\n  /**\n   * Native methods\n   */\n  blur() {\n    nullthrows(this._nativeRef.current).blur();\n  }\n\n  focus() {\n    nullthrows(this._nativeRef.current).focus();\n  }\n\n  measure(callback: MeasureOnSuccessCallback) {\n    nullthrows(this._nativeRef.current).measure(callback);\n  }\n\n  measureInWindow(callback: MeasureInWindowOnSuccessCallback) {\n    nullthrows(this._nativeRef.current).measureInWindow(callback);\n  }\n\n  measureLayout(\n    relativeToNativeNode: number,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail?: () => void,\n  ) {\n    nullthrows(this._nativeRef.current).measureLayout(\n      relativeToNativeNode,\n      onSuccess,\n      onFail,\n    );\n  }\n\n  setNativeProps(nativeProps: Object) {\n    nullthrows(this._nativeRef.current).setNativeProps(nativeProps);\n  }\n}\n\nconst styles = StyleSheet.create({\n  base: {\n    flex: 1,\n    elevation: 16,\n  },\n  mainSubview: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  drawerSubview: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n  },\n  statusBar: {\n    height: StatusBar.currentHeight,\n  },\n  drawerStatusBar: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    height: StatusBar.currentHeight,\n    backgroundColor: 'rgba(0, 0, 0, 0.251)',\n  },\n});\n\nmodule.exports = DrawerLayoutAndroid;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\n\nimport NativeEventEmitter from '../../EventEmitter/NativeEventEmitter';\nimport LayoutAnimation from '../../LayoutAnimation/LayoutAnimation';\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport Platform from '../../Utilities/Platform';\nimport NativeKeyboardObserver from './NativeKeyboardObserver';\n\nexport type KeyboardEventName = $Keys<KeyboardEventDefinitions>;\n\nexport type KeyboardEventEasing =\n  | 'easeIn'\n  | 'easeInEaseOut'\n  | 'easeOut'\n  | 'linear'\n  | 'keyboard';\n\nexport type KeyboardMetrics = $ReadOnly<{|\n  screenX: number,\n  screenY: number,\n  width: number,\n  height: number,\n|}>;\n\nexport type KeyboardEvent = AndroidKeyboardEvent | IOSKeyboardEvent;\n\ntype BaseKeyboardEvent = {|\n  duration: number,\n  easing: KeyboardEventEasing,\n  endCoordinates: KeyboardMetrics,\n|};\n\nexport type AndroidKeyboardEvent = $ReadOnly<{|\n  ...BaseKeyboardEvent,\n  duration: 0,\n  easing: 'keyboard',\n|}>;\n\nexport type IOSKeyboardEvent = $ReadOnly<{|\n  ...BaseKeyboardEvent,\n  startCoordinates: KeyboardMetrics,\n  isEventFromThisApp: boolean,\n|}>;\n\ntype KeyboardEventDefinitions = {\n  keyboardWillShow: [KeyboardEvent],\n  keyboardDidShow: [KeyboardEvent],\n  keyboardWillHide: [KeyboardEvent],\n  keyboardDidHide: [KeyboardEvent],\n  keyboardWillChangeFrame: [KeyboardEvent],\n  keyboardDidChangeFrame: [KeyboardEvent],\n};\n\n/**\n * `Keyboard` module to control keyboard events.\n *\n * ### Usage\n *\n * The Keyboard module allows you to listen for native events and react to them, as\n * well as make changes to the keyboard, like dismissing it.\n *\n *```\n * import React, { Component } from 'react';\n * import { Keyboard, TextInput } from 'react-native';\n *\n * class Example extends Component {\n *   componentWillMount () {\n *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);\n *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);\n *   }\n *\n *   componentWillUnmount () {\n *     this.keyboardDidShowListener.remove();\n *     this.keyboardDidHideListener.remove();\n *   }\n *\n *   _keyboardDidShow () {\n *     alert('Keyboard Shown');\n *   }\n *\n *   _keyboardDidHide () {\n *     alert('Keyboard Hidden');\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         onSubmitEditing={Keyboard.dismiss}\n *       />\n *     );\n *   }\n * }\n *```\n */\n\nclass Keyboard {\n  _currentlyShowing: ?KeyboardEvent;\n\n  _emitter: NativeEventEmitter<KeyboardEventDefinitions> =\n    new NativeEventEmitter(\n      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n      // If you want to use the native module on other platforms, please remove this condition and test its behavior\n      Platform.OS !== 'ios' ? null : NativeKeyboardObserver,\n    );\n\n  constructor() {\n    this.addListener('keyboardDidShow', ev => {\n      this._currentlyShowing = ev;\n    });\n    this.addListener('keyboardDidHide', _ev => {\n      this._currentlyShowing = null;\n    });\n  }\n\n  /**\n   * The `addListener` function connects a JavaScript function to an identified native\n   * keyboard notification event.\n   *\n   * This function then returns the reference to the listener.\n   *\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This\n   *can be any of the following:\n   *\n   * - `keyboardWillShow`\n   * - `keyboardDidShow`\n   * - `keyboardWillHide`\n   * - `keyboardDidHide`\n   * - `keyboardWillChangeFrame`\n   * - `keyboardDidChangeFrame`\n   *\n   * Android versions prior to API 30 rely on observing layout changes when\n   * `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.\n   *\n   * `keyboardWillShow` as well as `keyboardWillHide` are not available on Android since there is\n   * no native corresponding event.\n   *\n   * @param {function} callback function to be called when the event fires.\n   */\n  addListener<K: $Keys<KeyboardEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<KeyboardEventDefinitions, K>) => mixed,\n    context?: mixed,\n  ): EventSubscription {\n    return this._emitter.addListener(eventType, listener);\n  }\n\n  /**\n   * Removes all listeners for a specific event type.\n   *\n   * @param {string} eventType The native event string listeners are watching which will be removed.\n   */\n  removeAllListeners<K: $Keys<KeyboardEventDefinitions>>(eventType: ?K): void {\n    this._emitter.removeAllListeners(eventType);\n  }\n\n  /**\n   * Dismisses the active keyboard and removes focus.\n   */\n  dismiss(): void {\n    dismissKeyboard();\n  }\n\n  /**\n   * Whether the keyboard is last known to be visible.\n   */\n  isVisible(): boolean {\n    return !!this._currentlyShowing;\n  }\n\n  /**\n   * Return the metrics of the soft-keyboard if visible.\n   */\n  metrics(): ?KeyboardMetrics {\n    return this._currentlyShowing?.endCoordinates;\n  }\n\n  /**\n   * Useful for syncing TextInput (or other keyboard accessory view) size of\n   * position changes with keyboard movements.\n   */\n  scheduleLayoutAnimation(event: KeyboardEvent): void {\n    const {duration, easing} = event;\n    if (duration != null && duration !== 0) {\n      LayoutAnimation.configureNext({\n        duration: duration,\n        update: {\n          duration: duration,\n          type: (easing != null && LayoutAnimation.Types[easing]) || 'keyboard',\n        },\n      });\n    }\n  }\n}\n\nmodule.exports = (new Keyboard(): Keyboard);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {\n  ViewLayout,\n  ViewLayoutEvent,\n  ViewProps,\n} from '../View/ViewPropTypes';\nimport type {KeyboardEvent, KeyboardMetrics} from './Keyboard';\n\nimport LayoutAnimation from '../../LayoutAnimation/LayoutAnimation';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport {type EventSubscription} from '../../vendor/emitter/EventEmitter';\nimport AccessibilityInfo from '../AccessibilityInfo/AccessibilityInfo';\nimport View from '../View/View';\nimport Keyboard from './Keyboard';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * Specify how to react to the presence of the keyboard.\n   */\n  behavior?: ?('height' | 'position' | 'padding'),\n\n  /**\n   * Style of the content container when `behavior` is 'position'.\n   */\n  contentContainerStyle?: ?ViewStyleProp,\n\n  /**\n   * Controls whether this `KeyboardAvoidingView` instance should take effect.\n   * This is useful when more than one is on the screen. Defaults to true.\n   */\n  enabled?: ?boolean,\n\n  /**\n   * Distance between the top of the user screen and the React Native view. This\n   * may be non-zero in some cases. Defaults to 0.\n   */\n  keyboardVerticalOffset?: number,\n|}>;\n\ntype State = {|\n  bottom: number,\n|};\n\n/**\n * View that moves out of the way when the keyboard appears by automatically\n * adjusting its height, position, or bottom padding.\n */\nclass KeyboardAvoidingView extends React.Component<Props, State> {\n  _frame: ?ViewLayout = null;\n  _keyboardEvent: ?KeyboardEvent = null;\n  _subscriptions: Array<EventSubscription> = [];\n  viewRef: {current: React.ElementRef<typeof View> | null, ...};\n  _initialFrameHeight: number = 0;\n  _bottom: number = 0;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {bottom: 0};\n    this.viewRef = React.createRef();\n  }\n\n  async _relativeKeyboardHeight(\n    keyboardFrame: KeyboardMetrics,\n  ): Promise<number> {\n    const frame = this._frame;\n    if (!frame || !keyboardFrame) {\n      return 0;\n    }\n\n    // On iOS when Prefer Cross-Fade Transitions is enabled, the keyboard position\n    // & height is reported differently (0 instead of Y position value matching height of frame)\n    if (\n      Platform.OS === 'ios' &&\n      keyboardFrame.screenY === 0 &&\n      (await AccessibilityInfo.prefersCrossFadeTransitions())\n    ) {\n      return 0;\n    }\n\n    const keyboardY =\n      keyboardFrame.screenY - (this.props.keyboardVerticalOffset ?? 0);\n\n    if (this.props.behavior === 'height') {\n      return Math.max(\n        this.state.bottom + frame.y + frame.height - keyboardY,\n        0,\n      );\n    }\n\n    // Calculate the displacement needed for the view such that it\n    // no longer overlaps with the keyboard\n    return Math.max(frame.y + frame.height - keyboardY, 0);\n  }\n\n  _onKeyboardChange = (event: ?KeyboardEvent) => {\n    this._keyboardEvent = event;\n    // $FlowFixMe[unused-promise]\n    this._updateBottomIfNecessary();\n  };\n\n  _onLayout = async (event: ViewLayoutEvent) => {\n    const oldFrame = this._frame;\n    this._frame = event.nativeEvent.layout;\n    if (!this._initialFrameHeight) {\n      // save the initial frame height, before the keyboard is visible\n      this._initialFrameHeight = this._frame.height;\n    }\n\n    // update bottom height for the first time or when the height is changed\n    if (!oldFrame || oldFrame.height !== this._frame.height) {\n      await this._updateBottomIfNecessary();\n    }\n\n    if (this.props.onLayout) {\n      this.props.onLayout(event);\n    }\n  };\n\n  // Avoid unnecessary renders if the KeyboardAvoidingView is disabled.\n  _setBottom = (value: number) => {\n    const enabled = this.props.enabled ?? true;\n    this._bottom = value;\n    if (enabled) {\n      this.setState({bottom: value});\n    }\n  };\n\n  _updateBottomIfNecessary = async () => {\n    if (this._keyboardEvent == null) {\n      this._setBottom(0);\n      return;\n    }\n\n    const {duration, easing, endCoordinates} = this._keyboardEvent;\n    const height = await this._relativeKeyboardHeight(endCoordinates);\n\n    if (this._bottom === height) {\n      return;\n    }\n\n    this._setBottom(height);\n\n    const enabled = this.props.enabled ?? true;\n    if (enabled && duration && easing) {\n      LayoutAnimation.configureNext({\n        // We have to pass the duration equal to minimal accepted duration defined here: RCTLayoutAnimation.m\n        duration: duration > 10 ? duration : 10,\n        update: {\n          duration: duration > 10 ? duration : 10,\n          type: LayoutAnimation.Types[easing] || 'keyboard',\n        },\n      });\n    }\n  };\n\n  componentDidUpdate(_: Props, prevState: State): void {\n    const enabled = this.props.enabled ?? true;\n    if (enabled && this._bottom !== prevState.bottom) {\n      this.setState({bottom: this._bottom});\n    }\n  }\n\n  componentDidMount(): void {\n    if (Platform.OS === 'ios') {\n      this._subscriptions = [\n        Keyboard.addListener('keyboardWillChangeFrame', this._onKeyboardChange),\n      ];\n    } else {\n      this._subscriptions = [\n        Keyboard.addListener('keyboardDidHide', this._onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', this._onKeyboardChange),\n      ];\n    }\n  }\n\n  componentWillUnmount(): void {\n    this._subscriptions.forEach(subscription => {\n      subscription.remove();\n    });\n  }\n\n  render(): React.Node {\n    const {\n      behavior,\n      children,\n      contentContainerStyle,\n      enabled = true,\n      // eslint-disable-next-line no-unused-vars\n      keyboardVerticalOffset = 0,\n      style,\n      onLayout,\n      ...props\n    } = this.props;\n    const bottomHeight = enabled === true ? this.state.bottom : 0;\n    switch (behavior) {\n      case 'height':\n        let heightStyle;\n        if (this._frame != null && this.state.bottom > 0) {\n          // Note that we only apply a height change when there is keyboard present,\n          // i.e. this.state.bottom is greater than 0. If we remove that condition,\n          // this.frame.height will never go back to its original value.\n          // When height changes, we need to disable flex.\n          heightStyle = {\n            height: this._initialFrameHeight - bottomHeight,\n            flex: 0,\n          };\n        }\n        return (\n          <View\n            ref={this.viewRef}\n            style={StyleSheet.compose(style, heightStyle)}\n            onLayout={this._onLayout}\n            {...props}>\n            {children}\n          </View>\n        );\n\n      case 'position':\n        return (\n          <View\n            ref={this.viewRef}\n            style={style}\n            onLayout={this._onLayout}\n            {...props}>\n            <View\n              style={StyleSheet.compose(contentContainerStyle, {\n                bottom: bottomHeight,\n              })}>\n              {children}\n            </View>\n          </View>\n        );\n\n      case 'padding':\n        return (\n          <View\n            ref={this.viewRef}\n            style={StyleSheet.compose(style, {paddingBottom: bottomHeight})}\n            onLayout={this._onLayout}\n            {...props}>\n            {children}\n          </View>\n        );\n\n      default:\n        return (\n          <View\n            ref={this.viewRef}\n            onLayout={this._onLayout}\n            style={style}\n            {...props}>\n            {children}\n          </View>\n        );\n    }\n  }\n}\n\nexport default KeyboardAvoidingView;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeKeyboardObserver';\nimport NativeKeyboardObserver from '../../../src/private/specs/modules/NativeKeyboardObserver';\nexport default NativeKeyboardObserver;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  LayoutEvent,\n  MouseEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../View/ViewAccessibility';\n\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport {type RectOrSize} from '../../StyleSheet/Rect';\nimport useMergeRefs from '../../Utilities/useMergeRefs';\nimport View from '../View/View';\nimport useAndroidRippleForView, {\n  type RippleConfig,\n} from './useAndroidRippleForView';\nimport * as React from 'react';\nimport {useMemo, useRef, useState} from 'react';\n\ntype ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;\n\nexport type StateCallbackType = $ReadOnly<{|\n  pressed: boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Accessibility.\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityLanguage?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  'aria-valuemax'?: AccessibilityValue['max'],\n  'aria-valuemin'?: AccessibilityValue['min'],\n  'aria-valuenow'?: AccessibilityValue['now'],\n  'aria-valuetext'?: AccessibilityValue['text'],\n  accessibilityViewIsModal?: ?boolean,\n  'aria-modal'?: ?boolean,\n  accessible?: ?boolean,\n\n  /**\n   * alias for accessibilityState\n   *\n   * see https://reactnative.dev/docs/accessibility#accessibilitystate\n   */\n  'aria-busy'?: ?boolean,\n  'aria-checked'?: ?boolean | 'mixed',\n  'aria-disabled'?: ?boolean,\n  'aria-expanded'?: ?boolean,\n  'aria-selected'?: ?boolean,\n  /**\n   * A value indicating whether the accessibility elements contained within\n   * this accessibility element are hidden.\n   */\n  'aria-hidden'?: ?boolean,\n  'aria-live'?: ?('polite' | 'assertive' | 'off'),\n  focusable?: ?boolean,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   */\n  delayHoverIn?: ?number,\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   */\n  delayHoverOut?: ?number,\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: ?RectOrSize,\n\n  /**\n   * Called when this view's layout changes.\n   */\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n\n  /**\n   * Identifier used to find this view in tests.\n   */\n  testID?: ?string,\n\n  /**\n   * If true, doesn't play system sound on touch.\n   */\n  android_disableSound?: ?boolean,\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   */\n  android_ripple?: ?RippleConfig,\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  unstable_pressDelay?: ?number,\n  /**\n   * Web to Native Accessibility props\n   * https://github.com/facebook/react-native/issues/34424\n   */\n  'aria-label'?: ?string,\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    accessibilityState,\n    'aria-live': ariaLive,\n    android_disableSound,\n    android_ripple,\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-label': ariaLabel,\n    'aria-selected': ariaSelected,\n    cancelable,\n    children,\n    delayHoverIn,\n    delayHoverOut,\n    delayLongPress,\n    disabled,\n    focusable,\n    hitSlop,\n    onHoverIn,\n    onHoverOut,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    pressRetentionOffset,\n    style,\n    testOnly_pressed,\n    unstable_pressDelay,\n    ...restProps\n  } = props;\n\n  const viewRef = useRef<React.ElementRef<typeof View> | null>(null);\n  const mergedRef = useMergeRefs(forwardedRef, viewRef);\n\n  const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  const [pressed, setPressed] = usePressState(testOnly_pressed === true);\n\n  let _accessibilityState = {\n    busy: ariaBusy ?? accessibilityState?.busy,\n    checked: ariaChecked ?? accessibilityState?.checked,\n    disabled: ariaDisabled ?? accessibilityState?.disabled,\n    expanded: ariaExpanded ?? accessibilityState?.expanded,\n    selected: ariaSelected ?? accessibilityState?.selected,\n  };\n\n  _accessibilityState =\n    disabled != null ? {..._accessibilityState, disabled} : _accessibilityState;\n\n  const accessibilityValue = {\n    max: props['aria-valuemax'] ?? props.accessibilityValue?.max,\n    min: props['aria-valuemin'] ?? props.accessibilityValue?.min,\n    now: props['aria-valuenow'] ?? props.accessibilityValue?.now,\n    text: props['aria-valuetext'] ?? props.accessibilityValue?.text,\n  };\n\n  const accessibilityLiveRegion =\n    ariaLive === 'off' ? 'none' : ariaLive ?? props.accessibilityLiveRegion;\n\n  const accessibilityLabel = ariaLabel ?? props.accessibilityLabel;\n  const restPropsWithDefaults: React.ElementConfig<typeof View> = {\n    ...restProps,\n    ...android_rippleConfig?.viewProps,\n    accessible: accessible !== false,\n    accessibilityViewIsModal:\n      restProps['aria-modal'] ?? restProps.accessibilityViewIsModal,\n    accessibilityLiveRegion,\n    accessibilityLabel,\n    accessibilityState: _accessibilityState,\n    focusable: focusable !== false,\n    accessibilityValue,\n    hitSlop,\n  };\n\n  const config = useMemo(\n    () => ({\n      cancelable,\n      disabled,\n      hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      delayPressIn: unstable_pressDelay,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n        setPressed(true);\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig?.onPressMove,\n      onPressOut(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n        setPressed(false);\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      },\n    }),\n    [\n      android_disableSound,\n      android_rippleConfig,\n      cancelable,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      disabled,\n      hitSlop,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      pressRetentionOffset,\n      setPressed,\n      unstable_pressDelay,\n    ],\n  );\n  const eventHandlers = usePressability(config);\n\n  return (\n    <View\n      {...restPropsWithDefaults}\n      {...eventHandlers}\n      ref={mergedRef}\n      style={typeof style === 'function' ? style({pressed}) : style}\n      collapsable={false}>\n      {typeof children === 'function' ? children({pressed}) : children}\n      {__DEV__ ? <PressabilityDebugView color=\"red\" hitSlop={hitSlop} /> : null}\n    </View>\n  );\n}\n\nfunction usePressState(forcePressed: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forcePressed, setPressed];\n}\n\nconst MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>,\n>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport View from '../View/View';\nimport {Commands} from '../View/ViewNativeComponent';\nimport invariant from 'invariant';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype NativeBackgroundProp = $ReadOnly<{|\n  type: 'RippleAndroid',\n  color: ?number,\n  borderless: boolean,\n  rippleRadius: ?number,\n|}>;\n\nexport type RippleConfig = {|\n  color?: ColorValue,\n  borderless?: boolean,\n  radius?: number,\n  foreground?: boolean,\n|};\n\n/**\n * Provides the event handlers and props for configuring the ripple effect on\n * supported versions of Android.\n */\nexport default function useAndroidRippleForView(\n  rippleConfig: ?RippleConfig,\n  viewRef: {|current: null | React.ElementRef<typeof View>|},\n): ?$ReadOnly<{|\n  onPressIn: (event: PressEvent) => void,\n  onPressMove: (event: PressEvent) => void,\n  onPressOut: (event: PressEvent) => void,\n  viewProps:\n    | $ReadOnly<{|nativeBackgroundAndroid: NativeBackgroundProp|}>\n    | $ReadOnly<{|nativeForegroundAndroid: NativeBackgroundProp|}>,\n|}> {\n  const {color, borderless, radius, foreground} = rippleConfig ?? {};\n\n  return useMemo(() => {\n    if (\n      Platform.OS === 'android' &&\n      (color != null || borderless != null || radius != null)\n    ) {\n      const processedColor = processColor(color);\n      invariant(\n        processedColor == null || typeof processedColor === 'number',\n        'Unexpected color given for Ripple color',\n      );\n\n      const nativeRippleValue = {\n        type: 'RippleAndroid',\n        color: processedColor,\n        borderless: borderless === true,\n        rippleRadius: radius,\n      };\n\n      return {\n        viewProps:\n          foreground === true\n            ? // $FlowFixMe[incompatible-return]\n              {nativeForegroundAndroid: nativeRippleValue}\n            : // $FlowFixMe[incompatible-return]\n              {nativeBackgroundAndroid: nativeRippleValue},\n        onPressIn(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n            Commands.setPressed(view, true);\n          }\n        },\n        onPressMove(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressOut(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        },\n      };\n    }\n    return null;\n  }, [borderless, color, foreground, radius, viewRef]);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport ProgressBarAndroidNativeComponent from './ProgressBarAndroidNativeComponent';\n\nconst React = require('react');\n\nexport type ProgressBarAndroidProps = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * Style of the ProgressBar and whether it shows indeterminate progress (e.g. spinner).\n   *\n   * `indeterminate` can only be false if `styleAttr` is Horizontal, and requires a\n   * `progress` value.\n   */\n  ...\n    | {|\n        styleAttr: 'Horizontal',\n        indeterminate: false,\n        progress: number,\n      |}\n    | {|\n        typeAttr:\n          | 'Horizontal'\n          | 'Normal'\n          | 'Small'\n          | 'Large'\n          | 'Inverse'\n          | 'SmallInverse'\n          | 'LargeInverse',\n        indeterminate: true,\n      |},\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  animating?: ?boolean,\n  /**\n   * Color of the progress bar.\n   */\n  color?: ?ColorValue,\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: ?string,\n|}>;\n\n/**\n * React component that wraps the Android-only `ProgressBar`. This component is\n * used to indicate that the app is loading or there is activity in the app.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   var progressBar =\n *     <View style={styles.container}>\n *       <ProgressBar styleAttr=\"Inverse\" />\n *     </View>;\n\n *   return (\n *     <MyLoadingComponent\n *       componentView={componentView}\n *       loadingView={progressBar}\n *       style={styles.loadingComponent}\n *     />\n *   );\n * },\n * ```\n */\nconst ProgressBarAndroid = (\n  {\n    styleAttr = 'Normal',\n    indeterminate = true,\n    animating = true,\n    ...restProps\n  }: ProgressBarAndroidProps,\n  forwardedRef: ?React.Ref<typeof ProgressBarAndroidNativeComponent>,\n) => {\n  return (\n    <ProgressBarAndroidNativeComponent\n      styleAttr={styleAttr}\n      indeterminate={indeterminate}\n      animating={animating}\n      {...restProps}\n      ref={forwardedRef}\n    />\n  );\n};\n\nconst ProgressBarAndroidToExport = React.forwardRef(ProgressBarAndroid);\n\nmodule.exports =\n  /* $FlowFixMe(>=0.89.0 site=react_native_android_fb) This comment suppresses an\n   * error found when Flow v0.89 was deployed. To see the error, delete this\n   * comment and run Flow. */\n  (ProgressBarAndroidToExport: typeof ProgressBarAndroidNativeComponent);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/ProgressBarAndroidNativeComponent';\nimport ProgressBarAndroidNativeComponent from '../../../src/private/specs/components/ProgressBarAndroidNativeComponent';\nexport default ProgressBarAndroidNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/AndroidSwipeRefreshLayoutNativeComponent';\nimport AndroidSwipeRefreshLayoutNativeComponent from '../../../src/private/specs/components/AndroidSwipeRefreshLayoutNativeComponent';\nexport default AndroidSwipeRefreshLayoutNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/PullToRefreshViewNativeComponent';\nimport PullToRefreshViewNativeComponent from '../../../src/private/specs/components/PullToRefreshViewNativeComponent';\nexport default PullToRefreshViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport AndroidSwipeRefreshLayoutNativeComponent, {\n  Commands as AndroidSwipeRefreshLayoutCommands,\n} from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent, {\n  Commands as PullToRefreshCommands,\n} from './PullToRefreshViewNativeComponent';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator.\n   */\n  size?: ?('default' | 'large'),\n|}>;\n\nexport type RefreshControlProps = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?() => void | Promise<void>,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  _nativeRef: ?React.ElementRef<\n    | typeof PullToRefreshViewNativeComponent\n    | typeof AndroidSwipeRefreshLayoutNativeComponent,\n  >;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (\n      this.props.refreshing !== this._lastNativeRefreshing &&\n      this._nativeRef\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      } else {\n        PullToRefreshCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      }\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      const {enabled, colors, progressBackgroundColor, size, ...props} =\n        this.props;\n      return (\n        <PullToRefreshViewNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    } else {\n      const {tintColor, titleColor, title, ...props} = this.props;\n      return (\n        <AndroidSwipeRefreshLayoutNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    }\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    // $FlowFixMe[unused-promise]\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n\n  _setNativeRef = (\n    ref: ?React.ElementRef<\n      | typeof PullToRefreshViewNativeComponent\n      | typeof AndroidSwipeRefreshLayoutNativeComponent,\n    >,\n  ) => {\n    this._nativeRef = ref;\n  };\n}\n\nmodule.exports = RefreshControl;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/RCTSafeAreaViewNativeComponent';\nimport RCTSafeAreaViewNativeComponent from '../../../src/private/specs/components/RCTSafeAreaViewNativeComponent';\nexport default RCTSafeAreaViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport Platform from '../../Utilities/Platform';\nimport View from '../View/View';\nimport * as React from 'react';\n\n/**\n * Renders nested content and automatically applies paddings reflect the portion\n * of the view that is not covered by navigation bars, tab bars, toolbars, and\n * other ancestor views.\n *\n * Moreover, and most importantly, Safe Area's paddings reflect physical\n * limitation of the screen, such as rounded corners or camera notches (aka\n * sensor housing area on iPhone X).\n */\nconst exported: React.AbstractComponent<\n  ViewProps,\n  React.ElementRef<typeof View>,\n> = Platform.select({\n  ios: require('./RCTSafeAreaViewNativeComponent').default,\n  default: View,\n});\n\nexport default exported;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/AndroidHorizontalScrollContentViewNativeComponent';\nimport AndroidHorizontalScrollContentViewNativeComponent from '../../../src/private/specs/components/AndroidHorizontalScrollContentViewNativeComponent';\nexport default AndroidHorizontalScrollContentViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {ScrollViewNativeProps as Props} from './ScrollViewNativeComponentType';\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {\n  uiViewClassName: 'AndroidHorizontalScrollView',\n  bubblingEventTypes: {},\n  directEventTypes: {},\n  validAttributes: {\n    decelerationRate: true,\n    disableIntervalMomentum: true,\n    endFillColor: {process: require('../../StyleSheet/processColor').default},\n    fadingEdgeLength: true,\n    nestedScrollEnabled: true,\n    overScrollMode: true,\n    pagingEnabled: true,\n    persistentScrollbar: true,\n    scrollEnabled: true,\n    scrollPerfTag: true,\n    sendMomentumEvents: true,\n    showsHorizontalScrollIndicator: true,\n    snapToAlignment: true,\n    snapToEnd: true,\n    snapToInterval: true,\n    snapToStart: true,\n    snapToOffsets: true,\n    contentOffset: true,\n    borderBottomLeftRadius: true,\n    borderBottomRightRadius: true,\n    borderRadius: true,\n    borderStyle: true,\n    borderRightColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    borderColor: {process: require('../../StyleSheet/processColor').default},\n    borderBottomColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    borderTopLeftRadius: true,\n    borderTopColor: {process: require('../../StyleSheet/processColor').default},\n    removeClippedSubviews: true,\n    borderTopRightRadius: true,\n    borderLeftColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    pointerEvents: true,\n  },\n};\n\nconst AndroidHorizontalScrollViewNativeComponent: HostComponent<Props> =\n  NativeComponentRegistry.get<Props>(\n    'AndroidHorizontalScrollView',\n    () => __INTERNAL_VIEW_CONFIG,\n  );\n\nexport default AndroidHorizontalScrollViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {ViewProps as Props} from '../View/ViewPropTypes';\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {\n  uiViewClassName: 'RCTScrollContentView',\n  bubblingEventTypes: {},\n  directEventTypes: {},\n  validAttributes: {},\n};\n\nconst ScrollContentViewNativeComponent: HostComponent<Props> =\n  NativeComponentRegistry.get<Props>(\n    'RCTScrollContentView',\n    () => __INTERNAL_VIEW_CONFIG,\n  );\n\nexport default ScrollContentViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {PointProp} from '../../StyleSheet/PointPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {\n  LayoutEvent,\n  PressEvent,\n  ScrollEvent,\n} from '../../Types/CoreEventTypes';\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\nimport type {KeyboardEvent, KeyboardMetrics} from '../Keyboard/Keyboard';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {Props as ScrollViewStickyHeaderProps} from './ScrollViewStickyHeader';\n\nimport AnimatedImplementation from '../../Animated/AnimatedImplementation';\nimport FrameRateLogger from '../../Interaction/FrameRateLogger';\nimport {findNodeHandle} from '../../ReactNative/RendererProxy';\nimport UIManager from '../../ReactNative/UIManager';\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport splitLayoutProps from '../../StyleSheet/splitLayoutProps';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Dimensions from '../../Utilities/Dimensions';\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport Platform from '../../Utilities/Platform';\nimport Keyboard from '../Keyboard/Keyboard';\nimport TextInputState from '../TextInput/TextInputState';\nimport View from '../View/View';\nimport AndroidHorizontalScrollContentViewNativeComponent from './AndroidHorizontalScrollContentViewNativeComponent';\nimport AndroidHorizontalScrollViewNativeComponent from './AndroidHorizontalScrollViewNativeComponent';\nimport processDecelerationRate from './processDecelerationRate';\nimport ScrollContentViewNativeComponent from './ScrollContentViewNativeComponent';\nimport Commands from './ScrollViewCommands';\nimport ScrollViewContext, {HORIZONTAL, VERTICAL} from './ScrollViewContext';\nimport ScrollViewNativeComponent from './ScrollViewNativeComponent';\nimport ScrollViewStickyHeader from './ScrollViewStickyHeader';\nimport invariant from 'invariant';\nimport memoize from 'memoize-one';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\n\nif (Platform.OS === 'ios') {\n  require('../../Renderer/shims/ReactNative'); // Force side effects to prevent T55744311\n}\n\nconst {NativeHorizontalScrollViewTuple, NativeVerticalScrollViewTuple} =\n  Platform.OS === 'android'\n    ? {\n        NativeHorizontalScrollViewTuple: [\n          AndroidHorizontalScrollViewNativeComponent,\n          AndroidHorizontalScrollContentViewNativeComponent,\n        ],\n        NativeVerticalScrollViewTuple: [ScrollViewNativeComponent, View],\n      }\n    : {\n        NativeHorizontalScrollViewTuple: [\n          ScrollViewNativeComponent,\n          ScrollContentViewNativeComponent,\n        ],\n        NativeVerticalScrollViewTuple: [\n          ScrollViewNativeComponent,\n          ScrollContentViewNativeComponent,\n        ],\n      };\n\n/*\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollView` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. This is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\n\n// Public methods for ScrollView\nexport type ScrollViewImperativeMethods = $ReadOnly<{|\n  getScrollResponder: $PropertyType<ScrollView, 'getScrollResponder'>,\n  getScrollableNode: $PropertyType<ScrollView, 'getScrollableNode'>,\n  getInnerViewNode: $PropertyType<ScrollView, 'getInnerViewNode'>,\n  getInnerViewRef: $PropertyType<ScrollView, 'getInnerViewRef'>,\n  getNativeScrollRef: $PropertyType<ScrollView, 'getNativeScrollRef'>,\n  scrollTo: $PropertyType<ScrollView, 'scrollTo'>,\n  scrollToEnd: $PropertyType<ScrollView, 'scrollToEnd'>,\n  flashScrollIndicators: $PropertyType<ScrollView, 'flashScrollIndicators'>,\n  scrollResponderZoomTo: $PropertyType<ScrollView, 'scrollResponderZoomTo'>,\n  scrollResponderScrollNativeHandleToKeyboard: $PropertyType<\n    ScrollView,\n    'scrollResponderScrollNativeHandleToKeyboard',\n  >,\n|}>;\n\nexport type DecelerationRateType = 'fast' | 'normal' | number;\nexport type ScrollResponderType = ScrollViewImperativeMethods;\n\ntype NativeScrollViewInstance = React.ElementRef<HostComponent<mixed>>;\ntype PublicScrollViewInstance = $ReadOnly<{|\n  ...$Exact<NativeScrollViewInstance>,\n  ...ScrollViewImperativeMethods,\n|}>;\n\ntype InnerViewInstance = React.ElementRef<typeof View>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Controls whether iOS should automatically adjust the content inset\n   * for scroll views that are placed behind a navigation bar or\n   * tab bar/ toolbar. The default value is true.\n   * @platform ios\n   */\n  automaticallyAdjustContentInsets?: ?boolean,\n  /**\n   * Controls whether the ScrollView should automatically adjust its `contentInset`\n   * and `scrollViewInsets` when the Keyboard changes its size. The default value is false.\n   * @platform ios\n   */\n  automaticallyAdjustKeyboardInsets?: ?boolean,\n  /**\n   * Controls whether iOS should automatically adjust the scroll indicator\n   * insets. The default value is true. Available on iOS 13 and later.\n   * @platform ios\n   */\n  automaticallyAdjustsScrollIndicatorInsets?: ?boolean,\n  /**\n   * The amount by which the scroll view content is inset from the edges\n   * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n   * @platform ios\n   */\n  contentInset?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view bounces when it reaches the end of the\n   * content if the content is larger then the scroll view along the axis of\n   * the scroll direction. When false, it disables all bouncing even if\n   * the `alwaysBounce*` props are true. The default value is true.\n   * @platform ios\n   */\n  bounces?: ?boolean,\n  /**\n   * By default, ScrollView has an active pan responder that hijacks panresponders\n   * deeper in the render tree in order to prevent accidental touches while scrolling.\n   * However, in certain occasions (such as when using snapToInterval) in a vertical scrollview\n   * You may want to disable this behavior in order to prevent the ScrollView from blocking touches\n   */\n  disableScrollViewPanResponder?: ?boolean,\n  /**\n   * When true, gestures can drive zoom past min/max and the zoom will animate\n   * to the min/max value at gesture end, otherwise the zoom will not exceed\n   * the limits.\n   * @platform ios\n   */\n  bouncesZoom?: ?boolean,\n  /**\n   * When true, the scroll view bounces horizontally when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is true when `horizontal={true}` and false otherwise.\n   * @platform ios\n   */\n  alwaysBounceHorizontal?: ?boolean,\n  /**\n   * When true, the scroll view bounces vertically when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is false when `horizontal={true}` and true otherwise.\n   * @platform ios\n   */\n  alwaysBounceVertical?: ?boolean,\n  /**\n   * When true, the scroll view automatically centers the content when the\n   * content is smaller than the scroll view bounds; when the content is\n   * larger than the scroll view, this property has no effect. The default\n   * value is false.\n   * @platform ios\n   */\n  centerContent?: ?boolean,\n  /**\n   * The style of the scroll indicators.\n   *\n   *   - `'default'` (the default), same as `black`.\n   *   - `'black'`, scroll indicator is black. This style is good against a light background.\n   *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n   *\n   * @platform ios\n   */\n  indicatorStyle?: ?('default' | 'black' | 'white'),\n  /**\n   * When true, the ScrollView will try to lock to only vertical or horizontal\n   * scrolling while dragging.  The default value is false.\n   * @platform ios\n   */\n  directionalLockEnabled?: ?boolean,\n  /**\n   * When false, once tracking starts, won't try to drag if the touch moves.\n   * The default value is true.\n   * @platform ios\n   */\n  canCancelContentTouches?: ?boolean,\n  /**\n   * When set, the scroll view will adjust the scroll position so that the first child that is\n   * currently visible and at or beyond `minIndexForVisible` will not change position. This is\n   * useful for lists that are loading content in both directions, e.g. a chat thread, where new\n   * messages coming in might otherwise cause the scroll position to jump. A value of 0 is common,\n   * but other values such as 1 can be used to skip loading spinners or other content that should\n   * not maintain position.\n   *\n   * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\n   * to the top after making the adjustment if the user was within the threshold of the top before\n   * the adjustment was made. This is also useful for chat-like applications where you want to see\n   * new messages scroll into place, but not if the user has scrolled up a ways and it would be\n   * disruptive to scroll a bunch.\n   *\n   * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\n   * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\n   * don't re-order the content of any ScrollViews or Lists that use this feature.\n   *\n   * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\n   * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\n   * whether content is \"visible\" or not.\n   *\n   */\n  maintainVisibleContentPosition?: ?$ReadOnly<{|\n    minIndexForVisible: number,\n    autoscrollToTopThreshold?: ?number,\n  |}>,\n  /**\n   * The maximum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  maximumZoomScale?: ?number,\n  /**\n   * The minimum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  minimumZoomScale?: ?number,\n  /**\n   * When true, ScrollView allows use of pinch gestures to zoom in and out.\n   * The default value is true.\n   * @platform ios\n   */\n  pinchGestureEnabled?: ?boolean,\n  /**\n   * The amount by which the scroll view indicators are inset from the edges\n   * of the scroll view. This should normally be set to the same value as\n   * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n   * @platform ios\n   */\n  scrollIndicatorInsets?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view can be programmatically scrolled beyond its\n   * content size. The default value is false.\n   * @platform ios\n   */\n  scrollToOverflowEnabled?: ?boolean,\n  /**\n   * When true, the scroll view scrolls to top when the status bar is tapped.\n   * The default value is true.\n   * @platform ios\n   */\n  scrollsToTop?: ?boolean,\n  /**\n   * Fires when the scroll view scrolls to top after the status bar has been tapped\n   * @platform ios\n   */\n  onScrollToTop?: (event: ScrollEvent) => void,\n  /**\n   * When true, shows a horizontal scroll indicator.\n   * The default value is true.\n   */\n  showsHorizontalScrollIndicator?: ?boolean,\n  /**\n   * The current scale of the scroll view content. The default value is 1.0.\n   * @platform ios\n   */\n  zoomScale?: ?number,\n  /**\n   * This property specifies how the safe area insets are used to modify the\n   * content area of the scroll view. The default value of this property is\n   * \"never\". Available on iOS 11 and later.\n   * @platform ios\n   */\n  contentInsetAdjustmentBehavior?: ?(\n    | 'automatic'\n    | 'scrollableAxes'\n    | 'never'\n    | 'always'\n  ),\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Enables nested scrolling for Android API level 21+.\n   * Nested scrolling is supported by default on iOS\n   * @platform android\n   */\n  nestedScrollEnabled?: ?boolean,\n  /**\n   * Sometimes a scrollview takes up more space than its content fills. When this is\n   * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n   * a background and creating unnecessary overdraw. This is an advanced optimization\n   * that is not needed in the general case.\n   * @platform android\n   */\n  endFillColor?: ?ColorValue,\n  /**\n   * Tag used to log scroll performance on this scroll view. Will force\n   * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n   * anything out of the box and you need to implement a custom native\n   * FpsListener for it to be useful.\n   * @platform android\n   */\n  scrollPerfTag?: ?string,\n  /**\n   * Used to override default value of overScroll mode.\n   *\n   * Possible values:\n   *\n   *  - `'auto'` - Default value, allow a user to over-scroll\n   *    this view only if the content is large enough to meaningfully scroll.\n   *  - `'always'` - Always allow a user to over-scroll this view.\n   *  - `'never'` - Never allow a user to over-scroll this view.\n   *\n   * @platform android\n   */\n  overScrollMode?: ?('auto' | 'always' | 'never'),\n  /**\n   * Causes the scrollbars not to turn transparent when they are not in use.\n   * The default value is false.\n   *\n   * @platform android\n   */\n  persistentScrollbar?: ?boolean,\n  /**\n   * Fades out the edges of the scroll content.\n   *\n   * If the value is greater than 0, the fading edges will be set accordingly\n   * to the current scroll direction and position,\n   * indicating if there is more content to show.\n   *\n   * The default value is 0.\n   *\n   * @platform android\n   */\n  fadingEdgeLength?: ?number,\n|}>;\n\ntype StickyHeaderComponentType = React.AbstractComponent<\n  ScrollViewStickyHeaderProps,\n  $ReadOnly<interface {setNextHeaderY: number => void}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * These styles will be applied to the scroll view content container which\n   * wraps all of the child views. Example:\n   *\n   * ```\n   * return (\n   *   <ScrollView contentContainerStyle={styles.contentContainer}>\n   *   </ScrollView>\n   * );\n   * ...\n   * const styles = StyleSheet.create({\n   *   contentContainer: {\n   *     paddingVertical: 20\n   *   }\n   * });\n   * ```\n   */\n  contentContainerStyle?: ?ViewStyleProp,\n  /**\n   * Used to manually set the starting scroll offset.\n   * The default value is `{x: 0, y: 0}`.\n   */\n  contentOffset?: ?PointProp,\n  /**\n   * When true, the scroll view stops on the next index (in relation to scroll\n   * position at release) regardless of how fast the gesture is. This can be\n   * used for pagination when the page is less than the width of the\n   * horizontal ScrollView or the height of the vertical ScrollView. The default value is false.\n   */\n  disableIntervalMomentum?: ?boolean,\n  /**\n   * A floating-point number that determines how quickly the scroll view\n   * decelerates after the user lifts their finger. You may also use string\n   * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n   * for `UIScrollViewDecelerationRateNormal` and\n   * `UIScrollViewDecelerationRateFast` respectively.\n   *\n   *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)\n   *   - `'fast'`: 0.99 on iOS, 0.9 on Android\n   */\n  decelerationRate?: ?DecelerationRateType,\n  /**\n   * When true, the scroll view's children are arranged horizontally in a row\n   * instead of vertically in a column. The default value is false.\n   */\n  horizontal?: ?boolean,\n  /**\n   * If sticky headers should stick at the bottom instead of the top of the\n   * ScrollView. This is usually used with inverted ScrollViews.\n   */\n  invertStickyHeaders?: ?boolean,\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *\n   * *Cross platform*\n   *\n   *   - `'none'` (the default), drags do not dismiss the keyboard.\n   *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n   *\n   * *iOS Only*\n   *\n   *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n   *     synchrony with the touch; dragging upwards cancels the dismissal.\n   *     On android this is not supported and it will have the same behavior as 'none'.\n   */\n  keyboardDismissMode?: ?// default\n  // cross-platform\n  ('none' | 'on-drag' | 'interactive'), // ios only\n  /**\n   * Determines when the keyboard should stay visible after a tap.\n   *\n   *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n   *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n   *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n   *     catch taps, but children of the scroll view can catch taps.\n   *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n   *     a children, (or captured by an ancestor).\n   *   - `false`, deprecated, use 'never' instead\n   *   - `true`, deprecated, use 'always' instead\n   */\n  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | true | false),\n  /**\n   * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollBegin?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollEnd?: ?(event: ScrollEvent) => void,\n\n  /**\n   * Fires at most once per frame during scrolling.\n   */\n  onScroll?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the user begins to drag the scroll view.\n   */\n  onScrollBeginDrag?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the user stops dragging the scroll view and it either stops\n   * or begins to glide.\n   */\n  onScrollEndDrag?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when scrollable content view of the ScrollView changes.\n   *\n   * Handler function is passed the content width and content height as parameters:\n   * `(contentWidth, contentHeight)`\n   *\n   * It's implemented using onLayout handler attached to the content container\n   * which this ScrollView renders.\n   */\n  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,\n  onKeyboardDidShow?: (event: KeyboardEvent) => void,\n  onKeyboardDidHide?: (event: KeyboardEvent) => void,\n  onKeyboardWillShow?: (event: KeyboardEvent) => void,\n  onKeyboardWillHide?: (event: KeyboardEvent) => void,\n  /**\n   * When true, the scroll view stops on multiples of the scroll view's size\n   * when scrolling. This can be used for horizontal pagination. The default\n   * value is false.\n   */\n  pagingEnabled?: ?boolean,\n  /**\n   * When false, the view cannot be scrolled via touch interaction.\n   * The default value is true.\n   *\n   * Note that the view can always be scrolled by calling `scrollTo`.\n   */\n  scrollEnabled?: ?boolean,\n  /**\n   * Limits how often scroll events will be fired while scrolling, specified as\n   * a time interval in ms. This may be useful when expensive work is performed\n   * in response to scrolling. Values <= `16` will disable throttling,\n   * regardless of the refresh rate of the device.\n   */\n  scrollEventThrottle?: ?number,\n  /**\n   * When true, shows a vertical scroll indicator.\n   * The default value is true.\n   */\n  showsVerticalScrollIndicator?: ?boolean,\n  /**\n   * When true, Sticky header is hidden when scrolling down, and dock at the top\n   * when scrolling up\n   */\n  stickyHeaderHiddenOnScroll?: ?boolean,\n  /**\n   * An array of child indices determining which children get docked to the\n   * top of the screen when scrolling. For example, passing\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n   * top of the scroll view. This property is not supported in conjunction\n   * with `horizontal={true}`.\n   */\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\n  /**\n   * A React Component that will be used to render sticky headers.\n   * To be used together with `stickyHeaderIndices` or with `SectionList`, defaults to `ScrollViewStickyHeader`.\n   * You may need to set this if your sticky header uses custom transforms (eg. translation),\n   * for example when you want your list to have an animated hidable header.\n   */\n  StickyHeaderComponent?: StickyHeaderComponentType,\n  /**\n   * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n   * of the snapping to the scroll view.\n   *\n   *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n   *   - `'center'` will align the snap in the center\n   *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n   */\n  snapToAlignment?: ?('start' | 'center' | 'end'),\n  /**\n   * When set, causes the scroll view to stop at multiples of the value of\n   * `snapToInterval`. This can be used for paginating through children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` prop.\n   */\n  snapToInterval?: ?number,\n  /**\n   * When set, causes the scroll view to stop at the defined offsets.\n   * This can be used for paginating through variously sized children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` and `snapToInterval` props.\n   */\n  snapToOffsets?: ?$ReadOnlyArray<number>,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the beginning\n   * of the list counts as a snap offset. Set `snapToStart` to false to disable\n   * this behavior and allow the list to scroll freely between its start and\n   * the first `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToStart?: ?boolean,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the end\n   * of the list counts as a snap offset. Set `snapToEnd` to false to disable\n   * this behavior and allow the list to scroll freely between its end and\n   * the last `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToEnd?: ?boolean,\n  /**\n   * Experimental: When true, offscreen child views (whose `overflow` value is\n   * `hidden`) are removed from their native backing superview when offscreen.\n   * This can improve scrolling performance on long lists. The default value is\n   * true.\n   */\n  removeClippedSubviews?: ?boolean,\n  /**\n   * A RefreshControl component, used to provide pull-to-refresh\n   * functionality for the ScrollView. Only works for vertical ScrollViews\n   * (`horizontal` prop must be `false`).\n   *\n   * See [RefreshControl](docs/refreshcontrol.html).\n   */\n  /* $FlowFixMe[unclear-type] - how to handle generic type without existential\n   * operator? */\n  refreshControl?: ?React.Element<any>,\n  children?: React.Node,\n  /**\n   * A ref to the inner View element of the ScrollView. This should be used\n   * instead of calling `getInnerViewRef`.\n   */\n  innerViewRef?: ForwardedRef<InnerViewInstance>,\n  /**\n   * A ref to the Native ScrollView component. This ref can be used to call\n   * all of ScrollView's public methods, in addition to native methods like\n   * measure, measureLayout, etc.\n   */\n  scrollViewRef?: ForwardedRef<PublicScrollViewInstance>,\n|}>;\n\ntype State = {|\n  layoutHeight: ?number,\n|};\n\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\n\nexport type ScrollViewComponentStatics = $ReadOnly<{|\n  Context: typeof ScrollViewContext,\n|}>;\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\nclass ScrollView extends React.Component<Props, State> {\n  static Context: typeof ScrollViewContext = ScrollViewContext;\n\n  constructor(props: Props) {\n    super(props);\n\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(\n      this.props.contentOffset?.y ?? 0,\n    );\n    this._scrollAnimatedValue.setOffset(this.props.contentInset?.top ?? 0);\n  }\n\n  _scrollAnimatedValue: AnimatedImplementation.Value;\n  _scrollAnimatedValueAttachment: ?{detach: () => void, ...} = null;\n  _stickyHeaderRefs: Map<string, React.ElementRef<StickyHeaderComponentType>> =\n    new Map();\n  _headerLayoutYs: Map<string, number> = new Map();\n\n  _keyboardMetrics: ?KeyboardMetrics = null;\n  _additionalScrollOffset: number = 0;\n  _isTouching: boolean = false;\n  _lastMomentumScrollBeginTime: number = 0;\n  _lastMomentumScrollEndTime: number = 0;\n\n  // Reset to false every time becomes responder. This is used to:\n  // - Determine if the scroll view has been scrolled and therefore should\n  // refuse to give up its responder lock.\n  // - Determine if releasing should dismiss the keyboard when we are in\n  // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').\n  _observedScrollSinceBecomingResponder: boolean = false;\n  _becameResponderWhileAnimating: boolean = false;\n  _preventNegativeScrollOffset: ?boolean = null;\n\n  _animated: ?boolean = null;\n\n  _subscriptionKeyboardWillShow: ?EventSubscription = null;\n  _subscriptionKeyboardWillHide: ?EventSubscription = null;\n  _subscriptionKeyboardDidShow: ?EventSubscription = null;\n  _subscriptionKeyboardDidHide: ?EventSubscription = null;\n\n  state: State = {\n    layoutHeight: null,\n  };\n\n  componentDidMount() {\n    if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {\n      console.warn(\n        `'keyboardShouldPersistTaps={${\n          this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'\n        }}' is deprecated. ` +\n          `Use 'keyboardShouldPersistTaps=\"${\n            this.props.keyboardShouldPersistTaps ? 'always' : 'never'\n          }\"' instead`,\n      );\n    }\n\n    this._keyboardMetrics = Keyboard.metrics();\n    this._additionalScrollOffset = 0;\n\n    this._subscriptionKeyboardWillShow = Keyboard.addListener(\n      'keyboardWillShow',\n      this.scrollResponderKeyboardWillShow,\n    );\n    this._subscriptionKeyboardWillHide = Keyboard.addListener(\n      'keyboardWillHide',\n      this.scrollResponderKeyboardWillHide,\n    );\n    this._subscriptionKeyboardDidShow = Keyboard.addListener(\n      'keyboardDidShow',\n      this.scrollResponderKeyboardDidShow,\n    );\n    this._subscriptionKeyboardDidHide = Keyboard.addListener(\n      'keyboardDidHide',\n      this.scrollResponderKeyboardDidHide,\n    );\n\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevContentInsetTop = prevProps.contentInset\n      ? prevProps.contentInset.top\n      : 0;\n    const newContentInsetTop = this.props.contentInset\n      ? this.props.contentInset.top\n      : 0;\n    if (prevContentInsetTop !== newContentInsetTop) {\n      this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);\n    }\n\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentWillUnmount() {\n    if (this._subscriptionKeyboardWillShow != null) {\n      this._subscriptionKeyboardWillShow.remove();\n    }\n    if (this._subscriptionKeyboardWillHide != null) {\n      this._subscriptionKeyboardWillHide.remove();\n    }\n    if (this._subscriptionKeyboardDidShow != null) {\n      this._subscriptionKeyboardDidShow.remove();\n    }\n    if (this._subscriptionKeyboardDidHide != null) {\n      this._subscriptionKeyboardDidHide.remove();\n    }\n\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  }\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: () => ScrollResponderType = () => {\n    // $FlowFixMe[unclear-type]\n    return ((this: any): ScrollResponderType);\n  };\n\n  getScrollableNode: () => ?number = () => {\n    return findNodeHandle(this._scrollView.nativeInstance);\n  };\n\n  getInnerViewNode: () => ?number = () => {\n    return findNodeHandle(this._innerView.nativeInstance);\n  };\n\n  getInnerViewRef: () => InnerViewInstance | null = () => {\n    return this._innerView.nativeInstance;\n  };\n\n  getNativeScrollRef: () => NativeScrollViewInstance | null = () => {\n    return this._scrollView.nativeInstance;\n  };\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: (\n    options?:\n      | {\n          x?: number,\n          y?: number,\n          animated?: boolean,\n          ...\n        }\n      | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) => void = (\n    options?:\n      | {\n          x?: number,\n          y?: number,\n          animated?: boolean,\n          ...\n        }\n      | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) => {\n    let x, y, animated;\n    if (typeof options === 'number') {\n      console.warn(\n        '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n          'animated: true})` instead.',\n      );\n      y = options;\n      x = deprecatedX;\n      animated = deprecatedAnimated;\n    } else if (options) {\n      y = options.y;\n      x = options.x;\n      animated = options.animated;\n    }\n    if (this._scrollView.nativeInstance == null) {\n      return;\n    }\n    Commands.scrollTo(\n      this._scrollView.nativeInstance,\n      x || 0,\n      y || 0,\n      animated !== false,\n    );\n  };\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: (options?: ?{animated?: boolean, ...}) => void = (\n    options?: ?{animated?: boolean, ...},\n  ) => {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    if (this._scrollView.nativeInstance == null) {\n      return;\n    }\n    Commands.scrollToEnd(this._scrollView.nativeInstance, animated);\n  };\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: () => void = () => {\n    if (this._scrollView.nativeInstance == null) {\n      return;\n    }\n    Commands.flashScrollIndicators(this._scrollView.nativeInstance);\n  };\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {number} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's bottom \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: <T>(\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) => void = <T>(\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) => {\n    this._additionalScrollOffset = additionalOffset || 0;\n    this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n\n    if (this._innerView.nativeInstance == null) {\n      return;\n    }\n\n    if (typeof nodeHandle === 'number') {\n      UIManager.measureLayout(\n        nodeHandle,\n        nullthrows(findNodeHandle(this)),\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this._textInputFocusError,\n        this._inputMeasureAndScrollToKeyboard,\n      );\n    } else {\n      nodeHandle.measureLayout(\n        this._innerView.nativeInstance,\n        this._inputMeasureAndScrollToKeyboard,\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this._textInputFocusError,\n      );\n    }\n  };\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: (\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) => void = (\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) => {\n    invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');\n    if ('animated' in rect) {\n      this._animated = rect.animated;\n      delete rect.animated;\n    } else if (typeof animated !== 'undefined') {\n      console.warn(\n        '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',\n      );\n    }\n\n    if (this._scrollView.nativeInstance == null) {\n      return;\n    }\n    Commands.zoomToRect(\n      this._scrollView.nativeInstance,\n      rect,\n      animated !== false,\n    );\n  };\n\n  _textInputFocusError() {\n    console.warn('Error measuring text field.');\n  }\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  _inputMeasureAndScrollToKeyboard: (\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n  ) => void = (left: number, top: number, width: number, height: number) => {\n    let keyboardScreenY = Dimensions.get('window').height;\n\n    const scrollTextInputIntoVisibleRect = () => {\n      if (this._keyboardMetrics != null) {\n        keyboardScreenY = this._keyboardMetrics.screenY;\n      }\n      let scrollOffsetY =\n        top - keyboardScreenY + height + this._additionalScrollOffset;\n\n      // By default, this can scroll with negative offset, pulling the content\n      // down so that the target component's bottom meets the keyboard's top.\n      // If requested otherwise, cap the offset at 0 minimum to avoid content\n      // shifting down.\n      if (this._preventNegativeScrollOffset === true) {\n        scrollOffsetY = Math.max(0, scrollOffsetY);\n      }\n      this.scrollTo({x: 0, y: scrollOffsetY, animated: true});\n\n      this._additionalScrollOffset = 0;\n      this._preventNegativeScrollOffset = false;\n    };\n\n    if (this._keyboardMetrics == null) {\n      // `_keyboardMetrics` is set inside `scrollResponderKeyboardWillShow` which\n      // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.\n      // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to\n      // text input.\n      setTimeout(() => {\n        scrollTextInputIntoVisibleRect();\n      }, 0);\n    } else {\n      scrollTextInputIntoVisibleRect();\n    }\n  };\n\n  _getKeyForIndex(index: $FlowFixMe, childArray: $FlowFixMe): $FlowFixMe {\n    const child = childArray[index];\n    return child && child.key;\n  }\n\n  _updateAnimatedNodeAttachment() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (\n      this.props.stickyHeaderIndices &&\n      this.props.stickyHeaderIndices.length > 0\n    ) {\n      this._scrollAnimatedValueAttachment =\n        AnimatedImplementation.attachNativeEvent(\n          this._scrollView.nativeInstance,\n          'onScroll',\n          [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],\n        );\n    }\n  }\n\n  _setStickyHeaderRef(\n    key: string,\n    ref: ?React.ElementRef<StickyHeaderComponentType>,\n  ) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  }\n\n  _onStickyHeaderLayout(index: $FlowFixMe, event: $FlowFixMe, key: $FlowFixMe) {\n    const {stickyHeaderIndices} = this.props;\n    if (!stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray<$FlowFixMe>(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray),\n      );\n      previousHeader &&\n        previousHeader.setNextHeaderY &&\n        previousHeader.setNextHeaderY(layoutY);\n    }\n  }\n\n  _handleScroll = (e: ScrollEvent) => {\n    this._observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  };\n\n  _handleLayout = (e: LayoutEvent) => {\n    if (this.props.invertStickyHeaders === true) {\n      this.setState({layoutHeight: e.nativeEvent.layout.height});\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  };\n\n  _handleContentOnLayout = (e: LayoutEvent) => {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  };\n\n  _innerView: RefForwarder<InnerViewInstance, InnerViewInstance> =\n    createRefForwarder(\n      (instance: InnerViewInstance): InnerViewInstance => instance,\n    );\n\n  _scrollView: RefForwarder<\n    NativeScrollViewInstance,\n    PublicScrollViewInstance,\n  > = createRefForwarder(\n    (nativeInstance: NativeScrollViewInstance): PublicScrollViewInstance => {\n      // This is a hack. Ideally we would forwardRef  to the underlying\n      // host component. However, since ScrollView has it's own methods that can be\n      // called as well, if we used the standard forwardRef then these\n      // methods wouldn't be accessible and thus be a breaking change.\n      //\n      // Therefore we edit ref to include ScrollView's public methods so that\n      // they are callable from the ref.\n\n      // $FlowFixMe[prop-missing] - Known issue with appending custom methods.\n      const publicInstance: PublicScrollViewInstance = Object.assign(\n        nativeInstance,\n        {\n          getScrollResponder: this.getScrollResponder,\n          getScrollableNode: this.getScrollableNode,\n          getInnerViewNode: this.getInnerViewNode,\n          getInnerViewRef: this.getInnerViewRef,\n          getNativeScrollRef: this.getNativeScrollRef,\n          scrollTo: this.scrollTo,\n          scrollToEnd: this.scrollToEnd,\n          flashScrollIndicators: this.flashScrollIndicators,\n          scrollResponderZoomTo: this.scrollResponderZoomTo,\n          scrollResponderScrollNativeHandleToKeyboard:\n            this.scrollResponderScrollNativeHandleToKeyboard,\n        },\n      );\n\n      return publicInstance;\n    },\n  );\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` module callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n\n  scrollResponderKeyboardWillShow: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = e.endCoordinates;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  };\n\n  scrollResponderKeyboardWillHide: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  };\n\n  scrollResponderKeyboardDidShow: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = e.endCoordinates;\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  };\n\n  scrollResponderKeyboardDidHide: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardMetrics = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  };\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  _handleMomentumScrollBegin: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    this._lastMomentumScrollBeginTime = global.performance.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  };\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  _handleMomentumScrollEnd: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    FrameRateLogger.endScroll();\n    this._lastMomentumScrollEndTime = global.performance.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  _handleScrollBeginDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    FrameRateLogger.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation\n\n    if (\n      Platform.OS === 'android' &&\n      this.props.keyboardDismissMode === 'on-drag'\n    ) {\n      dismissKeyboard();\n    }\n\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  _handleScrollEndDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    const {velocity} = e.nativeEvent;\n    // - If we are animating, then this is a \"drag\" that is stopping the scrollview and momentum end\n    //   will fire.\n    // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or\n    //   another drag starts and ends.\n    // - If we don't get velocity, better to stop the interaction twice than not stop it.\n    if (\n      !this._isAnimating() &&\n      (!velocity || (velocity.x === 0 && velocity.y === 0))\n    ) {\n      FrameRateLogger.endScroll();\n    }\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  _isAnimating: () => boolean = () => {\n    const now = global.performance.now();\n    const timeSinceLastMomentumScrollEnd =\n      now - this._lastMomentumScrollEndTime;\n    const isAnimating =\n      timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||\n      this._lastMomentumScrollEndTime < this._lastMomentumScrollBeginTime;\n    return isAnimating;\n  };\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  _handleResponderGrant: (e: PressEvent) => void = (e: PressEvent) => {\n    this._observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this._becameResponderWhileAnimating = this._isAnimating();\n  };\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  _handleResponderReject: () => void = () => {};\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  _handleResponderRelease: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = e.nativeEvent.touches.length !== 0;\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n\n    if (typeof e.target === 'number') {\n      if (__DEV__) {\n        console.error(\n          'Did not expect event target to be a number. Should have been a native component',\n        );\n      }\n\n      return;\n    }\n\n    // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n    if (\n      currentlyFocusedTextInput != null &&\n      this.props.keyboardShouldPersistTaps !== true &&\n      this.props.keyboardShouldPersistTaps !== 'always' &&\n      this._keyboardIsDismissible() &&\n      e.target !== currentlyFocusedTextInput &&\n      !this._observedScrollSinceBecomingResponder &&\n      !this._becameResponderWhileAnimating\n    ) {\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  };\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  _handleResponderTerminationRequest: () => boolean = () => {\n    return !this._observedScrollSinceBecomingResponder;\n  };\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  _handleScrollShouldSetResponder: () => boolean = () => {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n    return this._isTouching;\n  };\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  _handleStartShouldSetResponder: (e: PressEvent) => boolean = (\n    e: PressEvent,\n  ) => {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n    if (\n      this.props.keyboardShouldPersistTaps === 'handled' &&\n      this._keyboardIsDismissible() &&\n      e.target !== currentlyFocusedInput\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not a text input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  _handleStartShouldSetResponderCapture: (e: PressEvent) => boolean = (\n    e: PressEvent,\n  ) => {\n    // The scroll view should receive taps instead of its descendants if:\n    // * it is already animating/decelerating\n    if (this._isAnimating()) {\n      return true;\n    }\n\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),\n    // and a new touch starts with a non-textinput target (in which case the\n    // first tap should be sent to the scroll view and dismiss the keyboard,\n    // then the second tap goes to the actual interior view)\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n\n    if (typeof e.target === 'number') {\n      if (__DEV__) {\n        console.error(\n          'Did not expect event target to be a number. Should have been a native component',\n        );\n      }\n\n      return false;\n    }\n\n    // Let presses through if the soft keyboard is detached from the viewport\n    if (this._softKeyboardIsDetached()) {\n      return false;\n    }\n\n    if (\n      keyboardNeverPersistTaps &&\n      this._keyboardIsDismissible() &&\n      e.target != null &&\n      // $FlowFixMe[incompatible-call]\n      !TextInputState.isTextInput(e.target)\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Do we consider there to be a dismissible soft-keyboard open?\n   */\n  _keyboardIsDismissible: () => boolean = () => {\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n\n    // We cannot dismiss the keyboard without an input to blur, even if a soft\n    // keyboard is open (e.g. when keyboard is open due to a native component\n    // not participating in TextInputState). It's also possible that the\n    // currently focused input isn't a TextInput (such as by calling ref.focus\n    // on a non-TextInput).\n    const hasFocusedTextInput =\n      currentlyFocusedInput != null &&\n      TextInputState.isTextInput(currentlyFocusedInput);\n\n    // Even if an input is focused, we may not have a keyboard to dismiss. E.g\n    // when using a physical keyboard. Ensure we have an event for an opened\n    // keyboard.\n    const softKeyboardMayBeOpen =\n      this._keyboardMetrics != null || this._keyboardEventsAreUnreliable();\n\n    return hasFocusedTextInput && softKeyboardMayBeOpen;\n  };\n\n  /**\n   * Whether an open soft keyboard is present which does not overlap the\n   * viewport. E.g. for a VR soft-keyboard which is detached from the app\n   * viewport.\n   */\n  _softKeyboardIsDetached: () => boolean = () => {\n    return this._keyboardMetrics != null && this._keyboardMetrics.height === 0;\n  };\n\n  _keyboardEventsAreUnreliable: () => boolean = () => {\n    // Android versions prior to API 30 rely on observing layout changes when\n    // `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.\n    return Platform.OS === 'android' && Platform.Version < 30;\n  };\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  _handleTouchEnd: (e: PressEvent) => void = (e: PressEvent) => {\n    const nativeEvent = e.nativeEvent;\n    this._isTouching = nativeEvent.touches.length !== 0;\n\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistsTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n\n    // Dismiss the keyboard now if we didn't become responder in capture phase\n    // to eat presses, but still want to dismiss on interaction.\n    // Don't do anything if the target of the touch event is the current input.\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n    if (\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput &&\n      this._softKeyboardIsDetached() &&\n      this._keyboardIsDismissible() &&\n      keyboardNeverPersistsTaps\n    ) {\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchCancel` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  _handleTouchCancel: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = false;\n    this.props.onTouchCancel && this.props.onTouchCancel(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  _handleTouchStart: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  _handleTouchMove: (e: PressEvent) => void = (e: PressEvent) => {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  };\n\n  render(): React.Node | React.Element<string> {\n    const [NativeDirectionalScrollView, NativeDirectionalScrollContentView] =\n      this.props.horizontal === true\n        ? NativeHorizontalScrollViewTuple\n        : NativeVerticalScrollViewTuple;\n\n    const contentContainerStyle = [\n      this.props.horizontal === true && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    if (__DEV__ && this.props.style !== undefined) {\n      // $FlowFixMe[underconstrained-implicit-instantiation]\n      const style = flattenStyle(this.props.style);\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(\n        // $FlowFixMe[incompatible-use]\n        prop => style && style[prop] !== undefined,\n      );\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' +\n          JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.',\n      );\n    }\n\n    const contentSizeChangeProps =\n      this.props.onContentSizeChange == null\n        ? null\n        : {\n            onLayout: this._handleContentOnLayout,\n          };\n\n    const {stickyHeaderIndices} = this.props;\n    let children = this.props.children;\n    /**\n     * This function can cause unnecessary remount when nested in conditionals as it causes remap of children keys.\n     * https://react.dev/reference/react/Children#children-toarray-caveats\n     */\n    children = React.Children.toArray<$FlowFixMe>(children);\n\n    if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\n      children = children.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          const StickyHeaderComponent =\n            this.props.StickyHeaderComponent || ScrollViewStickyHeader;\n          return (\n            <StickyHeaderComponent\n              key={key}\n              ref={ref => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={this._headerLayoutYs.get(\n                this._getKeyForIndex(nextIndex, children),\n              )}\n              onLayout={event => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}\n              inverted={this.props.invertStickyHeaders}\n              hiddenOnScroll={this.props.stickyHeaderHiddenOnScroll}\n              scrollViewHeight={this.state.layoutHeight}>\n              {child}\n            </StickyHeaderComponent>\n          );\n        } else {\n          return child;\n        }\n      });\n    }\n    children = (\n      <ScrollViewContext.Provider\n        value={this.props.horizontal === true ? HORIZONTAL : VERTICAL}>\n        {children}\n      </ScrollViewContext.Provider>\n    );\n\n    const hasStickyHeaders =\n      Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\n\n    const contentContainer = (\n      <NativeDirectionalScrollContentView\n        {...contentSizeChangeProps}\n        ref={this._innerView.getForwardingRef(this.props.innerViewRef)}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders\n            ? false\n            : this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </NativeDirectionalScrollContentView>\n    );\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined\n        ? this.props.alwaysBounceHorizontal\n        : this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined\n        ? this.props.alwaysBounceVertical\n        : !this.props.horizontal;\n\n    const baseStyle =\n      this.props.horizontal === true\n        ? styles.baseHorizontal\n        : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: StyleSheet.compose(baseStyle, this.props.style),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this._handleMomentumScrollBegin,\n      onMomentumScrollEnd: this._handleMomentumScrollEnd,\n      onResponderGrant: this._handleResponderGrant,\n      onResponderReject: this._handleResponderReject,\n      onResponderRelease: this._handleResponderRelease,\n      onResponderTerminationRequest: this._handleResponderTerminationRequest,\n      onScrollBeginDrag: this._handleScrollBeginDrag,\n      onScrollEndDrag: this._handleScrollEndDrag,\n      onScrollShouldSetResponder: this._handleScrollShouldSetResponder,\n      onStartShouldSetResponder: this._handleStartShouldSetResponder,\n      onStartShouldSetResponderCapture:\n        this._handleStartShouldSetResponderCapture,\n      onTouchEnd: this._handleTouchEnd,\n      onTouchMove: this._handleTouchMove,\n      onTouchStart: this._handleTouchStart,\n      onTouchCancel: this._handleTouchCancel,\n      onScroll: this._handleScroll,\n      scrollEventThrottle: hasStickyHeaders\n        ? 1\n        : this.props.scrollEventThrottle,\n      sendMomentumEvents:\n        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd\n          ? true\n          : false,\n      // default to true\n      snapToStart: this.props.snapToStart !== false,\n      // default to true\n      snapToEnd: this.props.snapToEnd !== false,\n      // pagingEnabled is overridden by snapToInterval / snapToOffsets\n      pagingEnabled: Platform.select({\n        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work\n        ios:\n          this.props.pagingEnabled === true &&\n          this.props.snapToInterval == null &&\n          this.props.snapToOffsets == null,\n        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work\n        android:\n          this.props.pagingEnabled === true ||\n          this.props.snapToInterval != null ||\n          this.props.snapToOffsets != null,\n      }),\n    };\n\n    const {decelerationRate} = this.props;\n    if (decelerationRate != null) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n    const scrollViewRef = this._scrollView.getForwardingRef(\n      this.props.scrollViewRef,\n    );\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        return (\n          <NativeDirectionalScrollView {...props} ref={scrollViewRef}>\n            {refreshControl}\n            {contentContainer}\n          </NativeDirectionalScrollView>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should split props.style on the inner and outer props\n        // however, the ScrollView still needs the baseStyle to be scrollable\n        // $FlowFixMe[underconstrained-implicit-instantiation]\n        // $FlowFixMe[incompatible-call]\n        const {outer, inner} = splitLayoutProps(flattenStyle(props.style));\n        return React.cloneElement(\n          refreshControl,\n          {style: StyleSheet.compose(baseStyle, outer)},\n          <NativeDirectionalScrollView\n            {...props}\n            style={StyleSheet.compose(baseStyle, inner)}\n            ref={scrollViewRef}>\n            {contentContainer}\n          </NativeDirectionalScrollView>,\n        );\n      }\n    }\n    return (\n      <NativeDirectionalScrollView {...props} ref={scrollViewRef}>\n        {contentContainer}\n      </NativeDirectionalScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\ntype ForwardedRef<T> = {current: null | T, ...} | ((null | T) => mixed);\n\ntype RefForwarder<TNativeInstance, TPublicInstance> = {\n  getForwardingRef: (\n    ?ForwardedRef<TPublicInstance>,\n  ) => (TNativeInstance | null) => void,\n  nativeInstance: TNativeInstance | null,\n  publicInstance: TPublicInstance | null,\n};\n\n/**\n * Helper function that should be replaced with `useCallback` and `useMergeRefs`\n * once `ScrollView` is reimplemented as a functional component.\n */\nfunction createRefForwarder<TNativeInstance, TPublicInstance>(\n  mutator: TNativeInstance => TPublicInstance,\n): RefForwarder<TNativeInstance, TPublicInstance> {\n  const state: RefForwarder<TNativeInstance, TPublicInstance> = {\n    getForwardingRef: memoize(forwardedRef => {\n      return (nativeInstance: TNativeInstance | null): void => {\n        const publicInstance =\n          nativeInstance == null ? null : mutator(nativeInstance);\n\n        state.nativeInstance = nativeInstance;\n        state.publicInstance = publicInstance;\n\n        if (forwardedRef != null) {\n          if (typeof forwardedRef === 'function') {\n            forwardedRef(publicInstance);\n          } else {\n            forwardedRef.current = publicInstance;\n          }\n        }\n      };\n    }),\n    nativeInstance: null,\n    publicInstance: null,\n  };\n\n  return state;\n}\n\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction Wrapper(props, ref: (mixed => mixed) | {current: mixed, ...}) {\n  return <ScrollView {...props} scrollViewRef={ref} />;\n}\nWrapper.displayName = 'ScrollView';\n// $FlowFixMe[incompatible-call]\nconst ForwardedScrollView = React.forwardRef(Wrapper);\n\n// $FlowFixMe[prop-missing] Add static context to ForwardedScrollView\nForwardedScrollView.Context = ScrollViewContext;\n\nForwardedScrollView.displayName = 'ScrollView';\n\nmodule.exports = ((ForwardedScrollView: $FlowFixMe): React.AbstractComponent<\n  React.ElementConfig<typeof ScrollView>,\n  PublicScrollViewInstance,\n> &\n  ScrollViewComponentStatics);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {Double} from '../../Types/CodegenTypes';\n\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport * as React from 'react';\n\ntype ScrollViewNativeComponentType = HostComponent<mixed>;\ninterface NativeCommands {\n  +flashScrollIndicators: (\n    viewRef: React.ElementRef<ScrollViewNativeComponentType>,\n  ) => void;\n  +scrollTo: (\n    viewRef: React.ElementRef<ScrollViewNativeComponentType>,\n    x: Double,\n    y: Double,\n    animated: boolean,\n  ) => void;\n  +scrollToEnd: (\n    viewRef: React.ElementRef<ScrollViewNativeComponentType>,\n    animated: boolean,\n  ) => void;\n  +zoomToRect: (\n    viewRef: React.ElementRef<ScrollViewNativeComponentType>,\n    rect: {|\n      x: Double,\n      y: Double,\n      width: Double,\n      height: Double,\n      animated?: boolean,\n    |},\n    animated?: boolean,\n  ) => void;\n}\n\nexport default (codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'flashScrollIndicators',\n    'scrollTo',\n    'scrollToEnd',\n    'zoomToRect',\n  ],\n}): NativeCommands);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport * as React from 'react';\n\ntype Value = {horizontal: boolean} | null;\n\nconst ScrollViewContext: React.Context<Value> = React.createContext(null);\nif (__DEV__) {\n  ScrollViewContext.displayName = 'ScrollViewContext';\n}\nexport default ScrollViewContext;\n\nexport const HORIZONTAL: Value = Object.freeze({horizontal: true});\nexport const VERTICAL: Value = Object.freeze({horizontal: false});\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {ScrollViewNativeProps as Props} from './ScrollViewNativeComponentType';\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport {ConditionallyIgnoredEventHandlers} from '../../NativeComponent/ViewConfigIgnore';\nimport Platform from '../../Utilities/Platform';\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig =\n  Platform.OS === 'android'\n    ? {\n        uiViewClassName: 'RCTScrollView',\n        bubblingEventTypes: {},\n        directEventTypes: {\n          topMomentumScrollBegin: {\n            registrationName: 'onMomentumScrollBegin',\n          },\n          topMomentumScrollEnd: {\n            registrationName: 'onMomentumScrollEnd',\n          },\n          topScroll: {\n            registrationName: 'onScroll',\n          },\n          topScrollBeginDrag: {\n            registrationName: 'onScrollBeginDrag',\n          },\n          topScrollEndDrag: {\n            registrationName: 'onScrollEndDrag',\n          },\n        },\n        validAttributes: {\n          contentOffset: {\n            diff: require('../../Utilities/differ/pointsDiffer'),\n          },\n          decelerationRate: true,\n          disableIntervalMomentum: true,\n          pagingEnabled: true,\n          scrollEnabled: true,\n          showsVerticalScrollIndicator: true,\n          snapToAlignment: true,\n          snapToEnd: true,\n          snapToInterval: true,\n          snapToOffsets: true,\n          snapToStart: true,\n          borderBottomLeftRadius: true,\n          borderBottomRightRadius: true,\n          sendMomentumEvents: true,\n          borderRadius: true,\n          nestedScrollEnabled: true,\n          borderStyle: true,\n          borderRightColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderBottomColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          persistentScrollbar: true,\n          endFillColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          fadingEdgeLength: true,\n          overScrollMode: true,\n          borderTopLeftRadius: true,\n          scrollPerfTag: true,\n          borderTopColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          removeClippedSubviews: true,\n          borderTopRightRadius: true,\n          borderLeftColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          pointerEvents: true,\n          isInvertedVirtualizedList: true,\n        },\n      }\n    : {\n        uiViewClassName: 'RCTScrollView',\n        bubblingEventTypes: {},\n        directEventTypes: {\n          topMomentumScrollBegin: {\n            registrationName: 'onMomentumScrollBegin',\n          },\n          topMomentumScrollEnd: {\n            registrationName: 'onMomentumScrollEnd',\n          },\n          topScroll: {\n            registrationName: 'onScroll',\n          },\n          topScrollBeginDrag: {\n            registrationName: 'onScrollBeginDrag',\n          },\n          topScrollEndDrag: {\n            registrationName: 'onScrollEndDrag',\n          },\n          topScrollToTop: {\n            registrationName: 'onScrollToTop',\n          },\n        },\n        validAttributes: {\n          alwaysBounceHorizontal: true,\n          alwaysBounceVertical: true,\n          automaticallyAdjustContentInsets: true,\n          automaticallyAdjustKeyboardInsets: true,\n          automaticallyAdjustsScrollIndicatorInsets: true,\n          bounces: true,\n          bouncesZoom: true,\n          canCancelContentTouches: true,\n          centerContent: true,\n          contentInset: {\n            diff: require('../../Utilities/differ/insetsDiffer'),\n          },\n          contentOffset: {\n            diff: require('../../Utilities/differ/pointsDiffer'),\n          },\n          contentInsetAdjustmentBehavior: true,\n          decelerationRate: true,\n          directionalLockEnabled: true,\n          disableIntervalMomentum: true,\n          indicatorStyle: true,\n          inverted: true,\n          keyboardDismissMode: true,\n          maintainVisibleContentPosition: true,\n          maximumZoomScale: true,\n          minimumZoomScale: true,\n          pagingEnabled: true,\n          pinchGestureEnabled: true,\n          scrollEnabled: true,\n          scrollEventThrottle: true,\n          scrollIndicatorInsets: {\n            diff: require('../../Utilities/differ/insetsDiffer'),\n          },\n          scrollToOverflowEnabled: true,\n          scrollsToTop: true,\n          showsHorizontalScrollIndicator: true,\n          showsVerticalScrollIndicator: true,\n          snapToAlignment: true,\n          snapToEnd: true,\n          snapToInterval: true,\n          snapToOffsets: true,\n          snapToStart: true,\n          zoomScale: true,\n          ...ConditionallyIgnoredEventHandlers({\n            onScrollBeginDrag: true,\n            onMomentumScrollEnd: true,\n            onScrollEndDrag: true,\n            onMomentumScrollBegin: true,\n            onScrollToTop: true,\n            onScroll: true,\n          }),\n        },\n      };\n\nconst ScrollViewNativeComponent: HostComponent<Props> =\n  NativeComponentRegistry.get<Props>(\n    'RCTScrollView',\n    () => __INTERNAL_VIEW_CONFIG,\n  );\n\nexport default ScrollViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {LayoutEvent} from '../../Types/CoreEventTypes';\n\nimport Animated from '../../Animated/Animated';\nimport {isPublicInstance as isFabricPublicInstance} from '../../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport useMergeRefs from '../../Utilities/useMergeRefs';\nimport * as React from 'react';\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react';\n\nexport type Props = $ReadOnly<{\n  children?: React.Element<$FlowFixMe>,\n  nextHeaderLayoutY: ?number,\n  onLayout: (event: LayoutEvent) => void,\n  scrollAnimatedValue: Animated.Value,\n  // Will cause sticky headers to stick at the bottom of the ScrollView instead\n  // of the top.\n  inverted: ?boolean,\n  // The height of the parent ScrollView. Currently only set when inverted.\n  scrollViewHeight: ?number,\n  nativeID?: ?string,\n  hiddenOnScroll?: ?boolean,\n}>;\n\ntype Instance = {\n  ...React.ElementRef<typeof Animated.View>,\n  setNextHeaderY: number => void,\n  ...\n};\n\nconst ScrollViewStickyHeaderWithForwardedRef: React.AbstractComponent<\n  Props,\n  Instance,\n> = React.forwardRef(function ScrollViewStickyHeader(props, forwardedRef) {\n  const {\n    inverted,\n    scrollViewHeight,\n    hiddenOnScroll,\n    scrollAnimatedValue,\n    nextHeaderLayoutY: _nextHeaderLayoutY,\n  } = props;\n\n  const [measured, setMeasured] = useState<boolean>(false);\n  const [layoutY, setLayoutY] = useState<number>(0);\n  const [layoutHeight, setLayoutHeight] = useState<number>(0);\n  const [translateY, setTranslateY] = useState<?number>(null);\n  const [nextHeaderLayoutY, setNextHeaderLayoutY] =\n    useState<?number>(_nextHeaderLayoutY);\n  const [isFabric, setIsFabric] = useState<boolean>(false);\n\n  const callbackRef = useCallback((ref: Instance | null): void => {\n    if (ref == null) {\n      return;\n    }\n    ref.setNextHeaderY = setNextHeaderLayoutY;\n    setIsFabric(isFabricPublicInstance(ref));\n  }, []);\n  const ref: (React.ElementRef<typeof Animated.View> | null) => void =\n    // $FlowFixMe[incompatible-type] - Ref is mutated by `callbackRef`.\n    useMergeRefs<Instance>(callbackRef, forwardedRef);\n\n  const offset = useMemo(\n    () =>\n      hiddenOnScroll === true\n        ? Animated.diffClamp(\n            scrollAnimatedValue\n              .interpolate({\n                extrapolateLeft: 'clamp',\n                inputRange: [layoutY, layoutY + 1],\n                outputRange: ([0, 1]: Array<number>),\n              })\n              .interpolate({\n                inputRange: [0, 1],\n                outputRange: ([0, -1]: Array<number>),\n              }),\n            -layoutHeight,\n            0,\n          )\n        : null,\n    [scrollAnimatedValue, layoutHeight, layoutY, hiddenOnScroll],\n  );\n\n  const [animatedTranslateY, setAnimatedTranslateY] = useState<Animated.Node>(\n    () => {\n      const inputRange: Array<number> = [-1, 0];\n      const outputRange: Array<number> = [0, 0];\n      const initialTranslateY = scrollAnimatedValue.interpolate({\n        inputRange,\n        outputRange,\n      });\n\n      if (offset != null) {\n        return Animated.add(initialTranslateY, offset);\n      }\n      return initialTranslateY;\n    },\n  );\n\n  const haveReceivedInitialZeroTranslateY = useRef<boolean>(true);\n  const translateYDebounceTimer = useRef<?TimeoutID>(null);\n\n  useEffect(() => {\n    if (translateY !== 0 && translateY != null) {\n      haveReceivedInitialZeroTranslateY.current = false;\n    }\n  }, [translateY]);\n\n  // This is called whenever the (Interpolated) Animated Value\n  // updates, which is several times per frame during scrolling.\n  // To ensure that the Fabric ShadowTree has the most recent\n  // translate style of this node, we debounce the value and then\n  // pass it through to the underlying node during render.\n  // This is:\n  // 1. Only an issue in Fabric.\n  // 2. Worse in Android than iOS. In Android, but not iOS, you\n  //    can touch and move your finger slightly and still trigger\n  //    a \"tap\" event. In iOS, moving will cancel the tap in\n  //    both Fabric and non-Fabric. On Android when you move\n  //    your finger, the hit-detection moves from the Android\n  //    platform to JS, so we need the ShadowTree to have knowledge\n  //    of the current position.\n  const animatedValueListener = useCallback(({value}: $FlowFixMe) => {\n    const debounceTimeout: number = Platform.OS === 'android' ? 15 : 64;\n    // When the AnimatedInterpolation is recreated, it always initializes\n    // to a value of zero and emits a value change of 0 to its listeners.\n    if (value === 0 && !haveReceivedInitialZeroTranslateY.current) {\n      haveReceivedInitialZeroTranslateY.current = true;\n      return;\n    }\n    if (translateYDebounceTimer.current != null) {\n      clearTimeout(translateYDebounceTimer.current);\n    }\n    translateYDebounceTimer.current = setTimeout(\n      () => setTranslateY(value),\n      debounceTimeout,\n    );\n  }, []);\n\n  useEffect(() => {\n    const inputRange: Array<number> = [-1, 0];\n    const outputRange: Array<number> = [0, 0];\n\n    if (measured) {\n      if (inverted === true) {\n        // The interpolation looks like:\n        // - Negative scroll: no translation\n        // - `stickStartPoint` is the point at which the header will start sticking.\n        //   It is calculated using the ScrollView viewport height so it is a the bottom.\n        // - Headers that are in the initial viewport will never stick, `stickStartPoint`\n        //   will be negative.\n        // - From 0 to `stickStartPoint` no translation. This will cause the header\n        //   to scroll normally until it reaches the top of the scroll view.\n        // - From `stickStartPoint` to when the next header y hits the bottom edge of the header: translate\n        //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n        // - Past the collision with the next header y: no more translation. This will cause the\n        //   header to continue scrolling up and make room for the next sticky header.\n        //   In the case that there is no next header just translate equally to\n        //   scroll indefinitely.\n        if (scrollViewHeight != null) {\n          const stickStartPoint = layoutY + layoutHeight - scrollViewHeight;\n          if (stickStartPoint > 0) {\n            inputRange.push(stickStartPoint);\n            outputRange.push(0);\n            inputRange.push(stickStartPoint + 1);\n            outputRange.push(1);\n            // If the next sticky header has not loaded yet (probably windowing) or is the last\n            // we can just keep it sticked forever.\n            const collisionPoint =\n              (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;\n            if (collisionPoint > stickStartPoint) {\n              inputRange.push(collisionPoint, collisionPoint + 1);\n              outputRange.push(\n                collisionPoint - stickStartPoint,\n                collisionPoint - stickStartPoint,\n              );\n            }\n          }\n        }\n      } else {\n        // The interpolation looks like:\n        // - Negative scroll: no translation\n        // - From 0 to the y of the header: no translation. This will cause the header\n        //   to scroll normally until it reaches the top of the scroll view.\n        // - From header y to when the next header y hits the bottom edge of the header: translate\n        //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n        // - Past the collision with the next header y: no more translation. This will cause the\n        //   header to continue scrolling up and make room for the next sticky header.\n        //   In the case that there is no next header just translate equally to\n        //   scroll indefinitely.\n        inputRange.push(layoutY);\n        outputRange.push(0);\n        // If the next sticky header has not loaded yet (probably windowing) or is the last\n        // we can just keep it sticked forever.\n        const collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;\n        if (collisionPoint >= layoutY) {\n          inputRange.push(collisionPoint, collisionPoint + 1);\n          outputRange.push(collisionPoint - layoutY, collisionPoint - layoutY);\n        } else {\n          inputRange.push(layoutY + 1);\n          outputRange.push(1);\n        }\n      }\n    }\n\n    let newAnimatedTranslateY: Animated.Node = scrollAnimatedValue.interpolate({\n      inputRange,\n      outputRange,\n    });\n\n    if (offset != null) {\n      newAnimatedTranslateY = Animated.add(newAnimatedTranslateY, offset);\n    }\n\n    // add the event listener\n    let animatedListenerId;\n    if (isFabric) {\n      animatedListenerId = newAnimatedTranslateY.addListener(\n        animatedValueListener,\n      );\n    }\n\n    setAnimatedTranslateY(newAnimatedTranslateY);\n\n    // clean up the event listener and timer\n    return () => {\n      if (animatedListenerId) {\n        newAnimatedTranslateY.removeListener(animatedListenerId);\n      }\n      if (translateYDebounceTimer.current != null) {\n        clearTimeout(translateYDebounceTimer.current);\n      }\n    };\n  }, [\n    nextHeaderLayoutY,\n    measured,\n    layoutHeight,\n    layoutY,\n    scrollViewHeight,\n    scrollAnimatedValue,\n    inverted,\n    offset,\n    animatedValueListener,\n    isFabric,\n  ]);\n\n  const _onLayout = (event: LayoutEvent) => {\n    setLayoutY(event.nativeEvent.layout.y);\n    setLayoutHeight(event.nativeEvent.layout.height);\n    setMeasured(true);\n\n    props.onLayout(event);\n    const child = React.Children.only<$FlowFixMe>(props.children);\n    if (child.props.onLayout) {\n      child.props.onLayout(event);\n    }\n  };\n\n  const child = React.Children.only<$FlowFixMe>(props.children);\n\n  return (\n    <Animated.View\n      collapsable={false}\n      nativeID={props.nativeID}\n      onLayout={_onLayout}\n      ref={ref}\n      style={[\n        child.props.style,\n        styles.header,\n        {transform: [{translateY: animatedTranslateY}]},\n      ]}>\n      {React.cloneElement(child, {\n        style: styles.fill, // We transfer the child style to the wrapper.\n        onLayout: undefined, // we call this manually through our this._onLayout\n      })}\n    </Animated.View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  header: {\n    zIndex: 10,\n    position: 'relative',\n  },\n  fill: {\n    flex: 1,\n  },\n});\n\nexport default ScrollViewStickyHeaderWithForwardedRef;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport Platform from '../../Utilities/Platform';\n\nfunction processDecelerationRate(\n  decelerationRate: number | 'normal' | 'fast',\n): number {\n  if (decelerationRate === 'normal') {\n    return Platform.select({\n      ios: 0.998,\n      android: 0.985,\n    });\n  } else if (decelerationRate === 'fast') {\n    return Platform.select({\n      ios: 0.99,\n      android: 0.9,\n    });\n  }\n  return decelerationRate;\n}\n\nmodule.exports = processDecelerationRate;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeSoundManager';\nimport NativeSoundManager from '../../../src/private/specs/modules/NativeSoundManager';\nexport default NativeSoundManager;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport NativeSoundManager from './NativeSoundManager';\n\nconst SoundManager = {\n  playTouchSound: function (): void {\n    if (NativeSoundManager) {\n      NativeSoundManager.playTouchSound();\n    }\n  },\n};\n\nmodule.exports = SoundManager;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerAndroid from '../../../src/private/specs/modules/NativeStatusBarManagerAndroid';\nexport default NativeStatusBarManagerAndroid;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeStatusBarManagerIOS';\nimport NativeStatusBarManagerIOS from '../../../src/private/specs/modules/NativeStatusBarManagerIOS';\nexport default NativeStatusBarManagerIOS;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\n\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport NativeStatusBarManagerAndroid from './NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerIOS from './NativeStatusBarManagerIOS';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n  ...\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n  ...\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?ColorValue,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide' | 'none'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce(\n    (prev, cur) => {\n      for (const prop in cur) {\n        if (cur[prop] != null) {\n          prev[prop] = cur[prop];\n        }\n      }\n      return prev;\n    },\n    {...defaultValues},\n  );\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  const animated = props.animated ?? false;\n  const showHideTransition = props.showHideTransition ?? 'fade';\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated,\n            transition: showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack: Array<any> = [];\n\n  static _defaultProps: any = createStackEntry({\n    backgroundColor:\n      Platform.OS === 'android'\n        ? NativeStatusBarManagerAndroid.getConstants()\n            .DEFAULT_BACKGROUND_COLOR ?? 'black'\n        : 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  // $FlowFixMe[missing-local-annot]\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  // $FlowFixMe[missing-local-annot]\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: ?number =\n    Platform.OS === 'android'\n      ? NativeStatusBarManagerAndroid.getConstants().HEIGHT\n      : null;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean): void {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n    invariant(\n      typeof processedColor === 'number',\n      'Unexpected color given for StatusBar.setBackgroundColor',\n    );\n\n    NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManagerAndroid.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManagerIOS.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerIOS.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        //todo(T60684787): Add back optimization to only update bar style and\n        //background color if the new value is different from the old value.\n        NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n        const processedColor = processColor(mergedProps.backgroundColor.value);\n        if (processedColor == null) {\n          console.warn(\n            `\\`StatusBar._updatePropsStack\\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`,\n          );\n        } else {\n          invariant(\n            typeof processedColor === 'number',\n            'Unexpected color given in StatusBar._updatePropsStack',\n          );\n          NativeStatusBarManagerAndroid.setColor(\n            processedColor,\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n        }\n        // Activities are not translucent by default, so always set if true.\n        if (\n          !oldProps ||\n          oldProps.translucent !== mergedProps.translucent ||\n          mergedProps.translucent\n        ) {\n          NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/AndroidSwitchNativeComponent';\nimport AndroidSwitchNativeComponent from '../../../src/private/specs/components/AndroidSwitchNativeComponent';\nexport default AndroidSwitchNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport useMergeRefs from '../../Utilities/useMergeRefs';\nimport AndroidSwitchNativeComponent, {\n  Commands as AndroidSwitchCommands,\n} from './AndroidSwitchNativeComponent';\nimport SwitchNativeComponent, {\n  Commands as SwitchCommands,\n} from './SwitchNativeComponent';\nimport * as React from 'react';\n\ntype SwitchChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    value: boolean,\n    target: number,\n  |}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n    If true the user won't be able to toggle the switch.\n\n    @default false\n   */\n  disabled?: ?boolean,\n\n  /**\n    The value of the switch. If true the switch will be turned on.\n\n    @default false\n   */\n  value?: ?boolean,\n\n  /**\n    Color of the foreground switch grip. If this is set on iOS, the switch grip will lose its drop shadow.\n   */\n  thumbColor?: ?ColorValue,\n\n  /**\n    Custom colors for the switch track.\n\n    _iOS_: When the switch value is false, the track shrinks into the border. If you want to change the\n    color of the background exposed by the shrunken track, use\n     [`ios_backgroundColor`](https://reactnative.dev/docs/switch#ios_backgroundColor).\n   */\n  trackColor?: ?$ReadOnly<{|\n    false?: ?ColorValue,\n    true?: ?ColorValue,\n  |}>,\n\n  /**\n    On iOS, custom color for the background. This background color can be\n    seen either when the switch value is false or when the switch is\n    disabled (and the switch is translucent).\n   */\n  ios_backgroundColor?: ?ColorValue,\n\n  /**\n    Invoked when the user tries to change the value of the switch. Receives\n    the change event as an argument. If you want to only receive the new\n    value, use `onValueChange` instead.\n   */\n  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,\n\n  /**\n    Invoked when the user tries to change the value of the switch. Receives\n    the new value as an argument. If you want to instead receive an event,\n    use `onChange`.\n   */\n  onValueChange?: ?(value: boolean) => Promise<void> | void,\n|}>;\nconst returnsFalse = () => false;\nconst returnsTrue = () => true;\n\n/**\n  Renders a boolean input.\n\n  This is a controlled component that requires an `onValueChange`\n  callback that updates the `value` prop in order for the component to\n  reflect user actions. If the `value` prop is not updated, the\n  component will continue to render the supplied `value` prop instead of\n  the expected result of any user actions.\n\n  ```SnackPlayer name=Switch\n  import React, { useState } from \"react\";\n  import { View, Switch, StyleSheet } from \"react-native\";\n\n  const App = () => {\n    const [isEnabled, setIsEnabled] = useState(false);\n    const toggleSwitch = () => setIsEnabled(previousState => !previousState);\n\n    return (\n      <View style={styles.container}>\n        <Switch\n          trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\n          thumbColor={isEnabled ? \"#f5dd4b\" : \"#f4f3f4\"}\n          ios_backgroundColor=\"#3e3e3e\"\n          onValueChange={toggleSwitch}\n          value={isEnabled}\n        />\n      </View>\n    );\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }\n  });\n\n  export default App;\n  ```\n */\n\nconst SwitchWithForwardedRef: React.AbstractComponent<\n  Props,\n  React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  >,\n> = React.forwardRef(function Switch(props, forwardedRef): React.Node {\n  const {\n    disabled,\n    ios_backgroundColor,\n    onChange,\n    onValueChange,\n    style,\n    thumbColor,\n    trackColor,\n    value,\n    ...restProps\n  } = props;\n  const trackColorForFalse = trackColor?.false;\n  const trackColorForTrue = trackColor?.true;\n\n  const nativeSwitchRef = React.useRef<React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  > | null>(null);\n\n  const ref = useMergeRefs(nativeSwitchRef, forwardedRef);\n\n  const [native, setNative] = React.useState({value: (null: ?boolean)});\n\n  const handleChange = (event: SwitchChangeEvent) => {\n    // $FlowFixMe[unused-promise]\n    onChange?.(event);\n    // $FlowFixMe[unused-promise]\n    onValueChange?.(event.nativeEvent.value);\n    setNative({value: event.nativeEvent.value});\n  };\n\n  React.useLayoutEffect(() => {\n    // This is necessary in case native updates the switch and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const jsValue = value === true;\n    const shouldUpdateNativeSwitch =\n      native.value != null && native.value !== jsValue;\n    if (\n      shouldUpdateNativeSwitch &&\n      nativeSwitchRef.current?.setNativeProps != null\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwitchCommands.setNativeValue(nativeSwitchRef.current, jsValue);\n      } else {\n        SwitchCommands.setValue(nativeSwitchRef.current, jsValue);\n      }\n    }\n  }, [value, native]);\n\n  if (Platform.OS === 'android') {\n    const {accessibilityState} = restProps;\n    const _disabled =\n      disabled != null ? disabled : accessibilityState?.disabled;\n\n    const _accessibilityState =\n      _disabled !== accessibilityState?.disabled\n        ? {...accessibilityState, disabled: _disabled}\n        : accessibilityState;\n\n    const platformProps = {\n      accessibilityState: _accessibilityState,\n      enabled: _disabled !== true,\n      on: value === true,\n      style,\n      thumbTintColor: thumbColor,\n      trackColorForFalse: trackColorForFalse,\n      trackColorForTrue: trackColorForTrue,\n      trackTintColor: value === true ? trackColorForTrue : trackColorForFalse,\n    };\n\n    return (\n      <AndroidSwitchNativeComponent\n        {...restProps}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={ref}\n      />\n    );\n  } else {\n    const platformProps = {\n      disabled,\n      onTintColor: trackColorForTrue,\n      style: StyleSheet.compose(\n        {height: 31, width: 51},\n        StyleSheet.compose(\n          style,\n          ios_backgroundColor == null\n            ? null\n            : {\n                backgroundColor: ios_backgroundColor,\n                borderRadius: 16,\n              },\n        ),\n      ),\n      thumbTintColor: thumbColor,\n      tintColor: trackColorForFalse,\n      value: value === true,\n    };\n\n    return (\n      <SwitchNativeComponent\n        {...restProps}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={ref}\n      />\n    );\n  }\n});\n\nexport default SwitchWithForwardedRef;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/SwitchNativeComponent';\nimport SwitchNativeComponent from '../../../src/private/specs/components/SwitchNativeComponent';\nexport default SwitchNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {\n  ColorValue,\n  TextStyleProp,\n  ViewStyleProp,\n} from '../../StyleSheet/StyleSheet';\nimport type {\n  BubblingEventHandler,\n  DirectEventHandler,\n  Double,\n  Float,\n  Int32,\n  WithDefault,\n} from '../../Types/CodegenTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {TextInputNativeCommands} from './TextInputNativeCommands';\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  | 'url'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type SubmitBehavior = 'submit' | 'blurAndSubmit' | 'newline';\n\nexport type NativeProps = $ReadOnly<{|\n  // This allows us to inherit everything from ViewProps except for style (see below)\n  // This must be commented for Fabric codegen to work.\n  ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,\n\n  /**\n   * Android props after this\n   */\n  /**\n   * Specifies autocomplete hints for the system, so it can provide autofill. On Android, the system will always attempt to offer autofill by using heuristics to identify the type of content.\n   * To disable autocomplete, set `autoComplete` to `off`.\n   *\n   * *Android Only*\n   *\n   * Possible values for `autoComplete` are:\n   *\n   * - `birthdate-day`\n   * - `birthdate-full`\n   * - `birthdate-month`\n   * - `birthdate-year`\n   * - `cc-csc`\n   * - `cc-exp`\n   * - `cc-exp-day`\n   * - `cc-exp-month`\n   * - `cc-exp-year`\n   * - `cc-number`\n   * - `email`\n   * - `gender`\n   * - `name`\n   * - `name-family`\n   * - `name-given`\n   * - `name-middle`\n   * - `name-middle-initial`\n   * - `name-prefix`\n   * - `name-suffix`\n   * - `password`\n   * - `password-new`\n   * - `postal-address`\n   * - `postal-address-country`\n   * - `postal-address-extended`\n   * - `postal-address-extended-postal-code`\n   * - `postal-address-locality`\n   * - `postal-address-region`\n   * - `postal-code`\n   * - `street-address`\n   * - `sms-otp`\n   * - `tel`\n   * - `tel-country-code`\n   * - `tel-national`\n   * - `tel-device`\n   * - `username`\n   * - `username-new`\n   * - `off`\n   *\n   * @platform android\n   */\n  autoComplete?: WithDefault<\n    | 'birthdate-day'\n    | 'birthdate-full'\n    | 'birthdate-month'\n    | 'birthdate-year'\n    | 'cc-csc'\n    | 'cc-exp'\n    | 'cc-exp-day'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-number'\n    | 'email'\n    | 'gender'\n    | 'name'\n    | 'name-family'\n    | 'name-given'\n    | 'name-middle'\n    | 'name-middle-initial'\n    | 'name-prefix'\n    | 'name-suffix'\n    | 'password'\n    | 'password-new'\n    | 'postal-address'\n    | 'postal-address-country'\n    | 'postal-address-extended'\n    | 'postal-address-extended-postal-code'\n    | 'postal-address-locality'\n    | 'postal-address-region'\n    | 'postal-code'\n    | 'street-address'\n    | 'sms-otp'\n    | 'tel'\n    | 'tel-country-code'\n    | 'tel-national'\n    | 'tel-device'\n    | 'username'\n    | 'username-new'\n    | 'off',\n    'off',\n  >,\n\n  /**\n   * Sets the return key to the label. Use it instead of `returnKeyType`.\n   * @platform android\n   */\n  returnKeyLabel?: ?string,\n\n  /**\n   * Sets the number of lines for a `TextInput`. Use it with multiline set to\n   * `true` to be able to fill the lines.\n   * @platform android\n   */\n  numberOfLines?: ?Int32,\n\n  /**\n   * When `false`, if there is a small amount of space available around a text input\n   * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n   * the text inside of a full screen text input mode. When `true`, this feature is\n   * disabled and users will always edit the text directly inside of the text input.\n   * Defaults to `false`.\n   * @platform android\n   */\n  disableFullscreenUI?: ?boolean,\n\n  /**\n   * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n   * The default value is `simple`.\n   * @platform android\n   */\n  textBreakStrategy?: WithDefault<\n    'simple' | 'highQuality' | 'balanced',\n    'simple',\n  >,\n\n  /**\n   * The color of the `TextInput` underline.\n   * @platform android\n   */\n  underlineColorAndroid?: ?ColorValue,\n\n  /**\n   * If defined, the provided image resource will be rendered on the left.\n   * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n   * like\n   * ```\n   * <TextInput\n   *  inlineImageLeft='search_icon'\n   * />\n   * ```\n   * @platform android\n   */\n  inlineImageLeft?: ?string,\n\n  /**\n   * Padding between the inline image, if any, and the text input itself.\n   * @platform android\n   */\n  inlineImagePadding?: ?Int32,\n\n  importantForAutofill?: string /*?(\n    | 'auto'\n    | 'no'\n    | 'noExcludeDescendants'\n    | 'yes'\n    | 'yesExcludeDescendants'\n  ),*/,\n\n  /**\n   * When `false`, it will prevent the soft keyboard from showing when the field is focused.\n   * Defaults to `true`.\n   */\n  showSoftInputOnFocus?: ?boolean,\n\n  /**\n   * TextInput props after this\n   */\n  /**\n   * Can tell `TextInput` to automatically capitalize certain characters.\n   *\n   * - `characters`: all characters.\n   * - `words`: first letter of each word.\n   * - `sentences`: first letter of each sentence (*default*).\n   * - `none`: don't auto capitalize anything.\n   */\n  autoCapitalize?: WithDefault<\n    'none' | 'sentences' | 'words' | 'characters',\n    'none',\n  >,\n\n  /**\n   * If `false`, disables auto-correct. The default value is `true`.\n   */\n  autoCorrect?: ?boolean,\n\n  /**\n   * If `true`, focuses the input on `componentDidMount`.\n   * The default value is `false`.\n   */\n  autoFocus?: ?boolean,\n\n  /**\n   * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n   * default is `true`.\n   */\n  allowFontScaling?: ?boolean,\n\n  /**\n   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\n   * Possible values:\n   * `null/undefined` (default): inherit from the parent node or the global default (0)\n   * `0`: no max, ignore parent/global default\n   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\n   */\n  maxFontSizeMultiplier?: ?Float,\n\n  /**\n   * If `false`, text is not editable. The default value is `true`.\n   */\n  editable?: ?boolean,\n\n  /**\n   * Determines which keyboard to open, e.g.`numeric`.\n   *\n   * The following values work across platforms:\n   *\n   * - `default`\n   * - `numeric`\n   * - `number-pad`\n   * - `decimal-pad`\n   * - `email-address`\n   * - `phone-pad`\n   * - `url`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `visible-password`\n   */\n  keyboardType?: WithDefault<KeyboardType, 'default'>,\n\n  /**\n   * Determines how the return key should look. On Android you can also use\n   * `returnKeyLabel`.\n   *\n   * *Cross platform*\n   *\n   * The following values work across platforms:\n   *\n   * - `done`\n   * - `go`\n   * - `next`\n   * - `search`\n   * - `send`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `none`\n   * - `previous`\n   */\n  returnKeyType?: WithDefault<ReturnKeyType, 'done'>,\n\n  /**\n   * Limits the maximum number of characters that can be entered. Use this\n   * instead of implementing the logic in JS to avoid flicker.\n   */\n  maxLength?: ?Int32,\n\n  /**\n   * If `true`, the text input can be multiple lines.\n   * The default value is `false`.\n   */\n  multiline?: ?boolean,\n\n  /**\n   * Callback that is called when the text input is blurred.\n   * `target` is the reactTag of the element\n   */\n  onBlur?: ?BubblingEventHandler<$ReadOnly<{|target: Int32|}>>,\n\n  /**\n   * Callback that is called when the text input is focused.\n   * `target` is the reactTag of the element\n   */\n  onFocus?: ?BubblingEventHandler<$ReadOnly<{|target: Int32|}>>,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   * `target` is the reactTag of the element\n   * TODO: differentiate between onChange and onChangeText\n   */\n  onChange?: ?BubblingEventHandler<\n    $ReadOnly<{|target: Int32, eventCount: Int32, text: string|}>,\n  >,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   * Changed text is passed as an argument to the callback handler.\n   * TODO: differentiate between onChange and onChangeText\n   */\n  onChangeText?: ?BubblingEventHandler<\n    $ReadOnly<{|target: Int32, eventCount: Int32, text: string|}>,\n  >,\n\n  /**\n   * Callback that is called when the text input's content size changes.\n   * This will be called with\n   * `{ nativeEvent: { contentSize: { width, height } } }`.\n   *\n   * Only called for multiline text inputs.\n   */\n  onContentSizeChange?: ?DirectEventHandler<\n    $ReadOnly<{|\n      target: Int32,\n      contentSize: $ReadOnly<{|width: Double, height: Double|}>,\n    |}>,\n  >,\n\n  onTextInput?: ?BubblingEventHandler<\n    $ReadOnly<{|\n      target: Int32,\n      text: string,\n      previousText: string,\n      range: $ReadOnly<{|start: Double, end: Double|}>,\n    |}>,\n  >,\n\n  /**\n   * Callback that is called when text input ends.\n   */\n  onEndEditing?: ?BubblingEventHandler<\n    $ReadOnly<{|target: Int32, text: string|}>,\n  >,\n\n  /**\n   * Callback that is called when the text input selection is changed.\n   * This will be called with\n   * `{ nativeEvent: { selection: { start, end } } }`.\n   */\n  onSelectionChange?: ?DirectEventHandler<\n    $ReadOnly<{|\n      target: Int32,\n      selection: $ReadOnly<{|start: Double, end: Double|}>,\n    |}>,\n  >,\n\n  /**\n   * Callback that is called when the text input's submit button is pressed.\n   * Invalid if `multiline={true}` is specified.\n   */\n  onSubmitEditing?: ?BubblingEventHandler<\n    $ReadOnly<{|target: Int32, text: string|}>,\n  >,\n\n  /**\n   * Callback that is called when a key is pressed.\n   * This will be called with `{ nativeEvent: { key: keyValue } }`\n   * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n   * the typed-in character otherwise including `' '` for space.\n   * Fires before `onChange` callbacks.\n   */\n  onKeyPress?: ?BubblingEventHandler<$ReadOnly<{|target: Int32, key: string|}>>,\n\n  /**\n   * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n   * May also contain other properties from ScrollEvent but on Android contentSize\n   * is not provided for performance reasons.\n   */\n  onScroll?: ?DirectEventHandler<\n    $ReadOnly<{|\n      target: Int32,\n      responderIgnoreScroll: boolean,\n      contentInset: $ReadOnly<{|\n        top: Double, // always 0 on Android\n        bottom: Double, // always 0 on Android\n        left: Double, // always 0 on Android\n        right: Double, // always 0 on Android\n      |}>,\n      contentOffset: $ReadOnly<{|\n        x: Double,\n        y: Double,\n      |}>,\n      contentSize: $ReadOnly<{|\n        width: Double, // always 0 on Android\n        height: Double, // always 0 on Android\n      |}>,\n      layoutMeasurement: $ReadOnly<{|\n        width: Double,\n        height: Double,\n      |}>,\n      velocity: $ReadOnly<{|\n        x: Double, // always 0 on Android\n        y: Double, // always 0 on Android\n      |}>,\n    |}>,\n  >,\n\n  /**\n   * The string that will be rendered before text input has been entered.\n   */\n  placeholder?: ?Stringish,\n\n  /**\n   * The text color of the placeholder string.\n   */\n  placeholderTextColor?: ?ColorValue,\n\n  /**\n   * If `true`, the text input obscures the text entered so that sensitive text\n   * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n   */\n  secureTextEntry?: ?boolean,\n\n  /**\n   * The highlight and cursor color of the text input.\n   */\n  selectionColor?: ?ColorValue,\n\n  /**\n   * The text selection handle color.\n   */\n  selectionHandleColor?: ?ColorValue,\n\n  /**\n   * The start and end of the text input's selection. Set start and end to\n   * the same value to position the cursor.\n   */\n  selection?: ?$ReadOnly<{|\n    start: Int32,\n    end?: ?Int32,\n  |}>,\n\n  /**\n   * The value to show for the text input. `TextInput` is a controlled\n   * component, which means the native value will be forced to match this\n   * value prop if provided. For most uses, this works great, but in some\n   * cases this may cause flickering - one common cause is preventing edits\n   * by keeping value the same. In addition to simply setting the same value,\n   * either set `editable={false}`, or set/update `maxLength` to prevent\n   * unwanted edits without flicker.\n   */\n  value?: ?string,\n\n  /**\n   * Provides an initial value that will change when the user starts typing.\n   * Useful for simple use-cases where you do not want to deal with listening\n   * to events and updating the value prop to keep the controlled state in sync.\n   */\n  defaultValue?: ?string,\n\n  /**\n   * If `true`, all text will automatically be selected on focus.\n   */\n  selectTextOnFocus?: ?boolean,\n\n  /**\n   * If `true`, the text field will blur when submitted.\n   * The default value is true for single-line fields and false for\n   * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n   * to `true` means that pressing return will blur the field and trigger the\n   * `onSubmitEditing` event instead of inserting a newline into the field.\n   *\n   * @deprecated\n   * Note that `submitBehavior` now takes the place of `blurOnSubmit` and will\n   * override any behavior defined by `blurOnSubmit`.\n   * @see submitBehavior\n   */\n  blurOnSubmit?: ?boolean,\n\n  /**\n   * When the return key is pressed,\n   *\n   * For single line inputs:\n   *\n   * - `'newline`' defaults to `'blurAndSubmit'`\n   * - `undefined` defaults to `'blurAndSubmit'`\n   *\n   * For multiline inputs:\n   *\n   * - `'newline'` adds a newline\n   * - `undefined` defaults to `'newline'`\n   *\n   * For both single line and multiline inputs:\n   *\n   * - `'submit'` will only send a submit event and not blur the input\n   * - `'blurAndSubmit`' will both blur the input and send a submit event\n   */\n  submitBehavior?: ?SubmitBehavior,\n\n  /**\n   * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n   *\n   * - `borderLeftWidth`\n   * - `borderTopWidth`\n   * - `borderRightWidth`\n   * - `borderBottomWidth`\n   * - `borderTopLeftRadius`\n   * - `borderTopRightRadius`\n   * - `borderBottomRightRadius`\n   * - `borderBottomLeftRadius`\n   *\n   * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n   * for more detail.\n   *\n   * [Styles](docs/style.html)\n   */\n  // TODO: figure out what to do with this style prop for codegen/Fabric purposes\n  // This must be commented for Fabric codegen to work; it's currently not possible\n  // to override the default View style prop in codegen.\n  style?: ?TextStyleProp,\n\n  /**\n   * If `true`, caret is hidden. The default value is `false`.\n   * This property is supported only for single-line TextInput component on iOS.\n   */\n  caretHidden?: ?boolean,\n\n  /*\n   * If `true`, contextMenuHidden is hidden. The default value is `false`.\n   */\n  contextMenuHidden?: ?boolean,\n\n  /**\n   * The following are props that `BaseTextShadowNode` takes. It is unclear if they\n   * are used by TextInput.\n   */\n  textShadowColor?: ?ColorValue,\n  textShadowRadius?: ?Float,\n  textDecorationLine?: ?string,\n  fontStyle?: ?string,\n  textShadowOffset?: ?$ReadOnly<{|width?: ?Double, height?: ?Double|}>,\n  lineHeight?: ?Float,\n  textTransform?: ?string,\n  color?: ?Int32,\n  letterSpacing?: ?Float,\n  fontSize?: ?Float,\n  textAlign?: ?string,\n  includeFontPadding?: ?boolean,\n  fontWeight?: ?string,\n  fontFamily?: ?string,\n\n  /**\n   * I cannot find where these are defined but JS complains without them.\n   */\n  textAlignVertical?: ?string,\n  cursorColor?: ?ColorValue,\n\n  /**\n   * \"Private\" fields used by TextInput.js and not users of this component directly\n   */\n  mostRecentEventCount: Int32,\n  text?: ?string,\n|}>;\n\ntype NativeType = HostComponent<NativeProps>;\n\ntype NativeCommands = TextInputNativeCommands<NativeType>;\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection'],\n});\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {\n  uiViewClassName: 'AndroidTextInput',\n  bubblingEventTypes: {\n    topBlur: {\n      phasedRegistrationNames: {\n        bubbled: 'onBlur',\n        captured: 'onBlurCapture',\n      },\n    },\n    topEndEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onEndEditing',\n        captured: 'onEndEditingCapture',\n      },\n    },\n    topFocus: {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture',\n      },\n    },\n    topKeyPress: {\n      phasedRegistrationNames: {\n        bubbled: 'onKeyPress',\n        captured: 'onKeyPressCapture',\n      },\n    },\n    topSubmitEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onSubmitEditing',\n        captured: 'onSubmitEditingCapture',\n      },\n    },\n    topTextInput: {\n      phasedRegistrationNames: {\n        bubbled: 'onTextInput',\n        captured: 'onTextInputCapture',\n      },\n    },\n  },\n  directEventTypes: {\n    topScroll: {\n      registrationName: 'onScroll',\n    },\n  },\n  validAttributes: {\n    maxFontSizeMultiplier: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    autoFocus: true,\n    placeholder: true,\n    inlineImagePadding: true,\n    contextMenuHidden: true,\n    textShadowColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    maxLength: true,\n    selectTextOnFocus: true,\n    textShadowRadius: true,\n    underlineColorAndroid: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    textDecorationLine: true,\n    submitBehavior: true,\n    textAlignVertical: true,\n    fontStyle: true,\n    textShadowOffset: true,\n    selectionColor: {process: require('../../StyleSheet/processColor').default},\n    selectionHandleColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    placeholderTextColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    importantForAutofill: true,\n    lineHeight: true,\n    textTransform: true,\n    returnKeyType: true,\n    keyboardType: true,\n    multiline: true,\n    color: {process: require('../../StyleSheet/processColor').default},\n    autoComplete: true,\n    numberOfLines: true,\n    letterSpacing: true,\n    returnKeyLabel: true,\n    fontSize: true,\n    onKeyPress: true,\n    cursorColor: {process: require('../../StyleSheet/processColor').default},\n    text: true,\n    showSoftInputOnFocus: true,\n    textAlign: true,\n    autoCapitalize: true,\n    autoCorrect: true,\n    caretHidden: true,\n    secureTextEntry: true,\n    textBreakStrategy: true,\n    onScroll: true,\n    onContentSizeChange: true,\n    disableFullscreenUI: true,\n    includeFontPadding: true,\n    fontWeight: true,\n    fontFamily: true,\n    allowFontScaling: true,\n    onSelectionChange: true,\n    mostRecentEventCount: true,\n    inlineImageLeft: true,\n    editable: true,\n    fontVariant: true,\n    borderBottomRightRadius: true,\n    borderBottomColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    borderRadius: true,\n    borderRightColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    borderColor: {process: require('../../StyleSheet/processColor').default},\n    borderTopRightRadius: true,\n    borderStyle: true,\n    borderBottomLeftRadius: true,\n    borderLeftColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    borderTopLeftRadius: true,\n    borderTopColor: {process: require('../../StyleSheet/processColor').default},\n  },\n};\n\nlet AndroidTextInputNativeComponent = NativeComponentRegistry.get<NativeProps>(\n  'AndroidTextInput',\n  () => __INTERNAL_VIEW_CONFIG,\n);\n\n// flowlint-next-line unclear-type:off\nexport default ((AndroidTextInputNativeComponent: any): HostComponent<NativeProps>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport StyleSheet, {\n  type ColorValue,\n  type ViewStyleProp,\n} from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport RCTInputAccessoryViewNativeComponent from './RCTInputAccessoryViewNativeComponent';\nimport * as React from 'react';\n\n/**\n * Note: iOS only\n *\n * A component which enables customization of the keyboard input accessory view.\n * The input accessory view is displayed above the keyboard whenever a TextInput\n * has focus. This component can be used to create custom toolbars.\n *\n * To use this component wrap your custom toolbar with the\n * InputAccessoryView component, and set a nativeID. Then, pass that nativeID\n * as the inputAccessoryViewID of whatever TextInput you desire. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {text: 'Placeholder Text'};\n *   }\n *\n *   render() {\n *     const inputAccessoryViewID = \"uniqueID\";\n *     return (\n *       <View>\n *         <ScrollView keyboardDismissMode=\"interactive\">\n *           <TextInput\n *             style={{\n *               padding: 10,\n *               paddingTop: 50,\n *             }}\n *             inputAccessoryViewID=inputAccessoryViewID\n *             onChangeText={text => this.setState({text})}\n *             value={this.state.text}\n *           />\n *         </ScrollView>\n *         <InputAccessoryView nativeID=inputAccessoryViewID>\n *           <Button\n *             onPress={() => this.setState({text: 'Placeholder Text'})}\n *             title=\"Reset Text\"\n *           />\n *         </InputAccessoryView>\n *       </View>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * This component can also be used to create sticky text inputs (text inputs\n * which are anchored to the top of the keyboard). To do this, wrap a\n * TextInput with the InputAccessoryView component, and don't set a nativeID.\n * For an example, look at InputAccessoryViewExample.js in RNTester.\n */\n\ntype Props = $ReadOnly<{|\n  +children: React.Node,\n  /**\n   * An ID which is used to associate this `InputAccessoryView` to\n   * specified TextInput(s).\n   */\n  nativeID?: ?string,\n  style?: ?ViewStyleProp,\n  backgroundColor?: ?ColorValue,\n|}>;\n\nconst InputAccessoryView: React.AbstractComponent<Props> = (props: Props) => {\n  if (Platform.OS === 'ios') {\n    if (React.Children.count(props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <RCTInputAccessoryViewNativeComponent\n        style={[props.style, styles.container]}\n        nativeID={props.nativeID}\n        backgroundColor={props.backgroundColor}>\n        {props.children}\n      </RCTInputAccessoryViewNativeComponent>\n    );\n  } else {\n    console.warn('<InputAccessoryView> is only supported on iOS.');\n    return null;\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n  },\n});\n\nexport default InputAccessoryView;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nexport * from '../../../src/private/specs/components/RCTInputAccessoryViewNativeComponent';\nimport RCTInputAccessoryViewNativeComponent from '../../../src/private/specs/components/RCTInputAccessoryViewNativeComponent';\nexport default RCTInputAccessoryViewNativeComponent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {TextInputNativeCommands} from './TextInputNativeCommands';\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport RCTTextInputViewConfig from './RCTTextInputViewConfig';\n\ntype NativeType = HostComponent<mixed>;\n\ntype NativeCommands = TextInputNativeCommands<NativeType>;\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection'],\n});\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {\n  uiViewClassName: 'RCTMultilineTextInputView',\n  ...RCTTextInputViewConfig,\n  validAttributes: {\n    ...RCTTextInputViewConfig.validAttributes,\n    dataDetectorTypes: true,\n  },\n};\n\nconst MultilineTextInputNativeComponent: HostComponent<mixed> =\n  NativeComponentRegistry.get<mixed>(\n    'RCTMultilineTextInputView',\n    () => __INTERNAL_VIEW_CONFIG,\n  );\n\n// flowlint-next-line unclear-type:off\nexport default ((MultilineTextInputNativeComponent: any): HostComponent<mixed>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {TextInputNativeCommands} from './TextInputNativeCommands';\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport RCTTextInputViewConfig from './RCTTextInputViewConfig';\n\ntype NativeType = HostComponent<mixed>;\n\ntype NativeCommands = TextInputNativeCommands<NativeType>;\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection'],\n});\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {\n  uiViewClassName: 'RCTSinglelineTextInputView',\n  ...RCTTextInputViewConfig,\n};\n\nconst SinglelineTextInputNativeComponent: HostComponent<mixed> =\n  NativeComponentRegistry.get<mixed>(\n    'RCTSinglelineTextInputView',\n    () => __INTERNAL_VIEW_CONFIG,\n  );\n\n// flowlint-next-line unclear-type:off\nexport default ((SinglelineTextInputNativeComponent: any): HostComponent<mixed>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PartialViewConfig} from '../../Renderer/shims/ReactNativeTypes';\n\nimport {ConditionallyIgnoredEventHandlers} from '../../NativeComponent/ViewConfigIgnore';\n\ntype PartialViewConfigWithoutName = $Rest<\n  PartialViewConfig,\n  {uiViewClassName: string},\n>;\n\nconst RCTTextInputViewConfig = {\n  bubblingEventTypes: {\n    topBlur: {\n      phasedRegistrationNames: {\n        bubbled: 'onBlur',\n        captured: 'onBlurCapture',\n      },\n    },\n    topChange: {\n      phasedRegistrationNames: {\n        bubbled: 'onChange',\n        captured: 'onChangeCapture',\n      },\n    },\n    topEndEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onEndEditing',\n        captured: 'onEndEditingCapture',\n      },\n    },\n    topFocus: {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture',\n      },\n    },\n    topKeyPress: {\n      phasedRegistrationNames: {\n        bubbled: 'onKeyPress',\n        captured: 'onKeyPressCapture',\n      },\n    },\n    topSubmitEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onSubmitEditing',\n        captured: 'onSubmitEditingCapture',\n      },\n    },\n    topTouchCancel: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchCancel',\n        captured: 'onTouchCancelCapture',\n      },\n    },\n    topTouchEnd: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchEnd',\n        captured: 'onTouchEndCapture',\n      },\n    },\n\n    topTouchMove: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchMove',\n        captured: 'onTouchMoveCapture',\n      },\n    },\n  },\n  directEventTypes: {\n    topTextInput: {\n      registrationName: 'onTextInput',\n    },\n    topKeyPressSync: {\n      registrationName: 'onKeyPressSync',\n    },\n    topScroll: {\n      registrationName: 'onScroll',\n    },\n    topSelectionChange: {\n      registrationName: 'onSelectionChange',\n    },\n    topChangeSync: {\n      registrationName: 'onChangeSync',\n    },\n    topContentSizeChange: {\n      registrationName: 'onContentSizeChange',\n    },\n  },\n  validAttributes: {\n    fontSize: true,\n    fontWeight: true,\n    fontVariant: true,\n    // flowlint-next-line untyped-import:off\n    textShadowOffset: {diff: require('../../Utilities/differ/sizesDiffer')},\n    allowFontScaling: true,\n    fontStyle: true,\n    textTransform: true,\n    textAlign: true,\n    fontFamily: true,\n    lineHeight: true,\n    isHighlighted: true,\n    writingDirection: true,\n    textDecorationLine: true,\n    textShadowRadius: true,\n    letterSpacing: true,\n    textDecorationStyle: true,\n    textDecorationColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    color: {process: require('../../StyleSheet/processColor').default},\n    maxFontSizeMultiplier: true,\n    textShadowColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    editable: true,\n    inputAccessoryViewID: true,\n    caretHidden: true,\n    enablesReturnKeyAutomatically: true,\n    placeholderTextColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    clearButtonMode: true,\n    keyboardType: true,\n    selection: true,\n    returnKeyType: true,\n    submitBehavior: true,\n    mostRecentEventCount: true,\n    scrollEnabled: true,\n    selectionColor: {process: require('../../StyleSheet/processColor').default},\n    contextMenuHidden: true,\n    secureTextEntry: true,\n    placeholder: true,\n    autoCorrect: true,\n    multiline: true,\n    textContentType: true,\n    maxLength: true,\n    autoCapitalize: true,\n    keyboardAppearance: true,\n    passwordRules: true,\n    spellCheck: true,\n    selectTextOnFocus: true,\n    text: true,\n    clearTextOnFocus: true,\n    showSoftInputOnFocus: true,\n    autoFocus: true,\n    lineBreakStrategyIOS: true,\n    smartInsertDelete: true,\n    ...ConditionallyIgnoredEventHandlers({\n      onChange: true,\n      onSelectionChange: true,\n      onContentSizeChange: true,\n      onScroll: true,\n      onChangeSync: true,\n      onKeyPressSync: true,\n      onTextInput: true,\n    }),\n  },\n};\n\nmodule.exports = (RCTTextInputViewConfig: PartialViewConfigWithoutName);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {\n  PressEvent,\n  ScrollEvent,\n  SyntheticEvent,\n} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {TextInputType} from './TextInput.flow';\n\nimport usePressability from '../../Pressability/usePressability';\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport StyleSheet, {\n  type ColorValue,\n  type TextStyleProp,\n  type ViewStyleProp,\n} from '../../StyleSheet/StyleSheet';\nimport Text from '../../Text/Text';\nimport TextAncestor from '../../Text/TextAncestor';\nimport Platform from '../../Utilities/Platform';\nimport useMergeRefs from '../../Utilities/useMergeRefs';\nimport TextInputState from './TextInputState';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\nimport {useCallback, useLayoutEffect, useRef, useState} from 'react';\n\ntype ReactRefSetter<T> = {current: null | T, ...} | ((ref: null | T) => mixed);\ntype TextInputInstance = React.ElementRef<HostComponent<mixed>> & {\n  +clear: () => void,\n  +isFocused: () => boolean,\n  +getNativeRef: () => ?React.ElementRef<HostComponent<mixed>>,\n  +setSelection: (start: number, end: number) => void,\n};\n\nlet AndroidTextInput;\nlet AndroidTextInputCommands;\nlet RCTSinglelineTextInputView;\nlet RCTSinglelineTextInputNativeCommands;\nlet RCTMultilineTextInputView;\nlet RCTMultilineTextInputNativeCommands;\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = require('./AndroidTextInputNativeComponent').default;\n  AndroidTextInputCommands =\n    require('./AndroidTextInputNativeComponent').Commands;\n} else if (Platform.OS === 'ios') {\n  RCTSinglelineTextInputView =\n    require('./RCTSingelineTextInputNativeComponent').default;\n  RCTSinglelineTextInputNativeCommands =\n    require('./RCTSingelineTextInputNativeComponent').Commands;\n  RCTMultilineTextInputView =\n    require('./RCTMultilineTextInputNativeComponent').default;\n  RCTMultilineTextInputNativeCommands =\n    require('./RCTMultilineTextInputNativeComponent').Commands;\n}\n\nexport type ChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    target: number,\n    text: string,\n  |}>,\n>;\n\nexport type TextInputEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    previousText: string,\n    range: $ReadOnly<{|\n      start: number,\n      end: number,\n    |}>,\n    target: number,\n    text: string,\n  |}>,\n>;\n\nexport type ContentSizeChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n    contentSize: $ReadOnly<{|\n      width: number,\n      height: number,\n    |}>,\n  |}>,\n>;\n\ntype TargetEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n  |}>,\n>;\n\nexport type BlurEvent = TargetEvent;\nexport type FocusEvent = TargetEvent;\n\ntype Selection = $ReadOnly<{|\n  start: number,\n  end: number,\n|}>;\n\nexport type SelectionChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    selection: Selection,\n    target: number,\n  |}>,\n>;\n\nexport type KeyPressEvent = SyntheticEvent<\n  $ReadOnly<{|\n    key: string,\n    target?: ?number,\n    eventCount?: ?number,\n  |}>,\n>;\n\nexport type EditingEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    text: string,\n    target: number,\n  |}>,\n>;\n\ntype DataDetectorTypesType =\n  | 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'trackingNumber'\n  | 'flightNumber'\n  | 'lookupSuggestion'\n  | 'none'\n  | 'all';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  | 'url'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // iOS 10+ only\n  | 'ascii-capable-number-pad'\n  // Android-only\n  | 'visible-password';\n\nexport type InputMode =\n  | 'none'\n  | 'text'\n  | 'decimal'\n  | 'numeric'\n  | 'tel'\n  | 'search'\n  | 'email'\n  | 'url';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type SubmitBehavior = 'submit' | 'blurAndSubmit' | 'newline';\n\nexport type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';\n\nexport type TextContentType =\n  | 'none'\n  | 'URL'\n  | 'addressCity'\n  | 'addressCityAndState'\n  | 'addressState'\n  | 'countryName'\n  | 'creditCardNumber'\n  | 'creditCardExpiration'\n  | 'creditCardExpirationMonth'\n  | 'creditCardExpirationYear'\n  | 'creditCardSecurityCode'\n  | 'creditCardType'\n  | 'creditCardName'\n  | 'creditCardGivenName'\n  | 'creditCardMiddleName'\n  | 'creditCardFamilyName'\n  | 'emailAddress'\n  | 'familyName'\n  | 'fullStreetAddress'\n  | 'givenName'\n  | 'jobTitle'\n  | 'location'\n  | 'middleName'\n  | 'name'\n  | 'namePrefix'\n  | 'nameSuffix'\n  | 'nickname'\n  | 'organizationName'\n  | 'postalCode'\n  | 'streetAddressLine1'\n  | 'streetAddressLine2'\n  | 'sublocality'\n  | 'telephoneNumber'\n  | 'username'\n  | 'password'\n  | 'newPassword'\n  | 'oneTimeCode'\n  | 'birthdate'\n  | 'birthdateDay'\n  | 'birthdateMonth'\n  | 'birthdateYear';\n\nexport type enterKeyHintType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'previous'\n  // iOS-only\n  | 'enter';\n\ntype PasswordRules = string;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * When the clear button should appear on the right side of the text view.\n   * This property is supported only for single-line TextInput component.\n   * @platform ios\n   */\n  clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),\n\n  /**\n   * If `true`, clears the text field automatically when editing begins.\n   * @platform ios\n   */\n  clearTextOnFocus?: ?boolean,\n\n  /**\n   * Determines the types of data converted to clickable URLs in the text input.\n   * Only valid if `multiline={true}` and `editable={false}`.\n   * By default no data types are detected.\n   *\n   * You can provide one type or an array of many types.\n   *\n   * Possible values for `dataDetectorTypes` are:\n   *\n   * - `'phoneNumber'`\n   * - `'link'`\n   * - `'address'`\n   * - `'calendarEvent'`\n   * - `'none'`\n   * - `'all'`\n   *\n   * @platform ios\n   */\n  dataDetectorTypes?:\n    | ?DataDetectorTypesType\n    | $ReadOnlyArray<DataDetectorTypesType>,\n\n  /**\n   * If `true`, the keyboard disables the return key when there is no text and\n   * automatically enables it when there is text. The default value is `false`.\n   * @platform ios\n   */\n  enablesReturnKeyAutomatically?: ?boolean,\n\n  /**\n   * An optional identifier which links a custom InputAccessoryView to\n   * this text input. The InputAccessoryView is rendered above the\n   * keyboard when this text input is focused.\n   * @platform ios\n   */\n  inputAccessoryViewID?: ?string,\n\n  /**\n   * Determines the color of the keyboard.\n   * @platform ios\n   */\n  keyboardAppearance?: ?('default' | 'light' | 'dark'),\n\n  /**\n   * Provide rules for your password.\n   * For example, say you want to require a password with at least eight characters consisting of a mix of uppercase and lowercase letters, at least one number, and at most two consecutive characters.\n   * \"required: upper; required: lower; required: digit; max-consecutive: 2; minlength: 8;\"\n   * @platform ios\n   */\n  passwordRules?: ?PasswordRules,\n\n  /*\n   * If `true`, allows TextInput to pass touch events to the parent component.\n   * This allows components to be swipeable from the TextInput on iOS,\n   * as is the case on Android by default.\n   * If `false`, TextInput always asks to handle the input (except when disabled).\n   * @platform ios\n   */\n  rejectResponderTermination?: ?boolean,\n\n  /**\n   * If `false`, scrolling of the text view will be disabled.\n   * The default value is `true`. Does only work with 'multiline={true}'.\n   * @platform ios\n   */\n  scrollEnabled?: ?boolean,\n\n  /**\n   * If `false`, disables spell-check style (i.e. red underlines).\n   * The default value is inherited from `autoCorrect`.\n   * @platform ios\n   */\n  spellCheck?: ?boolean,\n\n  /**\n   * Give the keyboard and the system information about the\n   * expected semantic meaning for the content that users enter.\n   * `autoComplete` property accomplishes same behavior and is recommended as its supported by both platforms.\n   * Avoid using both `autoComplete` and `textContentType`, you can use `Platform.select` for differing platform behaviors.\n   * For backwards compatibility, when both set, `textContentType` takes precedence on iOS.\n   * @platform ios\n   */\n  textContentType?: ?TextContentType,\n\n  /**\n   * Set line break strategy on iOS.\n   * @platform ios\n   */\n  lineBreakStrategyIOS?: ?('none' | 'standard' | 'hangul-word' | 'push-out'),\n\n  /**\n   * If `false`, the iOS system will not insert an extra space after a paste operation\n   * neither delete one or two spaces after a cut or delete operation.\n   *\n   * The default value is `true`.\n   *\n   * @platform ios\n   */\n  smartInsertDelete?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * When provided it will set the color of the cursor (or \"caret\") in the component.\n   * Unlike the behavior of `selectionColor` the cursor color will be set independently\n   * from the color of the text selection box.\n   * @platform android\n   */\n  cursorColor?: ?ColorValue,\n\n  /**\n   * When `false`, if there is a small amount of space available around a text input\n   * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n   * the text inside of a full screen text input mode. When `true`, this feature is\n   * disabled and users will always edit the text directly inside of the text input.\n   * Defaults to `false`.\n   * @platform android\n   */\n  disableFullscreenUI?: ?boolean,\n\n  importantForAutofill?: ?(\n    | 'auto'\n    | 'no'\n    | 'noExcludeDescendants'\n    | 'yes'\n    | 'yesExcludeDescendants'\n  ),\n\n  /**\n   * If defined, the provided image resource will be rendered on the left.\n   * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n   * like\n   * ```\n   * <TextInput\n   *  inlineImageLeft='search_icon'\n   * />\n   * ```\n   * @platform android\n   */\n  inlineImageLeft?: ?string,\n\n  /**\n   * Padding between the inline image, if any, and the text input itself.\n   * @platform android\n   */\n  inlineImagePadding?: ?number,\n\n  /**\n   * Sets the number of lines for a `TextInput`. Use it with multiline set to\n   * `true` to be able to fill the lines.\n   * @platform android\n   */\n  numberOfLines?: ?number,\n\n  /**\n   * Sets the return key to the label. Use it instead of `returnKeyType`.\n   * @platform android\n   */\n  returnKeyLabel?: ?string,\n\n  /**\n   * Sets the number of rows for a `TextInput`. Use it with multiline set to\n   * `true` to be able to fill the lines.\n   * @platform android\n   */\n  rows?: ?number,\n\n  /**\n   * When `false`, it will prevent the soft keyboard from showing when the field is focused.\n   * Defaults to `true`.\n   */\n  showSoftInputOnFocus?: ?boolean,\n\n  /**\n   * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n   * The default value is `simple`.\n   * @platform android\n   */\n  textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),\n\n  /**\n   * The color of the `TextInput` underline.\n   * @platform android\n   */\n  underlineColorAndroid?: ?ColorValue,\n|}>;\n\nexport type Props = $ReadOnly<{|\n  ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Can tell `TextInput` to automatically capitalize certain characters.\n   *\n   * - `characters`: all characters.\n   * - `words`: first letter of each word.\n   * - `sentences`: first letter of each sentence (*default*).\n   * - `none`: don't auto capitalize anything.\n   */\n  autoCapitalize?: ?AutoCapitalize,\n\n  /**\n   * Specifies autocomplete hints for the system, so it can provide autofill.\n   * On Android, the system will always attempt to offer autofill by using heuristics to identify the type of content.\n   * To disable autocomplete, set autoComplete to off.\n   *\n   * The following values work across platforms:\n   *\n   * - `additional-name`\n   * - `address-line1`\n   * - `address-line2`\n   * - `birthdate-day` (iOS 17+)\n   * - `birthdate-full` (iOS 17+)\n   * - `birthdate-month` (iOS 17+)\n   * - `birthdate-year` (iOS 17+)\n   * - `cc-number`\n   * - `cc-csc` (iOS 17+)\n   * - `cc-exp` (iOS 17+)\n   * - `cc-exp-day` (iOS 17+)\n   * - `cc-exp-month` (iOS 17+)\n   * - `cc-exp-year` (iOS 17+)\n   * - `country`\n   * - `current-password`\n   * - `email`\n   * - `family-name`\n   * - `given-name`\n   * - `honorific-prefix`\n   * - `honorific-suffix`\n   * - `name`\n   * - `new-password`\n   * - `off`\n   * - `one-time-code`\n   * - `postal-code`\n   * - `street-address`\n   * - `tel`\n   * - `username`\n   *\n   * The following values work on iOS only:\n   *\n   * - `cc-name` (iOS 17+)\n   * - `cc-given-name` (iOS 17+)\n   * - `cc-middle-name` (iOS 17+)\n   * - `cc-family-name` (iOS 17+)\n   * - `cc-type` (iOS 17+)\n   * - `nickname`\n   * - `organization`\n   * - `organization-title`\n   * - `url`\n   *\n   * The following values work on Android only:\n   *\n   * - `gender`\n   * - `name-family`\n   * - `name-given`\n   * - `name-middle`\n   * - `name-middle-initial`\n   * - `name-prefix`\n   * - `name-suffix`\n   * - `password`\n   * - `password-new`\n   * - `postal-address`\n   * - `postal-address-country`\n   * - `postal-address-extended`\n   * - `postal-address-extended-postal-code`\n   * - `postal-address-locality`\n   * - `postal-address-region`\n   * - `sms-otp`\n   * - `tel-country-code`\n   * - `tel-national`\n   * - `tel-device`\n   * - `username-new`\n   */\n  autoComplete?: ?(\n    | 'additional-name'\n    | 'address-line1'\n    | 'address-line2'\n    | 'birthdate-day'\n    | 'birthdate-full'\n    | 'birthdate-month'\n    | 'birthdate-year'\n    | 'cc-csc'\n    | 'cc-exp'\n    | 'cc-exp-day'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-number'\n    | 'cc-name'\n    | 'cc-given-name'\n    | 'cc-middle-name'\n    | 'cc-family-name'\n    | 'cc-type'\n    | 'country'\n    | 'current-password'\n    | 'email'\n    | 'family-name'\n    | 'gender'\n    | 'given-name'\n    | 'honorific-prefix'\n    | 'honorific-suffix'\n    | 'name'\n    | 'name-family'\n    | 'name-given'\n    | 'name-middle'\n    | 'name-middle-initial'\n    | 'name-prefix'\n    | 'name-suffix'\n    | 'new-password'\n    | 'nickname'\n    | 'one-time-code'\n    | 'organization'\n    | 'organization-title'\n    | 'password'\n    | 'password-new'\n    | 'postal-address'\n    | 'postal-address-country'\n    | 'postal-address-extended'\n    | 'postal-address-extended-postal-code'\n    | 'postal-address-locality'\n    | 'postal-address-region'\n    | 'postal-code'\n    | 'street-address'\n    | 'sms-otp'\n    | 'tel'\n    | 'tel-country-code'\n    | 'tel-national'\n    | 'tel-device'\n    | 'url'\n    | 'username'\n    | 'username-new'\n    | 'off'\n  ),\n\n  /**\n   * If `false`, disables auto-correct. The default value is `true`.\n   */\n  autoCorrect?: ?boolean,\n\n  /**\n   * If `true`, focuses the input on `componentDidMount`.\n   * The default value is `false`.\n   */\n  autoFocus?: ?boolean,\n\n  /**\n   * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n   * default is `true`.\n   */\n  allowFontScaling?: ?boolean,\n\n  /**\n   * If `true`, caret is hidden. The default value is `false`.\n   *\n   * On Android devices manufactured by Xiaomi with Android Q,\n   * when keyboardType equals 'email-address'this will be set\n   * in native to 'true' to prevent a system related crash. This\n   * will cause cursor to be disabled as a side-effect.\n   *\n   */\n  caretHidden?: ?boolean,\n\n  /*\n   * If `true`, contextMenuHidden is hidden. The default value is `false`.\n   */\n  contextMenuHidden?: ?boolean,\n\n  /**\n   * Provides an initial value that will change when the user starts typing.\n   * Useful for simple use-cases where you do not want to deal with listening\n   * to events and updating the value prop to keep the controlled state in sync.\n   */\n  defaultValue?: ?Stringish,\n\n  /**\n   * If `false`, text is not editable. The default value is `true`.\n   */\n  editable?: ?boolean,\n\n  forwardedRef?: ?ReactRefSetter<TextInputInstance>,\n\n  /**\n   * `enterKeyHint` defines what action label (or icon) to present for the enter key on virtual keyboards.\n   *\n   * The following values is supported:\n   *\n   * - `enter`\n   * - `done`\n   * - `go`\n   * - `next`\n   * - `previous`\n   * - `search`\n   * - `send`\n   */\n  enterKeyHint?: ?enterKeyHintType,\n\n  /**\n   * `inputMode` works like the `inputmode` attribute in HTML, it determines which\n   * keyboard to open, e.g.`numeric` and has precedence over keyboardType\n   *\n   * Support the following values:\n   *\n   * - `none`\n   * - `text`\n   * - `decimal`\n   * - `numeric`\n   * - `tel`\n   * - `search`\n   * - `email`\n   * - `url`\n   */\n  inputMode?: ?InputMode,\n\n  /**\n   * Determines which keyboard to open, e.g.`numeric`.\n   *\n   * The following values work across platforms:\n   *\n   * - `default`\n   * - `numeric`\n   * - `number-pad`\n   * - `decimal-pad`\n   * - `email-address`\n   * - `phone-pad`\n   * - `url`\n   *\n   * *iOS Only*\n   *\n   * The following values work on iOS only:\n   *\n   * - `ascii-capable`\n   * - `numbers-and-punctuation`\n   * - `name-phone-pad`\n   * - `twitter`\n   * - `web-search`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `visible-password`\n   *\n   */\n  keyboardType?: ?KeyboardType,\n\n  /**\n   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\n   * Possible values:\n   * `null/undefined` (default): inherit from the parent node or the global default (0)\n   * `0`: no max, ignore parent/global default\n   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\n   */\n  maxFontSizeMultiplier?: ?number,\n\n  /**\n   * Limits the maximum number of characters that can be entered. Use this\n   * instead of implementing the logic in JS to avoid flicker.\n   */\n  maxLength?: ?number,\n\n  /**\n   * If `true`, the text input can be multiple lines.\n   * The default value is `false`.\n   */\n  multiline?: ?boolean,\n\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: ?(e: BlurEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChange?: ?(e: ChangeEvent) => mixed,\n\n  /**\n   * DANGER: this API is not stable and will change in the future.\n   *\n   * Callback will be called on the main thread and may result in dropped frames.\n   * Callback that is called when the text input's text changes.\n   *\n   * @platform ios\n   */\n  unstable_onChangeSync?: ?(e: ChangeEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   * Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: ?(text: string) => mixed,\n\n  /**\n   * DANGER: this API is not stable and will change in the future.\n   *\n   * Callback will be called on the main thread and may result in dropped frames.\n   * Callback that is called when the text input's text changes.\n   * Changed text is passed as an argument to the callback handler.\n   *\n   * @platform ios\n   */\n  unstable_onChangeTextSync?: ?(text: string) => mixed,\n\n  /**\n   * Callback that is called when the text input's content size changes.\n   * This will be called with\n   * `{ nativeEvent: { contentSize: { width, height } } }`.\n   *\n   * Only called for multiline text inputs.\n   */\n  onContentSizeChange?: ?(e: ContentSizeChangeEvent) => mixed,\n\n  /**\n   * Callback that is called when text input ends.\n   */\n  onEndEditing?: ?(e: EditingEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: ?(e: FocusEvent) => mixed,\n\n  /**\n   * Callback that is called when a key is pressed.\n   * This will be called with `{ nativeEvent: { key: keyValue } }`\n   * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n   * the typed-in character otherwise including `' '` for space.\n   * Fires before `onChange` callbacks.\n   */\n  onKeyPress?: ?(e: KeyPressEvent) => mixed,\n\n  /**\n   * DANGER: this API is not stable and will change in the future.\n   *\n   * Callback will be called on the main thread and may result in dropped frames.\n   *\n   * Callback that is called when a key is pressed.\n   * This will be called with `{ nativeEvent: { key: keyValue } }`\n   * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n   * the typed-in character otherwise including `' '` for space.\n   * Fires before `onChange` callbacks.\n   *\n   * @platform ios\n   */\n  unstable_onKeyPressSync?: ?(e: KeyPressEvent) => mixed,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is engaged.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is released.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input selection is changed.\n   * This will be called with\n   * `{ nativeEvent: { selection: { start, end } } }`.\n   */\n  onSelectionChange?: ?(e: SelectionChangeEvent) => mixed,\n\n  /**\n   * Callback that is called when the text input's submit button is pressed.\n   * Invalid if `multiline={true}` is specified.\n   */\n  onSubmitEditing?: ?(e: EditingEvent) => mixed,\n\n  /**\n   * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n   * May also contain other properties from ScrollEvent but on Android contentSize\n   * is not provided for performance reasons.\n   */\n  onScroll?: ?(e: ScrollEvent) => mixed,\n\n  /**\n   * The string that will be rendered before text input has been entered.\n   */\n  placeholder?: ?Stringish,\n\n  /**\n   * The text color of the placeholder string.\n   */\n  placeholderTextColor?: ?ColorValue,\n\n  /** `readOnly` works like the `readonly` attribute in HTML.\n   *  If `true`, text is not editable. The default value is `false`.\n   *  See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly\n   *  for more details.\n   */\n  readOnly?: ?boolean,\n\n  /**\n   * Determines how the return key should look. On Android you can also use\n   * `returnKeyLabel`.\n   *\n   * *Cross platform*\n   *\n   * The following values work across platforms:\n   *\n   * - `done`\n   * - `go`\n   * - `next`\n   * - `search`\n   * - `send`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `none`\n   * - `previous`\n   *\n   * *iOS Only*\n   *\n   * The following values work on iOS only:\n   *\n   * - `default`\n   * - `emergency-call`\n   * - `google`\n   * - `join`\n   * - `route`\n   * - `yahoo`\n   */\n  returnKeyType?: ?ReturnKeyType,\n\n  /**\n   * If `true`, the text input obscures the text entered so that sensitive text\n   * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n   */\n  secureTextEntry?: ?boolean,\n\n  /**\n   * The start and end of the text input's selection. Set start and end to\n   * the same value to position the cursor.\n   */\n  selection?: ?$ReadOnly<{|\n    start: number,\n    end?: ?number,\n  |}>,\n\n  /**\n   * The highlight and cursor color of the text input.\n   */\n  selectionColor?: ?ColorValue,\n\n  /**\n   * The text selection handle color.\n   * @platform android\n   */\n  selectionHandleColor?: ?ColorValue,\n\n  /**\n   * If `true`, all text will automatically be selected on focus.\n   */\n  selectTextOnFocus?: ?boolean,\n\n  /**\n   * If `true`, the text field will blur when submitted.\n   * The default value is true for single-line fields and false for\n   * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n   * to `true` means that pressing return will blur the field and trigger the\n   * `onSubmitEditing` event instead of inserting a newline into the field.\n   *\n   * @deprecated\n   * Note that `submitBehavior` now takes the place of `blurOnSubmit` and will\n   * override any behavior defined by `blurOnSubmit`.\n   * @see submitBehavior\n   */\n  blurOnSubmit?: ?boolean,\n\n  /**\n   * When the return key is pressed,\n   *\n   * For single line inputs:\n   *\n   * - `'newline`' defaults to `'blurAndSubmit'`\n   * - `undefined` defaults to `'blurAndSubmit'`\n   *\n   * For multiline inputs:\n   *\n   * - `'newline'` adds a newline\n   * - `undefined` defaults to `'newline'`\n   *\n   * For both single line and multiline inputs:\n   *\n   * - `'submit'` will only send a submit event and not blur the input\n   * - `'blurAndSubmit`' will both blur the input and send a submit event\n   */\n  submitBehavior?: ?SubmitBehavior,\n\n  /**\n   * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n   *\n   * - `borderLeftWidth`\n   * - `borderTopWidth`\n   * - `borderRightWidth`\n   * - `borderBottomWidth`\n   * - `borderTopLeftRadius`\n   * - `borderTopRightRadius`\n   * - `borderBottomRightRadius`\n   * - `borderBottomLeftRadius`\n   *\n   * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n   * for more detail.\n   *\n   * [Styles](docs/style.html)\n   */\n  style?: ?TextStyleProp,\n\n  /**\n   * The value to show for the text input. `TextInput` is a controlled\n   * component, which means the native value will be forced to match this\n   * value prop if provided. For most uses, this works great, but in some\n   * cases this may cause flickering - one common cause is preventing edits\n   * by keeping value the same. In addition to simply setting the same value,\n   * either set `editable={false}`, or set/update `maxLength` to prevent\n   * unwanted edits without flicker.\n   */\n  value?: ?Stringish,\n|}>;\n\nconst emptyFunctionThatReturnsTrue = () => true;\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable={true}\n *         maxLength={40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline={true}\n *          numberOfLines={4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\nfunction InternalTextInput(props: Props): React.Node {\n  const {\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-selected': ariaSelected,\n    accessibilityState,\n    id,\n    tabIndex,\n    selection: propsSelection,\n    selectionColor,\n    selectionHandleColor,\n    cursorColor,\n    ...otherProps\n  } = props;\n\n  const inputRef = useRef<null | React.ElementRef<HostComponent<mixed>>>(null);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const selection: ?Selection =\n    propsSelection == null\n      ? null\n      : {\n          start: propsSelection.start,\n          end: propsSelection.end ?? propsSelection.start,\n        };\n\n  const [mostRecentEventCount, setMostRecentEventCount] = useState<number>(0);\n  const [lastNativeText, setLastNativeText] = useState<?Stringish>(props.value);\n  const [lastNativeSelectionState, setLastNativeSelection] = useState<{|\n    selection: Selection,\n    mostRecentEventCount: number,\n  |}>({\n    selection: {start: -1, end: -1},\n    mostRecentEventCount: mostRecentEventCount,\n  });\n\n  const lastNativeSelection = lastNativeSelectionState.selection;\n\n  let viewCommands;\n  if (AndroidTextInputCommands) {\n    viewCommands = AndroidTextInputCommands;\n  } else {\n    viewCommands =\n      props.multiline === true\n        ? RCTMultilineTextInputNativeCommands\n        : RCTSinglelineTextInputNativeCommands;\n  }\n\n  const text =\n    typeof props.value === 'string'\n      ? props.value\n      : typeof props.defaultValue === 'string'\n      ? props.defaultValue\n      : '';\n\n  // This is necessary in case native updates the text and JS decides\n  // that the update should be ignored and we should stick with the value\n  // that we have in JS.\n  useLayoutEffect(() => {\n    const nativeUpdate: {text?: string, selection?: Selection} = {};\n\n    if (lastNativeText !== props.value && typeof props.value === 'string') {\n      nativeUpdate.text = props.value;\n      setLastNativeText(props.value);\n    }\n\n    if (\n      selection &&\n      lastNativeSelection &&\n      (lastNativeSelection.start !== selection.start ||\n        lastNativeSelection.end !== selection.end)\n    ) {\n      nativeUpdate.selection = selection;\n      setLastNativeSelection({selection, mostRecentEventCount});\n    }\n\n    if (Object.keys(nativeUpdate).length === 0) {\n      return;\n    }\n\n    if (inputRef.current != null) {\n      viewCommands.setTextAndSelection(\n        inputRef.current,\n        mostRecentEventCount,\n        text,\n        selection?.start ?? -1,\n        selection?.end ?? -1,\n      );\n    }\n  }, [\n    mostRecentEventCount,\n    inputRef,\n    props.value,\n    props.defaultValue,\n    lastNativeText,\n    selection,\n    lastNativeSelection,\n    text,\n    viewCommands,\n  ]);\n\n  useLayoutEffect(() => {\n    const inputRefValue = inputRef.current;\n\n    if (inputRefValue != null) {\n      TextInputState.registerInput(inputRefValue);\n\n      return () => {\n        TextInputState.unregisterInput(inputRefValue);\n\n        if (TextInputState.currentlyFocusedInput() === inputRefValue) {\n          nullthrows(inputRefValue).blur();\n        }\n      };\n    }\n  }, [inputRef]);\n\n  const setLocalRef = useCallback(\n    (instance: TextInputInstance | null) => {\n      inputRef.current = instance;\n\n      /*\n      Hi reader from the future. I'm sorry for this.\n\n      This is a hack. Ideally we would forwardRef to the underlying\n      host component. However, since TextInput has it's own methods that can be\n      called as well, if we used the standard forwardRef then these\n      methods wouldn't be accessible and thus be a breaking change.\n\n      We have a couple of options of how to handle this:\n      - Return a new ref with everything we methods from both. This is problematic\n        because we need React to also know it is a host component which requires\n        internals of the class implementation of the ref.\n      - Break the API and have some other way to call one set of the methods or\n        the other. This is our long term approach as we want to eventually\n        get the methods on host components off the ref. So instead of calling\n        ref.measure() you might call ReactNative.measure(ref). This would hopefully\n        let the ref for TextInput then have the methods like `.clear`. Or we do it\n        the other way and make it TextInput.clear(textInputRef) which would be fine\n        too. Either way though is a breaking change that is longer term.\n      - Mutate this ref. :( Gross, but accomplishes what we need in the meantime\n        before we can get to the long term breaking change.\n      */\n      if (instance != null) {\n        // $FlowFixMe[incompatible-use] - See the explanation above.\n        Object.assign(instance, {\n          clear(): void {\n            if (inputRef.current != null) {\n              viewCommands.setTextAndSelection(\n                inputRef.current,\n                mostRecentEventCount,\n                '',\n                0,\n                0,\n              );\n            }\n          },\n          // TODO: Fix this returning true on null === null, when no input is focused\n          isFocused(): boolean {\n            return TextInputState.currentlyFocusedInput() === inputRef.current;\n          },\n          getNativeRef(): ?React.ElementRef<HostComponent<mixed>> {\n            return inputRef.current;\n          },\n          setSelection(start: number, end: number): void {\n            if (inputRef.current != null) {\n              viewCommands.setTextAndSelection(\n                inputRef.current,\n                mostRecentEventCount,\n                null,\n                start,\n                end,\n              );\n            }\n          },\n        });\n      }\n    },\n    [mostRecentEventCount, viewCommands],\n  );\n\n  const ref = useMergeRefs<TextInputInstance>(setLocalRef, props.forwardedRef);\n\n  const _onChange = (event: ChangeEvent) => {\n    const currentText = event.nativeEvent.text;\n    props.onChange && props.onChange(event);\n    props.onChangeText && props.onChangeText(currentText);\n\n    if (inputRef.current == null) {\n      // calling `props.onChange` or `props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    setLastNativeText(currentText);\n    // This must happen last, after we call setLastNativeText.\n    // Different ordering can cause bugs when editing AndroidTextInputs\n    // with multiple Fragments.\n    // We must update this so that controlled input updates work.\n    setMostRecentEventCount(event.nativeEvent.eventCount);\n  };\n\n  const _onChangeSync = (event: ChangeEvent) => {\n    const currentText = event.nativeEvent.text;\n    props.unstable_onChangeSync && props.unstable_onChangeSync(event);\n    props.unstable_onChangeTextSync &&\n      props.unstable_onChangeTextSync(currentText);\n\n    if (inputRef.current == null) {\n      // calling `props.onChange` or `props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    setLastNativeText(currentText);\n    // This must happen last, after we call setLastNativeText.\n    // Different ordering can cause bugs when editing AndroidTextInputs\n    // with multiple Fragments.\n    // We must update this so that controlled input updates work.\n    setMostRecentEventCount(event.nativeEvent.eventCount);\n  };\n\n  const _onSelectionChange = (event: SelectionChangeEvent) => {\n    props.onSelectionChange && props.onSelectionChange(event);\n\n    if (inputRef.current == null) {\n      // calling `props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    setLastNativeSelection({\n      selection: event.nativeEvent.selection,\n      mostRecentEventCount,\n    });\n  };\n\n  const _onFocus = (event: FocusEvent) => {\n    TextInputState.focusInput(inputRef.current);\n    if (props.onFocus) {\n      props.onFocus(event);\n    }\n  };\n\n  const _onBlur = (event: BlurEvent) => {\n    TextInputState.blurInput(inputRef.current);\n    if (props.onBlur) {\n      props.onBlur(event);\n    }\n  };\n\n  const _onScroll = (event: ScrollEvent) => {\n    props.onScroll && props.onScroll(event);\n  };\n\n  let textInput = null;\n\n  const multiline = props.multiline ?? false;\n\n  let submitBehavior: SubmitBehavior;\n  if (props.submitBehavior != null) {\n    // `submitBehavior` is set explicitly\n    if (!multiline && props.submitBehavior === 'newline') {\n      // For single line text inputs, `'newline'` is not a valid option\n      submitBehavior = 'blurAndSubmit';\n    } else {\n      submitBehavior = props.submitBehavior;\n    }\n  } else if (multiline) {\n    if (props.blurOnSubmit === true) {\n      submitBehavior = 'blurAndSubmit';\n    } else {\n      submitBehavior = 'newline';\n    }\n  } else {\n    // Single line\n    if (props.blurOnSubmit !== false) {\n      submitBehavior = 'blurAndSubmit';\n    } else {\n      submitBehavior = 'submit';\n    }\n  }\n\n  const accessible = props.accessible !== false;\n  const focusable = props.focusable !== false;\n\n  const {\n    editable,\n    hitSlop,\n    onPress,\n    onPressIn,\n    onPressOut,\n    rejectResponderTermination,\n  } = props;\n\n  const config = React.useMemo(\n    () => ({\n      hitSlop,\n      onPress: (event: PressEvent) => {\n        onPress?.(event);\n        if (editable !== false) {\n          if (inputRef.current != null) {\n            inputRef.current.focus();\n          }\n        }\n      },\n      onPressIn: onPressIn,\n      onPressOut: onPressOut,\n      cancelable: Platform.OS === 'ios' ? !rejectResponderTermination : null,\n    }),\n    [\n      editable,\n      hitSlop,\n      onPress,\n      onPressIn,\n      onPressOut,\n      rejectResponderTermination,\n    ],\n  );\n\n  // Hide caret during test runs due to a flashing caret\n  // makes screenshot tests flakey\n  let caretHidden = props.caretHidden;\n  if (Platform.isTesting) {\n    caretHidden = true;\n  }\n\n  // TextInput handles onBlur and onFocus events\n  // so omitting onBlur and onFocus pressability handlers here.\n  const {onBlur, onFocus, ...eventHandlers} = usePressability(config) || {};\n\n  let _accessibilityState;\n  if (\n    accessibilityState != null ||\n    ariaBusy != null ||\n    ariaChecked != null ||\n    ariaDisabled != null ||\n    ariaExpanded != null ||\n    ariaSelected != null\n  ) {\n    _accessibilityState = {\n      busy: ariaBusy ?? accessibilityState?.busy,\n      checked: ariaChecked ?? accessibilityState?.checked,\n      disabled: ariaDisabled ?? accessibilityState?.disabled,\n      expanded: ariaExpanded ?? accessibilityState?.expanded,\n      selected: ariaSelected ?? accessibilityState?.selected,\n    };\n  }\n\n  const style = flattenStyle<TextStyleProp>(props.style);\n\n  if (Platform.OS === 'ios') {\n    const RCTTextInputView =\n      props.multiline === true\n        ? RCTMultilineTextInputView\n        : RCTSinglelineTextInputView;\n\n    const useMultilineDefaultStyle =\n      props.multiline === true &&\n      (style == null ||\n        (style.padding == null &&\n          style.paddingVertical == null &&\n          style.paddingTop == null));\n\n    const useOnChangeSync =\n      (props.unstable_onChangeSync || props.unstable_onChangeTextSync) &&\n      !(props.onChange || props.onChangeText);\n\n    textInput = (\n      <RCTTextInputView\n        // $FlowFixMe[incompatible-type] - Figure out imperative + forward refs.\n        ref={ref}\n        {...otherProps}\n        {...eventHandlers}\n        accessibilityState={_accessibilityState}\n        accessible={accessible}\n        submitBehavior={submitBehavior}\n        caretHidden={caretHidden}\n        dataDetectorTypes={props.dataDetectorTypes}\n        focusable={tabIndex !== undefined ? !tabIndex : focusable}\n        mostRecentEventCount={mostRecentEventCount}\n        nativeID={id ?? props.nativeID}\n        onBlur={_onBlur}\n        onKeyPressSync={props.unstable_onKeyPressSync}\n        onChange={_onChange}\n        onChangeSync={useOnChangeSync === true ? _onChangeSync : null}\n        onContentSizeChange={props.onContentSizeChange}\n        onFocus={_onFocus}\n        onScroll={_onScroll}\n        onSelectionChange={_onSelectionChange}\n        onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n        selection={selection}\n        selectionColor={selectionColor}\n        style={StyleSheet.compose(\n          useMultilineDefaultStyle ? styles.multilineDefault : null,\n          style,\n        )}\n        text={text}\n      />\n    );\n  } else if (Platform.OS === 'android') {\n    const autoCapitalize = props.autoCapitalize || 'sentences';\n    const _accessibilityLabelledBy =\n      props?.['aria-labelledby'] ?? props?.accessibilityLabelledBy;\n    const placeholder = props.placeholder ?? '';\n    let children = props.children;\n    const childCount = React.Children.count(children);\n    invariant(\n      !(props.value != null && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n    // For consistency with iOS set cursor/selectionHandle color as selectionColor\n    const colorProps = {\n      selectionColor,\n      selectionHandleColor:\n        selectionHandleColor === undefined\n          ? selectionColor\n          : selectionHandleColor,\n      cursorColor: cursorColor === undefined ? selectionColor : cursorColor,\n    };\n    textInput = (\n      /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match up\n       * exactly with the props for TextInput. This will need to get fixed */\n      /* $FlowFixMe[incompatible-type] the types for AndroidTextInput don't\n       * match up exactly with the props for TextInput. This will need to get\n       * fixed */\n      /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput don't\n       * match up exactly with the props for TextInput. This will need to get\n       * fixed */\n      <AndroidTextInput\n        // $FlowFixMe[incompatible-type] - Figure out imperative + forward refs.\n        ref={ref}\n        {...otherProps}\n        {...colorProps}\n        {...eventHandlers}\n        accessibilityState={_accessibilityState}\n        accessibilityLabelledBy={_accessibilityLabelledBy}\n        accessible={accessible}\n        autoCapitalize={autoCapitalize}\n        submitBehavior={submitBehavior}\n        caretHidden={caretHidden}\n        children={children}\n        disableFullscreenUI={props.disableFullscreenUI}\n        focusable={tabIndex !== undefined ? !tabIndex : focusable}\n        mostRecentEventCount={mostRecentEventCount}\n        nativeID={id ?? props.nativeID}\n        numberOfLines={props.rows ?? props.numberOfLines}\n        onBlur={_onBlur}\n        onChange={_onChange}\n        onFocus={_onFocus}\n        /* $FlowFixMe[prop-missing] the types for AndroidTextInput don't match\n         * up exactly with the props for TextInput. This will need to get fixed\n         */\n        /* $FlowFixMe[incompatible-type-arg] the types for AndroidTextInput\n         * don't match up exactly with the props for TextInput. This will need\n         * to get fixed */\n        onScroll={_onScroll}\n        onSelectionChange={_onSelectionChange}\n        placeholder={placeholder}\n        style={style}\n        text={text}\n        textBreakStrategy={props.textBreakStrategy}\n      />\n    );\n  }\n  return (\n    <TextAncestor.Provider value={true}>{textInput}</TextAncestor.Provider>\n  );\n}\n\nconst enterKeyHintToReturnTypeMap = {\n  enter: 'default',\n  done: 'done',\n  go: 'go',\n  next: 'next',\n  previous: 'previous',\n  search: 'search',\n  send: 'send',\n};\n\nconst inputModeToKeyboardTypeMap = {\n  none: 'default',\n  text: 'default',\n  decimal: 'decimal-pad',\n  numeric: 'number-pad',\n  tel: 'phone-pad',\n  search: Platform.OS === 'ios' ? 'web-search' : 'default',\n  email: 'email-address',\n  url: 'url',\n};\n\n// Map HTML autocomplete values to Android autoComplete values\nconst autoCompleteWebToAutoCompleteAndroidMap = {\n  'address-line1': 'postal-address-region',\n  'address-line2': 'postal-address-locality',\n  bday: 'birthdate-full',\n  'bday-day': 'birthdate-day',\n  'bday-month': 'birthdate-month',\n  'bday-year': 'birthdate-year',\n  'cc-csc': 'cc-csc',\n  'cc-exp': 'cc-exp',\n  'cc-exp-month': 'cc-exp-month',\n  'cc-exp-year': 'cc-exp-year',\n  'cc-number': 'cc-number',\n  country: 'postal-address-country',\n  'current-password': 'password',\n  email: 'email',\n  'honorific-prefix': 'name-prefix',\n  'honorific-suffix': 'name-suffix',\n  name: 'name',\n  'additional-name': 'name-middle',\n  'family-name': 'name-family',\n  'given-name': 'name-given',\n  'new-password': 'password-new',\n  off: 'off',\n  'one-time-code': 'sms-otp',\n  'postal-code': 'postal-code',\n  sex: 'gender',\n  'street-address': 'street-address',\n  tel: 'tel',\n  'tel-country-code': 'tel-country-code',\n  'tel-national': 'tel-national',\n  username: 'username',\n};\n\n// Map HTML autocomplete values to iOS textContentType values\nconst autoCompleteWebToTextContentTypeMap = {\n  'address-line1': 'streetAddressLine1',\n  'address-line2': 'streetAddressLine2',\n  bday: 'birthdate',\n  'bday-day': 'birthdateDay',\n  'bday-month': 'birthdateMonth',\n  'bday-year': 'birthdateYear',\n  'cc-csc': 'creditCardSecurityCode',\n  'cc-exp-month': 'creditCardExpirationMonth',\n  'cc-exp-year': 'creditCardExpirationYear',\n  'cc-exp': 'creditCardExpiration',\n  'cc-given-name': 'creditCardGivenName',\n  'cc-additional-name': 'creditCardMiddleName',\n  'cc-family-name': 'creditCardFamilyName',\n  'cc-name': 'creditCardName',\n  'cc-number': 'creditCardNumber',\n  'cc-type': 'creditCardType',\n  'current-password': 'password',\n  country: 'countryName',\n  email: 'emailAddress',\n  name: 'name',\n  'additional-name': 'middleName',\n  'family-name': 'familyName',\n  'given-name': 'givenName',\n  nickname: 'nickname',\n  'honorific-prefix': 'namePrefix',\n  'honorific-suffix': 'nameSuffix',\n  'new-password': 'newPassword',\n  off: 'none',\n  'one-time-code': 'oneTimeCode',\n  organization: 'organizationName',\n  'organization-title': 'jobTitle',\n  'postal-code': 'postalCode',\n  'street-address': 'fullStreetAddress',\n  tel: 'telephoneNumber',\n  url: 'URL',\n  username: 'username',\n};\n\nconst ExportedForwardRef: React.AbstractComponent<\n  React.ElementConfig<typeof InternalTextInput>,\n  TextInputInstance,\n  // $FlowFixMe[incompatible-call]\n> = React.forwardRef(function TextInput(\n  {\n    allowFontScaling = true,\n    rejectResponderTermination = true,\n    underlineColorAndroid = 'transparent',\n    autoComplete,\n    textContentType,\n    readOnly,\n    editable,\n    enterKeyHint,\n    returnKeyType,\n    inputMode,\n    showSoftInputOnFocus,\n    keyboardType,\n    ...restProps\n  },\n  forwardedRef: ReactRefSetter<TextInputInstance>,\n) {\n  // $FlowFixMe[underconstrained-implicit-instantiation]\n  let style = flattenStyle(restProps.style);\n\n  if (style?.verticalAlign != null) {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.textAlignVertical =\n      // $FlowFixMe[invalid-computed-prop]\n      verticalAlignToTextAlignVerticalMap[style.verticalAlign];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.verticalAlign;\n  }\n\n  return (\n    <InternalTextInput\n      allowFontScaling={allowFontScaling}\n      rejectResponderTermination={rejectResponderTermination}\n      underlineColorAndroid={underlineColorAndroid}\n      editable={readOnly !== undefined ? !readOnly : editable}\n      returnKeyType={\n        enterKeyHint ? enterKeyHintToReturnTypeMap[enterKeyHint] : returnKeyType\n      }\n      keyboardType={\n        inputMode ? inputModeToKeyboardTypeMap[inputMode] : keyboardType\n      }\n      showSoftInputOnFocus={\n        inputMode == null ? showSoftInputOnFocus : inputMode !== 'none'\n      }\n      autoComplete={\n        Platform.OS === 'android'\n          ? // $FlowFixMe[invalid-computed-prop]\n            // $FlowFixMe[prop-missing]\n            autoCompleteWebToAutoCompleteAndroidMap[autoComplete] ??\n            autoComplete\n          : undefined\n      }\n      textContentType={\n        textContentType != null\n          ? textContentType\n          : Platform.OS === 'ios' &&\n            autoComplete &&\n            autoComplete in autoCompleteWebToTextContentTypeMap\n          ? // $FlowFixMe[invalid-computed-prop]\n            // $FlowFixMe[prop-missing]\n            autoCompleteWebToTextContentTypeMap[autoComplete]\n          : textContentType\n      }\n      {...restProps}\n      forwardedRef={forwardedRef}\n      style={style}\n    />\n  );\n});\n\nExportedForwardRef.displayName = 'TextInput';\n\n// $FlowFixMe[prop-missing]\nExportedForwardRef.State = {\n  currentlyFocusedInput: TextInputState.currentlyFocusedInput,\n\n  currentlyFocusedField: TextInputState.currentlyFocusedField,\n  focusTextInput: TextInputState.focusTextInput,\n  blurTextInput: TextInputState.blurTextInput,\n};\n\nexport type TextInputComponentStatics = $ReadOnly<{|\n  State: $ReadOnly<{|\n    currentlyFocusedInput: typeof TextInputState.currentlyFocusedInput,\n    currentlyFocusedField: typeof TextInputState.currentlyFocusedField,\n    focusTextInput: typeof TextInputState.focusTextInput,\n    blurTextInput: typeof TextInputState.blurTextInput,\n  |}>,\n|}>;\n\nconst styles = StyleSheet.create({\n  multilineDefault: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center',\n};\n\n// $FlowFixMe[unclear-type] Unclear type. Using `any` type is not safe.\nmodule.exports = ((ExportedForwardRef: any): TextInputType);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// This class is responsible for coordinating the \"focused\" state for\n// TextInputs. All calls relating to the keyboard should be funneled\n// through here.\n\nimport type {\n  HostComponent,\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureOnSuccessCallback,\n} from '../../Renderer/shims/ReactNativeTypes';\n\nimport {Commands as AndroidTextInputCommands} from '../../Components/TextInput/AndroidTextInputNativeComponent';\nimport {Commands as iOSTextInputCommands} from '../../Components/TextInput/RCTSingelineTextInputNativeComponent';\n\nconst {findNodeHandle} = require('../../ReactNative/RendererProxy');\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\ntype ComponentRef = React.ElementRef<HostComponent<mixed>>;\n\nlet currentlyFocusedInputRef: ?ComponentRef = null;\nconst inputs = new Set<{\n  blur(): void,\n  focus(): void,\n  measure(callback: MeasureOnSuccessCallback): void,\n  measureInWindow(callback: MeasureInWindowOnSuccessCallback): void,\n  measureLayout(\n    relativeToNativeNode: number | React.ElementRef<HostComponent<mixed>>,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n    onFail?: () => void,\n  ): void,\n  setNativeProps(nativeProps: {...}): void,\n}>();\n\nfunction currentlyFocusedInput(): ?ComponentRef {\n  return currentlyFocusedInputRef;\n}\n\n/**\n * Returns the ID of the currently focused text field, if one exists\n * If no text field is focused it returns null\n */\nfunction currentlyFocusedField(): ?number {\n  if (__DEV__) {\n    console.error(\n      'currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput',\n    );\n  }\n\n  return findNodeHandle(currentlyFocusedInputRef);\n}\n\nfunction focusInput(textField: ?ComponentRef): void {\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    currentlyFocusedInputRef = textField;\n  }\n}\n\nfunction blurInput(textField: ?ComponentRef): void {\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    currentlyFocusedInputRef = null;\n  }\n}\n\nfunction focusField(textFieldID: ?number): void {\n  if (__DEV__) {\n    console.error('focusField no longer works. Use focusInput');\n  }\n\n  return;\n}\n\nfunction blurField(textFieldID: ?number) {\n  if (__DEV__) {\n    console.error('blurField no longer works. Use blurInput');\n  }\n\n  return;\n}\n\n/**\n * @param {number} TextInputID id of the text field to focus\n * Focuses the specified text field\n * noop if the text field was already focused or if the field is not editable\n */\nfunction focusTextInput(textField: ?ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'focusTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  if (textField != null) {\n    const fieldCanBeFocused =\n      currentlyFocusedInputRef !== textField &&\n      // $FlowFixMe - `currentProps` is missing in `NativeMethods`\n      textField.currentProps?.editable !== false;\n\n    if (!fieldCanBeFocused) {\n      return;\n    }\n    focusInput(textField);\n    if (Platform.OS === 'ios') {\n      // This isn't necessarily a single line text input\n      // But commands don't actually care as long as the thing being passed in\n      // actually has a command with that name. So this should work with single\n      // and multiline text inputs. Ideally we'll merge them into one component\n      // in the future.\n      iOSTextInputCommands.focus(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.focus(textField);\n    }\n  }\n}\n\n/**\n * @param {number} textFieldID id of the text field to unfocus\n * Unfocuses the specified text field\n * noop if it wasn't focused\n */\nfunction blurTextInput(textField: ?ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'blurTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    blurInput(textField);\n    if (Platform.OS === 'ios') {\n      // This isn't necessarily a single line text input\n      // But commands don't actually care as long as the thing being passed in\n      // actually has a command with that name. So this should work with single\n      // and multiline text inputs. Ideally we'll merge them into one component\n      // in the future.\n      iOSTextInputCommands.blur(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.blur(textField);\n    }\n  }\n}\n\nfunction registerInput(textField: ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'registerInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  inputs.add(textField);\n}\n\nfunction unregisterInput(textField: ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'unregisterInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n  inputs.delete(textField);\n}\n\nfunction isTextInput(textField: ComponentRef): boolean {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'isTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return false;\n  }\n\n  return inputs.has(textField);\n}\n\nmodule.exports = {\n  currentlyFocusedInput,\n  focusInput,\n  blurInput,\n\n  currentlyFocusedField,\n  focusField,\n  blurField,\n  focusTextInput,\n  blurTextInput,\n  registerInput,\n  unregisterInput,\n  isTextInput,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeToastAndroid';\nimport NativeToastAndroid from '../../../src/private/specs/modules/NativeToastAndroid';\nexport default NativeToastAndroid;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport NativeToastAndroid from './NativeToastAndroid';\n\n/**\n * This exposes the native ToastAndroid module as a JS module. This has a function 'show'\n * which takes the following parameters:\n *\n * 1. String message: A string with the text to toast\n * 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG\n *\n * There is also a function `showWithGravity` to specify the layout gravity. May be\n * ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER.\n *\n * The 'showWithGravityAndOffset' function adds on the ability to specify offset\n * These offset values will translate to pixels.\n *\n * Basic usage:\n * ```javascript\n * ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);\n * ToastAndroid.showWithGravity('All Your Base Are Belong To Us', ToastAndroid.SHORT, ToastAndroid.CENTER);\n * ToastAndroid.showWithGravityAndOffset('A wild toast appeared!', ToastAndroid.LONG, ToastAndroid.BOTTOM, 25, 50);\n * ```\n */\n\nconst ToastAndroidConstants = NativeToastAndroid.getConstants();\n\nconst ToastAndroid = {\n  // Toast duration constants\n  SHORT: (ToastAndroidConstants.SHORT: number),\n  LONG: (ToastAndroidConstants.LONG: number),\n  // Toast gravity constants\n  TOP: (ToastAndroidConstants.TOP: number),\n  BOTTOM: (ToastAndroidConstants.BOTTOM: number),\n  CENTER: (ToastAndroidConstants.CENTER: number),\n\n  show: function (message: string, duration: number): void {\n    NativeToastAndroid.show(message, duration);\n  },\n\n  showWithGravity: function (\n    message: string,\n    duration: number,\n    gravity: number,\n  ): void {\n    NativeToastAndroid.showWithGravity(message, duration, gravity);\n  },\n\n  showWithGravityAndOffset: function (\n    message: string,\n    duration: number,\n    gravity: number,\n    xOffset: number,\n    yOffset: number,\n  ): void {\n    NativeToastAndroid.showWithGravityAndOffset(\n      message,\n      duration,\n      gravity,\n      xOffset,\n      yOffset,\n    );\n  },\n};\n\nmodule.exports = ToastAndroid;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\nimport PooledClass from './PooledClass';\n\nconst twoArgumentPooler = PooledClass.twoArgumentPooler;\n\n/**\n * PooledClass representing the bounding rectangle of a region.\n *\n * @param {number} width Width of bounding rectangle.\n * @param {number} height Height of bounding rectangle.\n * @constructor BoundingDimensions\n */\nfunction BoundingDimensions(width, height) {\n  this.width = width;\n  this.height = height;\n}\n\nBoundingDimensions.prototype.destructor = function () {\n  this.width = null;\n  this.height = null;\n};\n\n/**\n * @param {HTMLElement} element Element to return `BoundingDimensions` for.\n * @return {BoundingDimensions} Bounding dimensions of `element`.\n */\nBoundingDimensions.getPooledFromElement = function (element) {\n  return BoundingDimensions.getPooled(\n    element.offsetWidth,\n    element.offsetHeight,\n  );\n};\n\nPooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);\n\nmodule.exports = BoundingDimensions;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\nimport invariant from 'invariant';\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\n/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n * Flow's LTI update could not be added via codemod */\nconst oneArgumentPooler = function (copyFieldsFrom: any) {\n  const Klass = this; // eslint-disable-line consistent-this\n  if (Klass.instancePool.length) {\n    const instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\n/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n * Flow's LTI update could not be added via codemod */\nconst twoArgumentPooler = function (a1: any, a2: any) {\n  const Klass = this; // eslint-disable-line consistent-this\n  if (Klass.instancePool.length) {\n    const instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\n/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n * Flow's LTI update could not be added via codemod */\nconst threeArgumentPooler = function (a1: any, a2: any, a3: any) {\n  const Klass = this; // eslint-disable-line consistent-this\n  if (Klass.instancePool.length) {\n    const instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\n/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n * Flow's LTI update could not be added via codemod */\nconst fourArgumentPooler = function (a1: any, a2: any, a3: any, a4: any) {\n  const Klass = this; // eslint-disable-line consistent-this\n  if (Klass.instancePool.length) {\n    const instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\n/* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n * Flow's LTI update could not be added via codemod */\nconst standardReleaser = function (instance) {\n  const Klass = this; // eslint-disable-line consistent-this\n  invariant(\n    instance instanceof Klass,\n    'Trying to release an instance into a pool of a different type.',\n  );\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nconst DEFAULT_POOL_SIZE = 10;\nconst DEFAULT_POOLER = oneArgumentPooler;\n\ntype Pooler = any;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nconst addPoolingTo = function <T>(\n  CopyConstructor: Class<T>,\n  pooler: Pooler,\n): Class<T> & {\n  getPooled(\n    ...args: $ReadOnlyArray<mixed>\n  ): /* arguments of the constructor */ T,\n  release(instance: mixed): void,\n  ...\n} {\n  // Casting as any so that flow ignores the actual implementation and trusts\n  // it to match the type we declared\n  const NewKlass: any = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nconst PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: (oneArgumentPooler: Pooler),\n  twoArgumentPooler: (twoArgumentPooler: Pooler),\n  threeArgumentPooler: (threeArgumentPooler: Pooler),\n  fourArgumentPooler: (fourArgumentPooler: Pooler),\n};\n\nmodule.exports = PooledClass;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\nimport PooledClass from './PooledClass';\n\nconst twoArgumentPooler = PooledClass.twoArgumentPooler;\n\n/**\n * Position does not expose methods for construction via an `HTMLDOMElement`,\n * because it isn't meaningful to construct such a thing without first defining\n * a frame of reference.\n *\n * @param {number} windowStartKey Key that window starts at.\n * @param {number} windowEndKey Key that window ends at.\n */\nfunction Position(left, top) {\n  this.left = left;\n  this.top = top;\n}\n\nPosition.prototype.destructor = function () {\n  this.left = null;\n  this.top = null;\n};\n\nPooledClass.addPoolingTo(Position, twoArgumentPooler);\n\nmodule.exports = Position;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport UIManager from '../../ReactNative/UIManager';\nimport Platform from '../../Utilities/Platform';\nimport SoundManager from '../Sound/SoundManager';\nimport BoundingDimensions from './BoundingDimensions';\nimport Position from './Position';\nimport * as React from 'react';\n\nconst extractSingleTouch = (nativeEvent: {\n  +changedTouches: $ReadOnlyArray<PressEvent['nativeEvent']>,\n  +force?: number,\n  +identifier: number,\n  +locationX: number,\n  +locationY: number,\n  +pageX: number,\n  +pageY: number,\n  +target: ?number,\n  +timestamp: number,\n  +touches: $ReadOnlyArray<PressEvent['nativeEvent']>,\n}) => {\n  const touches = nativeEvent.touches;\n  const changedTouches = nativeEvent.changedTouches;\n  const hasTouches = touches && touches.length > 0;\n  const hasChangedTouches = changedTouches && changedTouches.length > 0;\n\n  return !hasTouches && hasChangedTouches\n    ? changedTouches[0]\n    : hasTouches\n    ? touches[0]\n    : nativeEvent;\n};\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\n\nconst States = {\n  NOT_RESPONDER: 'NOT_RESPONDER', // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN', // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT', // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN', // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT', // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN', // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT', // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR',\n};\n\ntype State =\n  | typeof States.NOT_RESPONDER\n  | typeof States.RESPONDER_INACTIVE_PRESS_IN\n  | typeof States.RESPONDER_INACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_OUT\n  | typeof States.ERROR;\n\n/*\n * Quick lookup map for states that are considered to be \"active\"\n */\n\nconst baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false,\n};\n\nconst IsActive = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nconst IsPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\nconst IsLongPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\n/**\n * Inputs to the state machine.\n */\nconst Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED',\n};\n\ntype Signal =\n  | typeof Signals.DELAY\n  | typeof Signals.RESPONDER_GRANT\n  | typeof Signals.RESPONDER_RELEASE\n  | typeof Signals.RESPONDER_TERMINATED\n  | typeof Signals.ENTER_PRESS_RECT\n  | typeof Signals.LEAVE_PRESS_RECT\n  | typeof Signals.LONG_PRESS_DETECTED;\n\n/**\n * Mapping from States x Signals => States\n */\nconst Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER,\n  },\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nconst HIGHLIGHT_DELAY_MS = 130;\n\nconst PRESS_EXPAND_PX = 20;\n\nconst LONG_PRESS_THRESHOLD = 500;\n\nconst LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nconst LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nconst TouchableMixin = {\n  componentDidMount: function () {\n    if (!Platform.isTV) {\n      return;\n    }\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  componentWillUnmount: function () {\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function (): {\n    touchable: {\n      touchState: ?State,\n      responderID: ?PressEvent['currentTarget'],\n    },\n  } {\n    return {\n      touchable: {touchState: undefined, responderID: null},\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderTerminationRequest: function (): any {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleStartShouldSetResponder: function (): any {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function (): boolean {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderGrant: function (e: PressEvent) {\n    const dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    let delayMS =\n      this.touchableGetHighlightDelayMS !== undefined\n        ? Math.max(this.touchableGetHighlightDelayMS(), 0)\n        : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(\n        this._handleDelay.bind(this, e),\n        delayMS,\n      );\n    } else {\n      this._handleDelay(e);\n    }\n\n    let longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined\n        ? Math.max(this.touchableGetLongPressDelayMS(), 10)\n        : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS,\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderRelease: function (e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderTerminate: function (e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleResponderMove: function (e: PressEvent) {\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    const positionOnActivate = this.state.touchable.positionOnActivate;\n    const dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    const pressRectOffset = this.touchableGetPressRectOffset\n      ? this.touchableGetPressRectOffset()\n      : {\n          left: PRESS_EXPAND_PX,\n          right: PRESS_EXPAND_PX,\n          top: PRESS_EXPAND_PX,\n          bottom: PRESS_EXPAND_PX,\n        };\n\n    let pressExpandLeft = pressRectOffset.left;\n    let pressExpandTop = pressRectOffset.top;\n    let pressExpandRight = pressRectOffset.right;\n    let pressExpandBottom = pressRectOffset.bottom;\n\n    const hitSlop = this.touchableGetHitSlop\n      ? this.touchableGetHitSlop()\n      : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      const movedDistance = this._getDistanceBetweenPoints(\n        pageX,\n        pageY,\n        this.pressInLocation.pageX,\n        this.pressInLocation.pageY,\n      );\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    const isTouchWithinActive =\n      pageX > positionOnActivate.left - pressExpandLeft &&\n      pageY > positionOnActivate.top - pressExpandTop &&\n      pageX <\n        positionOnActivate.left +\n          dimensionsOnActivate.width +\n          pressExpandRight &&\n      pageY <\n        positionOnActivate.top +\n          dimensionsOnActivate.height +\n          pressExpandBottom;\n    if (isTouchWithinActive) {\n      const prevState = this.state.touchable.touchState;\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      const curState = this.state.touchable.touchState;\n      if (\n        curState === States.RESPONDER_INACTIVE_PRESS_IN &&\n        prevState !== States.RESPONDER_INACTIVE_PRESS_IN\n      ) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this. This can be overridden when\n   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleFocus: function (e: Event) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   * This can be overridden when using\n   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  touchableHandleBlur: function (e: Event) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _remeasureMetricsOnActivation: function () {\n    const responderID = this.state.touchable.responderID;\n    if (responderID == null) {\n      return;\n    }\n\n    if (typeof responderID === 'number') {\n      UIManager.measure(responderID, this._handleQueryLayout);\n    } else {\n      responderID.measure(this._handleQueryLayout);\n    }\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _handleQueryLayout: function (\n    l: number,\n    t: number,\n    w: number,\n    h: number,\n    globalX: number,\n    globalY: number,\n  ) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(\n      globalX,\n      globalY,\n    );\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(\n      w,\n      h,\n    );\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _handleDelay: function (e: PressEvent) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _handleLongDelay: function (e: PressEvent) {\n    this.longPressDelayTimeout = null;\n    const curState = this.state.touchable.touchState;\n    if (\n      curState === States.RESPONDER_ACTIVE_PRESS_IN ||\n      curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    ) {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _receiveSignal: function (signal: Signal, e: PressEvent) {\n    const responderID = this.state.touchable.responderID;\n    const curState = this.state.touchable.touchState;\n    const nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' +\n          signal +\n          '` or state `' +\n          curState +\n          '` for Touchable responder `' +\n          typeof this.state.touchable.responderID ===\n        'number'\n          ? this.state.touchable.responderID\n          : 'host component' + '`',\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' +\n          curState +\n          '` to `' +\n          signal +\n          '` for responder `' +\n          typeof this.state.touchable.responderID ===\n        'number'\n          ? this.state.touchable.responderID\n          : '<<host component>>' + '`',\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _cancelLongPressDelayTimeout: function () {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function (state: State): boolean {\n    return (\n      state === States.RESPONDER_ACTIVE_PRESS_IN ||\n      state === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    );\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _savePressInLocation: function (e: PressEvent) {\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n    const locationX = touch && touch.locationX;\n    const locationY = touch && touch.locationY;\n    this.pressInLocation = {pageX, pageY, locationX, locationY};\n  },\n\n  _getDistanceBetweenPoints: function (\n    aX: number,\n    aY: number,\n    bX: number,\n    bY: number,\n  ): number {\n    const deltaX = aX - bX;\n    const deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _performSideEffectsForTransition: function (\n    curState: State,\n    nextState: State,\n    signal: Signal,\n    e: PressEvent,\n  ) {\n    const curIsHighlight = this._isHighlight(curState);\n    const newIsHighlight = this._isHighlight(nextState);\n\n    const isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED ||\n      signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      curState === States.NOT_RESPONDER &&\n      nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n\n    const isActiveTransition = !IsActive[curState] && IsActive[nextState];\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      const hasLongPressHandler = !!this.props.onLongPress;\n      const pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler\n        (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      const shouldInvokePress =\n        !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        if (Platform.OS === 'android' && !this.props.touchSoundDisabled) {\n          SoundManager.playTouchSound();\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _startHighlight: function (e: PressEvent) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  _endHighlight: function (e: PressEvent) {\n    if (this.touchableHandleActivePressOut) {\n      if (\n        this.touchableGetPressOutDelayMS &&\n        this.touchableGetPressOutDelayMS()\n      ) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n  withoutDefaultFocusAndBlur: ({}: {...}),\n};\n\n/**\n * Provide an optional version of the mixin where `touchableHandleFocus` and\n * `touchableHandleBlur` can be overridden. This allows appropriate defaults to\n * be set on TV platforms, without breaking existing implementations of\n * `Touchable`.\n */\nconst {\n  touchableHandleFocus,\n  touchableHandleBlur,\n  ...TouchableMixinWithoutDefaultFocusAndBlur\n} = TouchableMixin;\nTouchableMixin.withoutDefaultFocusAndBlur =\n  TouchableMixinWithoutDefaultFocusAndBlur;\n\nconst Touchable = {\n  Mixin: TouchableMixin,\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({\n    color,\n    hitSlop,\n  }: {\n    color: ColorValue,\n    hitSlop: EdgeInsetsProp,\n    ...\n  }): null | React.Node => {\n    if (__DEV__) {\n      return <PressabilityDebugView color={color} hitSlop={hitSlop} />;\n    }\n    return null;\n  },\n};\n\nexport default Touchable;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback';\n\nimport View from '../../Components/View/View';\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport StyleSheet, {type ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport * as React from 'react';\n\ntype AndroidProps = $ReadOnly<{|\n  nextFocusDown?: ?number,\n  nextFocusForward?: ?number,\n  nextFocusLeft?: ?number,\n  nextFocusRight?: ?number,\n  nextFocusUp?: ?number,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  hasTVPreferredFocus?: ?boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n  ...AndroidProps,\n  ...IOSProps,\n\n  activeOpacity?: ?number,\n  underlayColor?: ?ColorValue,\n  style?: ?ViewStyleProp,\n  onShowUnderlay?: ?() => void,\n  onHideUnderlay?: ?() => void,\n  testOnly_pressed?: ?boolean,\n\n  hostRef: React.Ref<typeof View>,\n|}>;\n\ntype ExtraStyles = $ReadOnly<{|\n  child: ViewStyleProp,\n  underlay: ViewStyleProp,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n  extraStyles: ?ExtraStyles,\n|}>;\n\n/**\n * A wrapper for making views respond properly to touches.\n * On press down, the opacity of the wrapped view is decreased, which allows\n * the underlay color to show through, darkening or tinting the view.\n *\n * The underlay comes from wrapping the child in a new View, which can affect\n * layout, and sometimes cause unwanted visual artifacts if not used correctly,\n * for example if the backgroundColor of the wrapped view isn't explicitly set\n * to an opaque color.\n *\n * TouchableHighlight must have one child (not zero or more than one).\n * If you wish to have several child components, wrap them in a View.\n *\n * Example:\n *\n * ```\n * renderButton: function() {\n *   return (\n *     <TouchableHighlight onPress={this._onPressButton}>\n *       <Image\n *         style={styles.button}\n *         source={require('./myButton.png')}\n *       />\n *     </TouchableHighlight>\n *   );\n * },\n * ```\n *\n *\n * ### Example\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react'\n * import {\n *   AppRegistry,\n *   StyleSheet,\n *   TouchableHighlight,\n *   Text,\n *   View,\n * } from 'react-native'\n *\n * class App extends Component {\n *   constructor(props) {\n *     super(props)\n *     this.state = { count: 0 }\n *   }\n *\n *   onPress = () => {\n *     this.setState({\n *       count: this.state.count+1\n *     })\n *   }\n *\n *  render() {\n *     return (\n *       <View style={styles.container}>\n *         <TouchableHighlight\n *          style={styles.button}\n *          onPress={this.onPress}\n *         >\n *          <Text> Touch Here </Text>\n *         </TouchableHighlight>\n *         <View style={[styles.countContainer]}>\n *           <Text style={[styles.countText]}>\n *             { this.state.count !== 0 ? this.state.count: null}\n *           </Text>\n *         </View>\n *       </View>\n *     )\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'center',\n *     paddingHorizontal: 10\n *   },\n *   button: {\n *     alignItems: 'center',\n *     backgroundColor: '#DDDDDD',\n *     padding: 10\n *   },\n *   countContainer: {\n *     alignItems: 'center',\n *     padding: 10\n *   },\n *   countText: {\n *     color: '#FF00FF'\n *   }\n * })\n *\n * AppRegistry.registerComponent('App', () => App)\n * ```\n *\n */\nclass TouchableHighlight extends React.Component<Props, State> {\n  _hideTimeout: ?TimeoutID;\n  _isMounted: boolean = false;\n\n  state: State = {\n    pressability: new Pressability(this._createPressabilityConfig()),\n    extraStyles:\n      this.props.testOnly_pressed === true ? this._createExtraStyles() : null,\n  };\n\n  _createPressabilityConfig(): PressabilityConfig {\n    return {\n      cancelable: !this.props.rejectResponderTermination,\n      disabled:\n        this.props.disabled != null\n          ? this.props.disabled\n          : this.props.accessibilityState?.disabled,\n      hitSlop: this.props.hitSlop,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: this.props.pressRetentionOffset,\n      android_disableSound: this.props.touchSoundDisabled,\n      onBlur: event => {\n        if (Platform.isTV) {\n          this._hideUnderlay();\n        }\n        if (this.props.onBlur != null) {\n          this.props.onBlur(event);\n        }\n      },\n      onFocus: event => {\n        if (Platform.isTV) {\n          this._showUnderlay();\n        }\n        if (this.props.onFocus != null) {\n          this.props.onFocus(event);\n        }\n      },\n      onLongPress: this.props.onLongPress,\n      onPress: event => {\n        if (this._hideTimeout != null) {\n          clearTimeout(this._hideTimeout);\n        }\n        if (!Platform.isTV) {\n          this._showUnderlay();\n          this._hideTimeout = setTimeout(() => {\n            this._hideUnderlay();\n          }, this.props.delayPressOut ?? 0);\n        }\n        if (this.props.onPress != null) {\n          this.props.onPress(event);\n        }\n      },\n      onPressIn: event => {\n        if (this._hideTimeout != null) {\n          clearTimeout(this._hideTimeout);\n          this._hideTimeout = null;\n        }\n        this._showUnderlay();\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressOut: event => {\n        if (this._hideTimeout == null) {\n          this._hideUnderlay();\n        }\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n    };\n  }\n\n  _createExtraStyles(): ExtraStyles {\n    return {\n      child: {opacity: this.props.activeOpacity ?? 0.85},\n      underlay: {\n        backgroundColor:\n          this.props.underlayColor === undefined\n            ? 'black'\n            : this.props.underlayColor,\n      },\n    };\n  }\n\n  _showUnderlay(): void {\n    if (!this._isMounted || !this._hasPressHandler()) {\n      return;\n    }\n    this.setState({extraStyles: this._createExtraStyles()});\n    if (this.props.onShowUnderlay != null) {\n      this.props.onShowUnderlay();\n    }\n  }\n\n  _hideUnderlay(): void {\n    if (this._hideTimeout != null) {\n      clearTimeout(this._hideTimeout);\n      this._hideTimeout = null;\n    }\n    if (this.props.testOnly_pressed === true) {\n      return;\n    }\n    if (this._hasPressHandler()) {\n      this.setState({extraStyles: null});\n      if (this.props.onHideUnderlay != null) {\n        this.props.onHideUnderlay();\n      }\n    }\n  }\n\n  _hasPressHandler(): boolean {\n    return (\n      this.props.onPress != null ||\n      this.props.onPressIn != null ||\n      this.props.onPressOut != null ||\n      this.props.onLongPress != null\n    );\n  }\n\n  render(): React.Node {\n    const child = React.Children.only<$FlowFixMe>(this.props.children);\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {onBlur, onFocus, ...eventHandlersWithoutBlurAndFocus} =\n      this.state.pressability.getEventHandlers();\n\n    const accessibilityState =\n      this.props.disabled != null\n        ? {\n            ...this.props.accessibilityState,\n            disabled: this.props.disabled,\n          }\n        : this.props.accessibilityState;\n\n    const accessibilityValue = {\n      max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,\n      min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,\n      now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,\n      text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text,\n    };\n\n    const accessibilityLiveRegion =\n      this.props['aria-live'] === 'off'\n        ? 'none'\n        : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;\n\n    const accessibilityLabel =\n      this.props['aria-label'] ?? this.props.accessibilityLabel;\n    return (\n      <View\n        accessible={this.props.accessible !== false}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={this.props.accessibilityHint}\n        accessibilityLanguage={this.props.accessibilityLanguage}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityState={accessibilityState}\n        accessibilityValue={accessibilityValue}\n        accessibilityActions={this.props.accessibilityActions}\n        onAccessibilityAction={this.props.onAccessibilityAction}\n        importantForAccessibility={\n          this.props['aria-hidden'] === true\n            ? 'no-hide-descendants'\n            : this.props.importantForAccessibility\n        }\n        accessibilityViewIsModal={\n          this.props['aria-modal'] ?? this.props.accessibilityViewIsModal\n        }\n        accessibilityLiveRegion={accessibilityLiveRegion}\n        accessibilityElementsHidden={\n          this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden\n        }\n        style={StyleSheet.compose(\n          this.props.style,\n          this.state.extraStyles?.underlay,\n        )}\n        onLayout={this.props.onLayout}\n        hitSlop={this.props.hitSlop}\n        hasTVPreferredFocus={this.props.hasTVPreferredFocus}\n        nextFocusDown={this.props.nextFocusDown}\n        nextFocusForward={this.props.nextFocusForward}\n        nextFocusLeft={this.props.nextFocusLeft}\n        nextFocusRight={this.props.nextFocusRight}\n        nextFocusUp={this.props.nextFocusUp}\n        focusable={\n          this.props.focusable !== false && this.props.onPress !== undefined\n        }\n        nativeID={this.props.id ?? this.props.nativeID}\n        testID={this.props.testID}\n        ref={this.props.hostRef}\n        {...eventHandlersWithoutBlurAndFocus}>\n        {React.cloneElement(child, {\n          style: StyleSheet.compose(\n            child.props.style,\n            this.state.extraStyles?.child,\n          ),\n        })}\n        {__DEV__ ? (\n          <PressabilityDebugView color=\"green\" hitSlop={this.props.hitSlop} />\n        ) : null}\n      </View>\n    );\n  }\n\n  componentDidMount(): void {\n    this._isMounted = true;\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentWillUnmount(): void {\n    this._isMounted = false;\n    if (this._hideTimeout != null) {\n      clearTimeout(this._hideTimeout);\n    }\n    this.state.pressability.reset();\n  }\n}\n\nconst Touchable: React.AbstractComponent<\n  $ReadOnly<$Diff<Props, {|hostRef: React.Ref<typeof View>|}>>,\n  React.ElementRef<typeof View>,\n> = React.forwardRef((props, hostRef) => (\n  <TouchableHighlight {...props} hostRef={hostRef} />\n));\n\nTouchable.displayName = 'TouchableHighlight';\n\nmodule.exports = Touchable;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback';\n\nimport View from '../../Components/View/View';\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport {findHostInstance_DEPRECATED} from '../../ReactNative/RendererProxy';\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport {Commands} from '../View/ViewNativeComponent';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n\n  /**\n   * Determines the type of background drawable that's going to be used to\n   * display feedback. It takes an object with `type` property and extra data\n   * depending on the `type`. It's recommended to use one of the static\n   * methods to generate that dictionary.\n   */\n  background?: ?(\n    | $ReadOnly<{|\n        type: 'ThemeAttrAndroid',\n        attribute:\n          | 'selectableItemBackground'\n          | 'selectableItemBackgroundBorderless',\n        rippleRadius: ?number,\n      |}>\n    | $ReadOnly<{|\n        type: 'RippleAndroid',\n        color: ?number,\n        borderless: boolean,\n        rippleRadius: ?number,\n      |}>\n  ),\n\n  /**\n   * TV preferred focus (see documentation for the View component).\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n   * TV next focus down (see documentation for the View component).\n   */\n  nextFocusDown?: ?number,\n\n  /**\n   * TV next focus forward (see documentation for the View component).\n   */\n  nextFocusForward?: ?number,\n\n  /**\n   * TV next focus left (see documentation for the View component).\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n   * TV next focus right (see documentation for the View component).\n   */\n  nextFocusRight?: ?number,\n\n  /**\n   * TV next focus up (see documentation for the View component).\n   */\n  nextFocusUp?: ?number,\n\n  /**\n   * Set to true to add the ripple effect to the foreground of the view, instead\n   * of the background. This is useful if one of your child views has a\n   * background of its own, or you're e.g. displaying images, and you don't want\n   * the ripple to be covered by them.\n   *\n   * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is\n   * only available on Android 6.0 and above. If you try to use this on older\n   * versions, this will fallback to background.\n   */\n  useForeground?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nclass TouchableNativeFeedback extends React.Component<Props, State> {\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for selectable elements.\n   */\n  static SelectableBackground: (rippleRadius: ?number) => $ReadOnly<{|\n    attribute: 'selectableItemBackground',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackground',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for borderless selectable elements. Requires API 21+.\n   */\n  static SelectableBackgroundBorderless: (rippleRadius: ?number) => $ReadOnly<{|\n    attribute: 'selectableItemBackgroundBorderless',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackgroundBorderless',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android ripple with\n   * the supplied color. If `borderless` is true, the ripple will render outside\n   * of the view bounds. Requires API 21+.\n   */\n  static Ripple: (\n    color: string,\n    borderless: boolean,\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    borderless: boolean,\n    color: ?number,\n    rippleRadius: ?number,\n    type: 'RippleAndroid',\n  |}> = (color: string, borderless: boolean, rippleRadius: ?number) => {\n    const processedColor = processColor(color);\n    invariant(\n      processedColor == null || typeof processedColor === 'number',\n      'Unexpected color given for Ripple color',\n    );\n    return {\n      type: 'RippleAndroid',\n      // $FlowFixMe[incompatible-type]\n      color: processedColor,\n      borderless,\n      rippleRadius,\n    };\n  };\n\n  /**\n   * Whether `useForeground` is supported.\n   */\n  static canUseNativeForeground: () => boolean = () =>\n    Platform.OS === 'android';\n\n  state: State = {\n    pressability: new Pressability(this._createPressabilityConfig()),\n  };\n\n  _createPressabilityConfig(): PressabilityConfig {\n    const accessibilityStateDisabled =\n      this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled;\n    return {\n      cancelable: !this.props.rejectResponderTermination,\n      disabled:\n        this.props.disabled != null\n          ? this.props.disabled\n          : accessibilityStateDisabled,\n      hitSlop: this.props.hitSlop,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: this.props.pressRetentionOffset,\n      android_disableSound: this.props.touchSoundDisabled,\n      onLongPress: this.props.onLongPress,\n      onPress: this.props.onPress,\n      onPressIn: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n          this._dispatchPressedStateChange(true);\n        }\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressMove: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n        }\n      },\n      onPressOut: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchPressedStateChange(false);\n        }\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n    };\n  }\n\n  _dispatchPressedStateChange(pressed: boolean): void {\n    if (Platform.OS === 'android') {\n      const hostComponentRef = findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.setPressed(hostComponentRef, pressed);\n      }\n    }\n  }\n\n  _dispatchHotspotUpdate(event: PressEvent): void {\n    if (Platform.OS === 'android') {\n      const {locationX, locationY} = event.nativeEvent;\n      const hostComponentRef = findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.hotspotUpdate(\n          hostComponentRef,\n          locationX ?? 0,\n          locationY ?? 0,\n        );\n      }\n    }\n  }\n\n  render(): React.Node {\n    const element = React.Children.only<$FlowFixMe>(this.props.children);\n    const children: Array<React.Node> = [element.props.children];\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"brown\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {onBlur, onFocus, ...eventHandlersWithoutBlurAndFocus} =\n      this.state.pressability.getEventHandlers();\n\n    let _accessibilityState = {\n      busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,\n      checked:\n        this.props['aria-checked'] ?? this.props.accessibilityState?.checked,\n      disabled:\n        this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,\n      expanded:\n        this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,\n      selected:\n        this.props['aria-selected'] ?? this.props.accessibilityState?.selected,\n    };\n\n    _accessibilityState =\n      this.props.disabled != null\n        ? {\n            ..._accessibilityState,\n            disabled: this.props.disabled,\n          }\n        : _accessibilityState;\n\n    const accessibilityValue = {\n      max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,\n      min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,\n      now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,\n      text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text,\n    };\n\n    const accessibilityLiveRegion =\n      this.props['aria-live'] === 'off'\n        ? 'none'\n        : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;\n\n    const accessibilityLabel =\n      this.props['aria-label'] ?? this.props.accessibilityLabel;\n    return React.cloneElement(\n      element,\n      {\n        ...eventHandlersWithoutBlurAndFocus,\n        ...getBackgroundProp(\n          this.props.background === undefined\n            ? TouchableNativeFeedback.SelectableBackground()\n            : this.props.background,\n          this.props.useForeground === true,\n        ),\n        accessible: this.props.accessible !== false,\n        accessibilityHint: this.props.accessibilityHint,\n        accessibilityLanguage: this.props.accessibilityLanguage,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: _accessibilityState,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        accessibilityValue: accessibilityValue,\n        importantForAccessibility:\n          this.props['aria-hidden'] === true\n            ? 'no-hide-descendants'\n            : this.props.importantForAccessibility,\n        accessibilityViewIsModal:\n          this.props['aria-modal'] ?? this.props.accessibilityViewIsModal,\n        accessibilityLiveRegion: accessibilityLiveRegion,\n        accessibilityElementsHidden:\n          this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,\n        hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n        hitSlop: this.props.hitSlop,\n        focusable:\n          this.props.focusable !== false &&\n          this.props.onPress !== undefined &&\n          !this.props.disabled,\n        nativeID: this.props.id ?? this.props.nativeID,\n        nextFocusDown: this.props.nextFocusDown,\n        nextFocusForward: this.props.nextFocusForward,\n        nextFocusLeft: this.props.nextFocusLeft,\n        nextFocusRight: this.props.nextFocusRight,\n        nextFocusUp: this.props.nextFocusUp,\n        onLayout: this.props.onLayout,\n        testID: this.props.testID,\n      },\n      ...children,\n    );\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentDidMount(): mixed {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentWillUnmount(): void {\n    this.state.pressability.reset();\n  }\n}\n\nconst getBackgroundProp =\n  Platform.OS === 'android'\n    ? /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      (background, useForeground: boolean) =>\n        useForeground && TouchableNativeFeedback.canUseNativeForeground()\n          ? {nativeForegroundAndroid: background}\n          : {nativeBackgroundAndroid: background}\n    : /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      (background, useForeground: boolean) => null;\n\nTouchableNativeFeedback.displayName = 'TouchableNativeFeedback';\n\nmodule.exports = TouchableNativeFeedback;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback';\n\nimport Animated from '../../Animated/Animated';\nimport Easing from '../../Animated/Easing';\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport Platform from '../../Utilities/Platform';\nimport * as React from 'react';\n\ntype TVProps = $ReadOnly<{|\n  hasTVPreferredFocus?: ?boolean,\n  nextFocusDown?: ?number,\n  nextFocusForward?: ?number,\n  nextFocusLeft?: ?number,\n  nextFocusRight?: ?number,\n  nextFocusUp?: ?number,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n  ...TVProps,\n\n  activeOpacity?: ?number,\n  style?: ?ViewStyleProp,\n\n  hostRef?: ?React.Ref<typeof Animated.View>,\n|}>;\n\ntype State = $ReadOnly<{|\n  anim: Animated.Value,\n  pressability: Pressability,\n|}>;\n\n/**\n * A wrapper for making views respond properly to touches.\n * On press down, the opacity of the wrapped view is decreased, dimming it.\n *\n * Opacity is controlled by wrapping the children in an Animated.View, which is\n * added to the view hierarchy.  Be aware that this can affect layout.\n *\n * Example:\n *\n * ```\n * renderButton: function() {\n *   return (\n *     <TouchableOpacity onPress={this._onPressButton}>\n *       <Image\n *         style={styles.button}\n *         source={require('./myButton.png')}\n *       />\n *     </TouchableOpacity>\n *   );\n * },\n * ```\n * ### Example\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react'\n * import {\n *   AppRegistry,\n *   StyleSheet,\n *   TouchableOpacity,\n *   Text,\n *   View,\n * } from 'react-native'\n *\n * class App extends Component {\n *   state = { count: 0 }\n *\n *   onPress = () => {\n *     this.setState(state => ({\n *       count: state.count + 1\n *     }));\n *   };\n *\n *  render() {\n *    return (\n *      <View style={styles.container}>\n *        <TouchableOpacity\n *          style={styles.button}\n *          onPress={this.onPress}>\n *          <Text> Touch Here </Text>\n *        </TouchableOpacity>\n *        <View style={[styles.countContainer]}>\n *          <Text style={[styles.countText]}>\n *             { this.state.count !== 0 ? this.state.count: null}\n *           </Text>\n *         </View>\n *       </View>\n *     )\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'center',\n *     paddingHorizontal: 10\n *   },\n *   button: {\n *     alignItems: 'center',\n *     backgroundColor: '#DDDDDD',\n *     padding: 10\n *   },\n *   countContainer: {\n *     alignItems: 'center',\n *     padding: 10\n *   },\n *   countText: {\n *     color: '#FF00FF'\n *   }\n * })\n *\n * AppRegistry.registerComponent('App', () => App)\n * ```\n *\n */\nclass TouchableOpacity extends React.Component<Props, State> {\n  state: State = {\n    anim: new Animated.Value(this._getChildStyleOpacityWithDefault()),\n    pressability: new Pressability(this._createPressabilityConfig()),\n  };\n\n  _createPressabilityConfig(): PressabilityConfig {\n    return {\n      cancelable: !this.props.rejectResponderTermination,\n      disabled:\n        this.props.disabled ??\n        this.props['aria-disabled'] ??\n        this.props.accessibilityState?.disabled,\n      hitSlop: this.props.hitSlop,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: this.props.pressRetentionOffset,\n      onBlur: event => {\n        if (Platform.isTV) {\n          this._opacityInactive(250);\n        }\n        if (this.props.onBlur != null) {\n          this.props.onBlur(event);\n        }\n      },\n      onFocus: event => {\n        if (Platform.isTV) {\n          this._opacityActive(150);\n        }\n        if (this.props.onFocus != null) {\n          this.props.onFocus(event);\n        }\n      },\n      onLongPress: this.props.onLongPress,\n      onPress: this.props.onPress,\n      onPressIn: event => {\n        this._opacityActive(\n          event.dispatchConfig.registrationName === 'onResponderGrant'\n            ? 0\n            : 150,\n        );\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressOut: event => {\n        this._opacityInactive(250);\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n    };\n  }\n\n  /**\n   * Animate the touchable to a new opacity.\n   */\n  _setOpacityTo(toValue: number, duration: number): void {\n    Animated.timing(this.state.anim, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true,\n    }).start();\n  }\n\n  _opacityActive(duration: number): void {\n    this._setOpacityTo(this.props.activeOpacity ?? 0.2, duration);\n  }\n\n  _opacityInactive(duration: number): void {\n    this._setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);\n  }\n\n  _getChildStyleOpacityWithDefault(): number {\n    // $FlowFixMe[underconstrained-implicit-instantiation]\n    // $FlowFixMe[prop-missing]\n    const opacity = flattenStyle(this.props.style)?.opacity;\n    return typeof opacity === 'number' ? opacity : 1;\n  }\n\n  render(): React.Node {\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {onBlur, onFocus, ...eventHandlersWithoutBlurAndFocus} =\n      this.state.pressability.getEventHandlers();\n\n    let _accessibilityState = {\n      busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,\n      checked:\n        this.props['aria-checked'] ?? this.props.accessibilityState?.checked,\n      disabled:\n        this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,\n      expanded:\n        this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,\n      selected:\n        this.props['aria-selected'] ?? this.props.accessibilityState?.selected,\n    };\n\n    _accessibilityState =\n      this.props.disabled != null\n        ? {\n            ..._accessibilityState,\n            disabled: this.props.disabled,\n          }\n        : _accessibilityState;\n\n    const accessibilityValue = {\n      max: this.props['aria-valuemax'] ?? this.props.accessibilityValue?.max,\n      min: this.props['aria-valuemin'] ?? this.props.accessibilityValue?.min,\n      now: this.props['aria-valuenow'] ?? this.props.accessibilityValue?.now,\n      text: this.props['aria-valuetext'] ?? this.props.accessibilityValue?.text,\n    };\n\n    const accessibilityLiveRegion =\n      this.props['aria-live'] === 'off'\n        ? 'none'\n        : this.props['aria-live'] ?? this.props.accessibilityLiveRegion;\n\n    const accessibilityLabel =\n      this.props['aria-label'] ?? this.props.accessibilityLabel;\n    return (\n      <Animated.View\n        accessible={this.props.accessible !== false}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={this.props.accessibilityHint}\n        accessibilityLanguage={this.props.accessibilityLanguage}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityState={_accessibilityState}\n        accessibilityActions={this.props.accessibilityActions}\n        onAccessibilityAction={this.props.onAccessibilityAction}\n        accessibilityValue={accessibilityValue}\n        importantForAccessibility={\n          this.props['aria-hidden'] === true\n            ? 'no-hide-descendants'\n            : this.props.importantForAccessibility\n        }\n        accessibilityViewIsModal={\n          this.props['aria-modal'] ?? this.props.accessibilityViewIsModal\n        }\n        accessibilityLiveRegion={accessibilityLiveRegion}\n        accessibilityElementsHidden={\n          this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden\n        }\n        style={[this.props.style, {opacity: this.state.anim}]}\n        nativeID={this.props.id ?? this.props.nativeID}\n        testID={this.props.testID}\n        onLayout={this.props.onLayout}\n        nextFocusDown={this.props.nextFocusDown}\n        nextFocusForward={this.props.nextFocusForward}\n        nextFocusLeft={this.props.nextFocusLeft}\n        nextFocusRight={this.props.nextFocusRight}\n        nextFocusUp={this.props.nextFocusUp}\n        hasTVPreferredFocus={this.props.hasTVPreferredFocus}\n        hitSlop={this.props.hitSlop}\n        focusable={\n          this.props.focusable !== false && this.props.onPress !== undefined\n        }\n        ref={this.props.hostRef}\n        {...eventHandlersWithoutBlurAndFocus}>\n        {this.props.children}\n        {__DEV__ ? (\n          <PressabilityDebugView color=\"cyan\" hitSlop={this.props.hitSlop} />\n        ) : null}\n      </Animated.View>\n    );\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    this.state.pressability.configure(this._createPressabilityConfig());\n    if (\n      this.props.disabled !== prevProps.disabled ||\n      // $FlowFixMe[underconstrained-implicit-instantiation]\n      // $FlowFixMe[prop-missing]\n      flattenStyle(prevProps.style)?.opacity !==\n        // $FlowFixMe[underconstrained-implicit-instantiation]\n        // $FlowFixMe[prop-missing]\n        flattenStyle(this.props.style)?.opacity\n    ) {\n      this._opacityInactive(250);\n    }\n  }\n\n  componentDidMount(): void {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentWillUnmount(): void {\n    this.state.pressability.reset();\n    this.state.anim.resetAnimation();\n  }\n}\n\nconst Touchable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof Animated.View>,\n> = React.forwardRef((props, ref) => (\n  <TouchableOpacity {...props} hostRef={ref} />\n));\n\nTouchable.displayName = 'TouchableOpacity';\n\nmodule.exports = Touchable;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../../Components/View/ViewAccessibility';\nimport type {EdgeInsetsOrSizeProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  LayoutEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\n\nimport View from '../../Components/View/View';\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityLanguage?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  'aria-valuemax'?: AccessibilityValue['max'],\n  'aria-valuemin'?: AccessibilityValue['min'],\n  'aria-valuenow'?: AccessibilityValue['now'],\n  'aria-valuetext'?: AccessibilityValue['text'],\n  accessibilityViewIsModal?: ?boolean,\n  'aria-modal'?: ?boolean,\n  accessible?: ?boolean,\n  /**\n   * alias for accessibilityState\n   *\n   * see https://reactnative.dev/docs/accessibility#accessibilitystate\n   */\n  'aria-busy'?: ?boolean,\n  'aria-checked'?: ?boolean | 'mixed',\n  'aria-disabled'?: ?boolean,\n  'aria-expanded'?: ?boolean,\n  'aria-selected'?: ?boolean,\n  'aria-hidden'?: ?boolean,\n  'aria-live'?: ?('polite' | 'assertive' | 'off'),\n  'aria-label'?: ?Stringish,\n  children?: ?React.Node,\n  delayLongPress?: ?number,\n  delayPressIn?: ?number,\n  delayPressOut?: ?number,\n  disabled?: ?boolean,\n  focusable?: ?boolean,\n  hitSlop?: ?EdgeInsetsOrSizeProp,\n  id?: string,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  nativeID?: ?string,\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n  onBlur?: ?(event: BlurEvent) => mixed,\n  onFocus?: ?(event: FocusEvent) => mixed,\n  onLayout?: ?(event: LayoutEvent) => mixed,\n  onLongPress?: ?(event: PressEvent) => mixed,\n  onPress?: ?(event: PressEvent) => mixed,\n  onPressIn?: ?(event: PressEvent) => mixed,\n  onPressOut?: ?(event: PressEvent) => mixed,\n  pressRetentionOffset?: ?EdgeInsetsOrSizeProp,\n  rejectResponderTermination?: ?boolean,\n  testID?: ?string,\n  touchSoundDisabled?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nconst PASSTHROUGH_PROPS = [\n  'accessibilityActions',\n  'accessibilityElementsHidden',\n  'accessibilityHint',\n  'accessibilityLanguage',\n  'accessibilityIgnoresInvertColors',\n  'accessibilityLabel',\n  'accessibilityLiveRegion',\n  'accessibilityRole',\n  'accessibilityValue',\n  'aria-valuemax',\n  'aria-valuemin',\n  'aria-valuenow',\n  'aria-valuetext',\n  'accessibilityViewIsModal',\n  'aria-modal',\n  'hitSlop',\n  'importantForAccessibility',\n  'nativeID',\n  'onAccessibilityAction',\n  'onBlur',\n  'onFocus',\n  'onLayout',\n  'testID',\n];\n\nclass TouchableWithoutFeedback extends React.Component<Props, State> {\n  state: State = {\n    pressability: new Pressability(createPressabilityConfig(this.props)),\n  };\n\n  render(): React.Node {\n    const element = React.Children.only<$FlowFixMe>(this.props.children);\n    const children: Array<React.Node> = [element.props.children];\n    const ariaLive = this.props['aria-live'];\n\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"red\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    let _accessibilityState = {\n      busy: this.props['aria-busy'] ?? this.props.accessibilityState?.busy,\n      checked:\n        this.props['aria-checked'] ?? this.props.accessibilityState?.checked,\n      disabled:\n        this.props['aria-disabled'] ?? this.props.accessibilityState?.disabled,\n      expanded:\n        this.props['aria-expanded'] ?? this.props.accessibilityState?.expanded,\n      selected:\n        this.props['aria-selected'] ?? this.props.accessibilityState?.selected,\n    };\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {onBlur, onFocus, ...eventHandlersWithoutBlurAndFocus} =\n      this.state.pressability.getEventHandlers();\n\n    const elementProps: {[string]: mixed, ...} = {\n      ...eventHandlersWithoutBlurAndFocus,\n      accessible: this.props.accessible !== false,\n      accessibilityState:\n        this.props.disabled != null\n          ? {\n              ..._accessibilityState,\n              disabled: this.props.disabled,\n            }\n          : _accessibilityState,\n      focusable:\n        this.props.focusable !== false && this.props.onPress !== undefined,\n\n      accessibilityElementsHidden:\n        this.props['aria-hidden'] ?? this.props.accessibilityElementsHidden,\n      importantForAccessibility:\n        this.props['aria-hidden'] === true\n          ? 'no-hide-descendants'\n          : this.props.importantForAccessibility,\n      accessibilityLiveRegion:\n        ariaLive === 'off'\n          ? 'none'\n          : ariaLive ?? this.props.accessibilityLiveRegion,\n      nativeID: this.props.id ?? this.props.nativeID,\n    };\n    for (const prop of PASSTHROUGH_PROPS) {\n      if (this.props[prop] !== undefined) {\n        elementProps[prop] = this.props[prop];\n      }\n    }\n\n    // $FlowFixMe[incompatible-call]\n    return React.cloneElement(element, elementProps, ...children);\n  }\n\n  componentDidUpdate(): void {\n    this.state.pressability.configure(createPressabilityConfig(this.props));\n  }\n\n  componentDidMount(): mixed {\n    this.state.pressability.configure(createPressabilityConfig(this.props));\n  }\n\n  componentWillUnmount(): void {\n    this.state.pressability.reset();\n  }\n}\n\nfunction createPressabilityConfig({\n  'aria-disabled': ariaDisabled,\n  ...props\n}: Props): PressabilityConfig {\n  const accessibilityStateDisabled =\n    ariaDisabled ?? props.accessibilityState?.disabled;\n  return {\n    cancelable: !props.rejectResponderTermination,\n    disabled:\n      props.disabled !== null ? props.disabled : accessibilityStateDisabled,\n    hitSlop: props.hitSlop,\n    delayLongPress: props.delayLongPress,\n    delayPressIn: props.delayPressIn,\n    delayPressOut: props.delayPressOut,\n    minPressDuration: 0,\n    pressRectOffset: props.pressRetentionOffset,\n    android_disableSound: props.touchSoundDisabled,\n    onBlur: props.onBlur,\n    onFocus: props.onFocus,\n    onLongPress: props.onLongPress,\n    onPress: props.onPress,\n    onPressIn: props.onPressIn,\n    onPressOut: props.onPressOut,\n  };\n}\n\nTouchableWithoutFeedback.displayName = 'TouchableWithoutFeedback';\n\nmodule.exports = TouchableWithoutFeedback;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format strict-local\n * @flow strict-local\n */\n\nimport type {AnyAttributeType} from '../../Renderer/shims/ReactNativeTypes';\n\nimport processAspectRatio from '../../StyleSheet/processAspectRatio';\nimport processColor from '../../StyleSheet/processColor';\nimport processFontVariant from '../../StyleSheet/processFontVariant';\nimport processTransform from '../../StyleSheet/processTransform';\nimport processTransformOrigin from '../../StyleSheet/processTransformOrigin';\nimport sizesDiffer from '../../Utilities/differ/sizesDiffer';\n\nconst colorAttributes = {process: processColor};\n\nconst ReactNativeStyleAttributes: {[string]: AnyAttributeType, ...} = {\n  /**\n   * Layout\n   */\n  alignContent: true,\n  alignItems: true,\n  alignSelf: true,\n  aspectRatio: {process: processAspectRatio},\n  borderBottomWidth: true,\n  borderEndWidth: true,\n  borderLeftWidth: true,\n  borderRightWidth: true,\n  borderStartWidth: true,\n  borderTopWidth: true,\n  columnGap: true,\n  borderWidth: true,\n  bottom: true,\n  direction: true,\n  display: true,\n  end: true,\n  flex: true,\n  flexBasis: true,\n  flexDirection: true,\n  flexGrow: true,\n  flexShrink: true,\n  flexWrap: true,\n  gap: true,\n  height: true,\n  inset: true,\n  insetBlock: true,\n  insetBlockEnd: true,\n  insetBlockStart: true,\n  insetInline: true,\n  insetInlineEnd: true,\n  insetInlineStart: true,\n  justifyContent: true,\n  left: true,\n  margin: true,\n  marginBlock: true,\n  marginBlockEnd: true,\n  marginBlockStart: true,\n  marginBottom: true,\n  marginEnd: true,\n  marginHorizontal: true,\n  marginInline: true,\n  marginInlineEnd: true,\n  marginInlineStart: true,\n  marginLeft: true,\n  marginRight: true,\n  marginStart: true,\n  marginTop: true,\n  marginVertical: true,\n  maxHeight: true,\n  maxWidth: true,\n  minHeight: true,\n  minWidth: true,\n  overflow: true,\n  padding: true,\n  paddingBlock: true,\n  paddingBlockEnd: true,\n  paddingBlockStart: true,\n  paddingBottom: true,\n  paddingEnd: true,\n  paddingHorizontal: true,\n  paddingInline: true,\n  paddingInlineEnd: true,\n  paddingInlineStart: true,\n  paddingLeft: true,\n  paddingRight: true,\n  paddingStart: true,\n  paddingTop: true,\n  paddingVertical: true,\n  position: true,\n  right: true,\n  rowGap: true,\n  start: true,\n  top: true,\n  width: true,\n  zIndex: true,\n\n  /**\n   * Shadow\n   */\n  elevation: true,\n  shadowColor: colorAttributes,\n  shadowOffset: {diff: sizesDiffer},\n  shadowOpacity: true,\n  shadowRadius: true,\n\n  /**\n   * Transform\n   */\n  transform: {process: processTransform},\n  transformOrigin: {process: processTransformOrigin},\n\n  /**\n   * View\n   */\n  backfaceVisibility: true,\n  backgroundColor: colorAttributes,\n  borderBlockColor: colorAttributes,\n  borderBlockEndColor: colorAttributes,\n  borderBlockStartColor: colorAttributes,\n  borderBottomColor: colorAttributes,\n  borderBottomEndRadius: true,\n  borderBottomLeftRadius: true,\n  borderBottomRightRadius: true,\n  borderBottomStartRadius: true,\n  borderColor: colorAttributes,\n  borderCurve: true,\n  borderEndColor: colorAttributes,\n  borderEndEndRadius: true,\n  borderEndStartRadius: true,\n  borderLeftColor: colorAttributes,\n  borderRadius: true,\n  borderRightColor: colorAttributes,\n  borderStartColor: colorAttributes,\n  borderStartEndRadius: true,\n  borderStartStartRadius: true,\n  borderStyle: true,\n  borderTopColor: colorAttributes,\n  borderTopEndRadius: true,\n  borderTopLeftRadius: true,\n  borderTopRightRadius: true,\n  borderTopStartRadius: true,\n  cursor: true,\n  opacity: true,\n  pointerEvents: true,\n\n  /**\n   * Text\n   */\n  color: colorAttributes,\n  fontFamily: true,\n  fontSize: true,\n  fontStyle: true,\n  fontVariant: {process: processFontVariant},\n  fontWeight: true,\n  includeFontPadding: true,\n  letterSpacing: true,\n  lineHeight: true,\n  textAlign: true,\n  textAlignVertical: true,\n  textDecorationColor: colorAttributes,\n  textDecorationLine: true,\n  textDecorationStyle: true,\n  textShadowColor: colorAttributes,\n  textShadowOffset: true,\n  textShadowRadius: true,\n  textTransform: true,\n  userSelect: true,\n  verticalAlign: true,\n  writingDirection: true,\n\n  /**\n   * Image\n   */\n  overlayColor: colorAttributes,\n  resizeMode: true,\n  tintColor: colorAttributes,\n  objectFit: true,\n};\n\nmodule.exports = ReactNativeStyleAttributes;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ViewProps} from './ViewPropTypes';\n\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport TextAncestor from '../../Text/TextAncestor';\nimport ViewNativeComponent from './ViewNativeComponent';\nimport * as React from 'react';\n\nexport type Props = ViewProps;\n\n/**\n * The most fundamental component for building a UI, View is a container that\n * supports layout with flexbox, style, some touch handling, and accessibility\n * controls.\n *\n * @see https://reactnative.dev/docs/view\n */\nconst View: React.AbstractComponent<\n  ViewProps,\n  React.ElementRef<typeof ViewNativeComponent>,\n> = React.forwardRef(\n  (\n    {\n      accessibilityElementsHidden,\n      accessibilityLabel,\n      accessibilityLabelledBy,\n      accessibilityLiveRegion,\n      accessibilityState,\n      accessibilityValue,\n      'aria-busy': ariaBusy,\n      'aria-checked': ariaChecked,\n      'aria-disabled': ariaDisabled,\n      'aria-expanded': ariaExpanded,\n      'aria-hidden': ariaHidden,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-live': ariaLive,\n      'aria-selected': ariaSelected,\n      'aria-valuemax': ariaValueMax,\n      'aria-valuemin': ariaValueMin,\n      'aria-valuenow': ariaValueNow,\n      'aria-valuetext': ariaValueText,\n      focusable,\n      id,\n      importantForAccessibility,\n      nativeID,\n      pointerEvents,\n      tabIndex,\n      ...otherProps\n    }: ViewProps,\n    forwardedRef,\n  ) => {\n    const hasTextAncestor = React.useContext(TextAncestor);\n    const _accessibilityLabelledBy =\n      ariaLabelledBy?.split(/\\s*,\\s*/g) ?? accessibilityLabelledBy;\n\n    let _accessibilityState;\n    if (\n      accessibilityState != null ||\n      ariaBusy != null ||\n      ariaChecked != null ||\n      ariaDisabled != null ||\n      ariaExpanded != null ||\n      ariaSelected != null\n    ) {\n      _accessibilityState = {\n        busy: ariaBusy ?? accessibilityState?.busy,\n        checked: ariaChecked ?? accessibilityState?.checked,\n        disabled: ariaDisabled ?? accessibilityState?.disabled,\n        expanded: ariaExpanded ?? accessibilityState?.expanded,\n        selected: ariaSelected ?? accessibilityState?.selected,\n      };\n    }\n    let _accessibilityValue;\n    if (\n      accessibilityValue != null ||\n      ariaValueMax != null ||\n      ariaValueMin != null ||\n      ariaValueNow != null ||\n      ariaValueText != null\n    ) {\n      _accessibilityValue = {\n        max: ariaValueMax ?? accessibilityValue?.max,\n        min: ariaValueMin ?? accessibilityValue?.min,\n        now: ariaValueNow ?? accessibilityValue?.now,\n        text: ariaValueText ?? accessibilityValue?.text,\n      };\n    }\n\n    // $FlowFixMe[underconstrained-implicit-instantiation]\n    let style = flattenStyle(otherProps.style);\n\n    // $FlowFixMe[sketchy-null-mixed]\n    const newPointerEvents = style?.pointerEvents || pointerEvents;\n\n    const actualView = (\n      <ViewNativeComponent\n        {...otherProps}\n        accessibilityLiveRegion={\n          ariaLive === 'off' ? 'none' : ariaLive ?? accessibilityLiveRegion\n        }\n        accessibilityLabel={ariaLabel ?? accessibilityLabel}\n        focusable={tabIndex !== undefined ? !tabIndex : focusable}\n        accessibilityState={_accessibilityState}\n        accessibilityElementsHidden={ariaHidden ?? accessibilityElementsHidden}\n        accessibilityLabelledBy={_accessibilityLabelledBy}\n        accessibilityValue={_accessibilityValue}\n        importantForAccessibility={\n          ariaHidden === true\n            ? 'no-hide-descendants'\n            : importantForAccessibility\n        }\n        nativeID={id ?? nativeID}\n        style={style}\n        // $FlowFixMe[incompatible-type]\n        pointerEvents={newPointerEvents}\n        ref={forwardedRef}\n      />\n    );\n\n    if (hasTextAncestor) {\n      return (\n        <TextAncestor.Provider value={false}>\n          {actualView}\n        </TextAncestor.Provider>\n      );\n    }\n\n    return actualView;\n  },\n);\n\nView.displayName = 'View';\n\nmodule.exports = View;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\n\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport Platform from '../../Utilities/Platform';\nimport {type ViewProps as Props} from './ViewPropTypes';\nimport * as React from 'react';\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig =\n  Platform.OS === 'android'\n    ? {\n        uiViewClassName: 'RCTView',\n        validAttributes: {\n          // ReactClippingViewManager @ReactProps\n          removeClippedSubviews: true,\n\n          // ReactViewManager @ReactProps\n          accessible: true,\n          hasTVPreferredFocus: true,\n          nextFocusDown: true,\n          nextFocusForward: true,\n          nextFocusLeft: true,\n          nextFocusRight: true,\n          nextFocusUp: true,\n\n          borderRadius: true,\n          borderTopLeftRadius: true,\n          borderTopRightRadius: true,\n          borderBottomRightRadius: true,\n          borderBottomLeftRadius: true,\n          borderTopStartRadius: true,\n          borderTopEndRadius: true,\n          borderBottomStartRadius: true,\n          borderBottomEndRadius: true,\n          borderEndEndRadius: true,\n          borderEndStartRadius: true,\n          borderStartEndRadius: true,\n          borderStartStartRadius: true,\n          borderStyle: true,\n          hitSlop: true,\n          pointerEvents: true,\n          nativeBackgroundAndroid: true,\n          nativeForegroundAndroid: true,\n          needsOffscreenAlphaCompositing: true,\n\n          borderWidth: true,\n          borderLeftWidth: true,\n          borderRightWidth: true,\n          borderTopWidth: true,\n          borderBottomWidth: true,\n          borderStartWidth: true,\n          borderEndWidth: true,\n\n          borderColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderLeftColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderRightColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderTopColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderBottomColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderStartColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderEndColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderBlockColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderBlockEndColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n          borderBlockStartColor: {\n            process: require('../../StyleSheet/processColor').default,\n          },\n\n          focusable: true,\n          overflow: true,\n          backfaceVisibility: true,\n          experimental_layoutConformance: true,\n        },\n      }\n    : {\n        uiViewClassName: 'RCTView',\n      };\n\nconst ViewNativeComponent: HostComponent<Props> =\n  NativeComponentRegistry.get<Props>('RCTView', () => __INTERNAL_VIEW_CONFIG);\n\ninterface NativeCommands {\n  +hotspotUpdate: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    x: number,\n    y: number,\n  ) => void;\n  +setPressed: (\n    viewRef: React.ElementRef<HostComponent<mixed>>,\n    pressed: boolean,\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['hotspotUpdate', 'setPressed'],\n});\n\nexport default ViewNativeComponent;\n\nexport type ViewNativeComponentType = HostComponent<Props>;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport NativeSourceCode from '../../NativeModules/specs/NativeSourceCode';\n\nlet _cachedDevServerURL: ?string;\nlet _cachedFullBundleURL: ?string;\nconst FALLBACK = 'http://localhost:8081/';\n\ntype DevServerInfo = {\n  url: string,\n  fullBundleUrl: ?string,\n  bundleLoadedFromServer: boolean,\n  ...\n};\n\n/**\n * Many RN development tools rely on the development server (packager) running\n * @return URL to packager with trailing slash\n */\nfunction getDevServer(): DevServerInfo {\n  if (_cachedDevServerURL === undefined) {\n    const scriptUrl = NativeSourceCode.getConstants().scriptURL;\n    const match = scriptUrl.match(/^https?:\\/\\/.*?\\//);\n    _cachedDevServerURL = match ? match[0] : null;\n    _cachedFullBundleURL = match ? scriptUrl : null;\n  }\n\n  return {\n    url: _cachedDevServerURL ?? FALLBACK,\n    fullBundleUrl: _cachedFullBundleURL,\n    bundleLoadedFromServer: _cachedDevServerURL !== null,\n  };\n}\n\nmodule.exports = getDevServer;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {StackFrame} from '../NativeExceptionsManager';\nimport type {HermesParsedStack} from './parseHermesStack';\n\nconst parseHermesStack = require('./parseHermesStack');\n\nfunction convertHermesStack(stack: HermesParsedStack): Array<StackFrame> {\n  const frames: Array<StackFrame> = [];\n  for (const entry of stack.entries) {\n    if (entry.type !== 'FRAME') {\n      continue;\n    }\n    const {location, functionName} = entry;\n    if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {\n      continue;\n    }\n    frames.push({\n      methodName: functionName,\n      file: location.sourceUrl,\n      lineNumber: location.line1Based,\n      column:\n        location.type === 'SOURCE'\n          ? location.column1Based - 1\n          : location.virtualOffset0Based,\n    });\n  }\n  return frames;\n}\n\nfunction parseErrorStack(errorStack?: string): Array<StackFrame> {\n  if (errorStack == null) {\n    return [];\n  }\n\n  const stacktraceParser = require('stacktrace-parser');\n  const parsedStack = Array.isArray(errorStack)\n    ? errorStack\n    : global.HermesInternal\n    ? convertHermesStack(parseHermesStack(errorStack))\n    : stacktraceParser.parse(errorStack).map((frame): StackFrame => ({\n        ...frame,\n        column: frame.column != null ? frame.column - 1 : null,\n      }));\n\n  return parsedStack;\n}\n\nmodule.exports = parseErrorStack;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\ntype HermesStackLocationNative = $ReadOnly<{\n  type: 'NATIVE',\n}>;\n\ntype HermesStackLocationSource = $ReadOnly<{\n  type: 'SOURCE',\n  sourceUrl: string,\n  line1Based: number,\n  column1Based: number,\n}>;\n\ntype HermesStackLocationInternalBytecode = $ReadOnly<{\n  type: 'INTERNAL_BYTECODE',\n  sourceUrl: string,\n  line1Based: number,\n  virtualOffset0Based: number,\n}>;\n\ntype HermesStackLocationBytecode = $ReadOnly<{\n  type: 'BYTECODE',\n  sourceUrl: string,\n  line1Based: number,\n  virtualOffset0Based: number,\n}>;\n\ntype HermesStackLocation =\n  | HermesStackLocationNative\n  | HermesStackLocationSource\n  | HermesStackLocationInternalBytecode\n  | HermesStackLocationBytecode;\n\ntype HermesStackEntryFrame = $ReadOnly<{\n  type: 'FRAME',\n  location: HermesStackLocation,\n  functionName: string,\n}>;\n\ntype HermesStackEntrySkipped = $ReadOnly<{\n  type: 'SKIPPED',\n  count: number,\n}>;\n\ntype HermesStackEntry = HermesStackEntryFrame | HermesStackEntrySkipped;\n\nexport type HermesParsedStack = $ReadOnly<{\n  message: string,\n  entries: $ReadOnlyArray<HermesStackEntry>,\n}>;\n\n// Capturing groups:\n// 1. function name\n// 2. is this a native stack frame?\n// 3. is this a bytecode address or a source location?\n// 4. source URL (filename)\n// 5. line number (1 based)\n// 6. column number (1 based) or virtual offset (0 based)\nconst RE_FRAME =\n  /^ {4}at (.+?)(?: \\((native)\\)?| \\((address at )?(.*?):(\\d+):(\\d+)\\))$/;\n\n// Capturing groups:\n// 1. count of skipped frames\nconst RE_SKIPPED = /^ {4}... skipping (\\d+) frames$/;\n\nfunction isInternalBytecodeSourceUrl(sourceUrl: string): boolean {\n  // See https://github.com/facebook/hermes/blob/3332fa020cae0bab751f648db7c94e1d687eeec7/lib/VM/Runtime.cpp#L1100\n  return sourceUrl === 'InternalBytecode.js';\n}\n\nfunction parseLine(line: string): ?HermesStackEntry {\n  const asFrame = line.match(RE_FRAME);\n  if (asFrame) {\n    return {\n      type: 'FRAME',\n      functionName: asFrame[1],\n      location:\n        asFrame[2] === 'native'\n          ? {type: 'NATIVE'}\n          : asFrame[3] === 'address at '\n          ? isInternalBytecodeSourceUrl(asFrame[4])\n            ? {\n                type: 'INTERNAL_BYTECODE',\n                sourceUrl: asFrame[4],\n                line1Based: Number.parseInt(asFrame[5], 10),\n                virtualOffset0Based: Number.parseInt(asFrame[6], 10),\n              }\n            : {\n                type: 'BYTECODE',\n                sourceUrl: asFrame[4],\n                line1Based: Number.parseInt(asFrame[5], 10),\n                virtualOffset0Based: Number.parseInt(asFrame[6], 10),\n              }\n          : {\n              type: 'SOURCE',\n              sourceUrl: asFrame[4],\n              line1Based: Number.parseInt(asFrame[5], 10),\n              column1Based: Number.parseInt(asFrame[6], 10),\n            },\n    };\n  }\n  const asSkipped = line.match(RE_SKIPPED);\n  if (asSkipped) {\n    return {\n      type: 'SKIPPED',\n      count: Number.parseInt(asSkipped[1], 10),\n    };\n  }\n}\n\nmodule.exports = function parseHermesStack(stack: string): HermesParsedStack {\n  const lines = stack.split(/\\n/);\n  let entries: Array<HermesStackEntryFrame | HermesStackEntrySkipped> = [];\n  let lastMessageLine = -1;\n  for (let i = 0; i < lines.length; ++i) {\n    const line = lines[i];\n    if (!line) {\n      continue;\n    }\n    const entry = parseLine(line);\n    if (entry) {\n      entries.push(entry);\n      continue;\n    }\n    // No match - we're still in the message\n    lastMessageLine = i;\n    entries = [];\n  }\n  const message = lines.slice(0, lastMessageLine + 1).join('\\n');\n  return {message, entries};\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {ExtendedError} from './ExtendedError';\nimport type {ExceptionData} from './NativeExceptionsManager';\n\nclass SyntheticError extends Error {\n  name: string = '';\n}\n\ntype ExceptionDecorator = ExceptionData => ExceptionData;\n\nlet userExceptionDecorator: ?ExceptionDecorator;\nlet inUserExceptionDecorator = false;\n\n// This Symbol is used to decorate an ExtendedError with extra data in select usecases.\n// Note that data passed using this method should be strictly contained,\n// as data that's not serializable/too large may cause issues with passing the error to the native code.\nconst decoratedExtraDataKey: symbol = Symbol('decoratedExtraDataKey');\n\n/**\n * Allows the app to add information to the exception report before it is sent\n * to native. This API is not final.\n */\n\nfunction unstable_setExceptionDecorator(\n  exceptionDecorator: ?ExceptionDecorator,\n) {\n  userExceptionDecorator = exceptionDecorator;\n}\n\nfunction preprocessException(data: ExceptionData): ExceptionData {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n    try {\n      return userExceptionDecorator(data);\n    } catch {\n      // Fall through\n    } finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n  return data;\n}\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(\n  e: ExtendedError,\n  isFatal: boolean,\n  reportToConsole: boolean, // only true when coming from handleException; the error has not yet been logged\n) {\n  const parseErrorStack = require('./Devtools/parseErrorStack');\n  const stack = parseErrorStack(e?.stack);\n  const currentExceptionID = ++exceptionID;\n  const originalMessage = e.message || '';\n  let message = originalMessage;\n  if (e.componentStack != null) {\n    message += `\\n\\nThis error is located at:${e.componentStack}`;\n  }\n  const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n\n  if (!message.startsWith(namePrefix)) {\n    message = namePrefix + message;\n  }\n\n  message =\n    e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n\n  // $FlowFixMe[unclear-type]\n  const extraData: Object = {\n    // $FlowFixMe[incompatible-use] we can't define a type with a Symbol-keyed field in flow\n    ...e[decoratedExtraDataKey],\n    jsEngine: e.jsEngine,\n    rawStack: e.stack,\n  };\n  if (e.cause != null && typeof e.cause === 'object') {\n    extraData.stackSymbols = e.cause.stackSymbols;\n    extraData.stackReturnAddresses = e.cause.stackReturnAddresses;\n    extraData.stackElements = e.cause.stackElements;\n  }\n\n  const data = preprocessException({\n    message,\n    originalMessage: message === originalMessage ? null : originalMessage,\n    name: e.name == null || e.name === '' ? null : e.name,\n    componentStack:\n      typeof e.componentStack === 'string' ? e.componentStack : null,\n    stack,\n    id: currentExceptionID,\n    isFatal,\n    extraData,\n  });\n\n  if (reportToConsole) {\n    // we feed back into console.error, to make sure any methods that are\n    // monkey patched on top of console.error are called when coming from\n    // handleException\n    console.error(data.message);\n  }\n\n  if (__DEV__) {\n    const LogBox = require('../LogBox/LogBox').default;\n    LogBox.addException({\n      ...data,\n      isComponentError: !!e.isComponentError,\n    });\n  } else if (isFatal || e.type !== 'warn') {\n    const NativeExceptionsManager =\n      require('./NativeExceptionsManager').default;\n    if (NativeExceptionsManager) {\n      NativeExceptionsManager.reportException(data);\n    }\n  }\n}\n\ndeclare var console: {\n  error: typeof console.error,\n  _errorOriginal: typeof console.error,\n  reportErrorsAsExceptions: boolean,\n  ...\n};\n\n// If we trigger console.error _from_ handleException,\n// we do want to make sure that console.error doesn't trigger error reporting again\nlet inExceptionHandler = false;\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: mixed, isFatal: boolean) {\n  let error: Error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    // Workaround for reporting errors caused by `throw 'some string'`\n    // Unfortunately there is no way to figure out the stacktrace in this\n    // case, so if you ended up here trying to trace an error, look for\n    // `throw '<error message>'` somewhere in your codebase.\n    error = new SyntheticError(e);\n  }\n  try {\n    inExceptionHandler = true;\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for this\n     * parameters */\n    reportException(error, isFatal, /*reportToConsole*/ true);\n  } finally {\n    inExceptionHandler = false;\n  }\n}\n\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction reactConsoleErrorHandler(...args) {\n  // bubble up to any original handlers\n  console._errorOriginal(...args);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n  if (inExceptionHandler) {\n    // The fundamental trick here is that are multiple entry point to logging errors:\n    // (see D19743075 for more background)\n    //\n    // 1. An uncaught exception being caught by the global handler\n    // 2. An error being logged throw console.error\n    //\n    // However, console.error is monkey patched multiple times: by this module, and by the\n    // DevTools setup that sends messages to Metro.\n    // The patching order cannot be relied upon.\n    //\n    // So, some scenarios that are handled by this flag:\n    //\n    // Logging an error:\n    // 1. console.error called from user code\n    // 2. (possibly) arrives _first_ at DevTool handler, send to Metro\n    // 3. Bubbles to here\n    // 4. goes into report Exception.\n    // 5. should not trigger console.error again, to avoid looping / logging twice\n    // 6. should still bubble up to original console\n    //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)\n    //\n    // Throwing an uncaught exception:\n    // 1. exception thrown\n    // 2. picked up by handleException\n    // 3. should be sent to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)\n    // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here\n    //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)\n    // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)\n    return;\n  }\n\n  let error;\n\n  const firstArg = args[0];\n  if (firstArg?.stack) {\n    // reportException will console.error this with high enough fidelity.\n    error = firstArg;\n  } else {\n    const stringifySafe = require('../Utilities/stringifySafe').default;\n    if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const message = args\n      .map(arg => (typeof arg === 'string' ? arg : stringifySafe(arg)))\n      .join(' ');\n\n    error = new SyntheticError(message);\n    error.name = 'console.error';\n  }\n\n  reportException(\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for this\n     * parameters */\n    error,\n    false, // isFatal\n    false, // reportToConsole\n  );\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {\n  decoratedExtraDataKey,\n  handleException,\n  installConsoleErrorReporter,\n  SyntheticError,\n  unstable_setExceptionDecorator,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n/**\n * Sets up global variables typical in most JavaScript environments.\n *\n *   1. Global timers (via `setTimeout` etc).\n *   2. Global console object.\n *   3. Hooks for printing stack traces with source maps.\n *\n * Leaves enough room in the environment for implementing your own:\n *\n *   1. Require system.\n *   2. Bridged modules.\n *\n */\n\n'use strict';\n\nconst start = Date.now();\n\nrequire('./setUpGlobals');\nrequire('../../src/private/core/setUpDOM');\nrequire('./setUpPerformance');\nrequire('./setUpErrorHandling');\nrequire('./polyfillPromise');\nrequire('./setUpRegeneratorRuntime');\nrequire('./setUpTimers');\nrequire('./setUpXHR');\nrequire('./setUpAlert');\nrequire('./setUpNavigator');\nrequire('./setUpBatchedBridge');\nrequire('./setUpSegmentFetcher');\nif (__DEV__) {\n  require('./checkNativeVersion');\n  require('./setUpDeveloperTools');\n  require('../LogBox/LogBox').default.install();\n}\n\nrequire('../ReactNative/AppRegistry');\n\nconst GlobalPerformanceLogger = require('../Utilities/GlobalPerformanceLogger');\n// We could just call GlobalPerformanceLogger.markPoint at the top of the file,\n// but then we'd be excluding the time it took to require the logger.\n// Instead, we just use Date.now and backdate the timestamp.\nGlobalPerformanceLogger.markPoint(\n  'initializeCore_start',\n  GlobalPerformanceLogger.currentTimestamp() - (Date.now() - start),\n);\nGlobalPerformanceLogger.markPoint('initializeCore_end');\n"],"names":["_NativeClipboard","_interopRequireDefault","require","module","exports","getString","NativeClipboard","setString","content","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","WeakMap","keys","forEach","key","prototype","_exportNames","enumerable","_AndroidDrawerLayoutNativeComponent","AndroidDrawerLayoutNativeComponent","_StyleSheet","_dismissKeyboard","_StatusBar","_View","_nullthrows","React","_jsxRuntime","_excluded","_callSuper","o","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","valueOf","DRAWER_STATES","DrawerLayoutAndroid","_React$Component","_this","_classCallCheck2","_len","arguments","length","args","Array","_key","concat","_nativeRef","createRef","state","statusBarBackgroundColor","_onDrawerSlide","event","props","onDrawerSlide","keyboardDismissMode","dismissKeyboard","_onDrawerOpen","onDrawerOpen","_onDrawerClose","onDrawerClose","_onDrawerStateChanged","onDrawerStateChanged","nativeEvent","drawerState","_inherits2","_createClass2","value","_this$props","this","_this$props$drawerBac","drawerBackgroundColor","renderNavigationView","_objectWithoutProperties2","drawStatusBar","drawerViewWrapper","jsxs","style","styles","drawerSubview","width","drawerWidth","backgroundColor","collapsable","children","jsx","drawerStatusBar","childrenWrapper","mainSubview","translucent","statusBar","assign","ref","drawerPosition","drawerLockMode","base","Commands","openDrawer","nullthrows","current","closeDrawer","blur","focus","callback","measure","measureInWindow","relativeToNativeNode","onSuccess","onFail","measureLayout","nativeProps","setNativeProps","console","warn","Left","Right","Component","StyleSheet","create","flex","elevation","position","top","left","right","bottom","height","StatusBar","currentHeight","_NativeEventEmitter","_LayoutAnimation","_Platform","_NativeKeyboardObserver","Keyboard","_emitter","NativeEventEmitter","Platform","OS","NativeKeyboardObserver","addListener","ev","_currentlyShowing","_ev","eventType","listener","context","removeAllListeners","_this$_currentlyShowi","endCoordinates","duration","easing","LayoutAnimation","configureNext","update","type","Types","_AccessibilityInfo","_Keyboard","KeyboardAvoidingView","_ref","_frame","_keyboardEvent","_subscriptions","_initialFrameHeight","_bottom","_onKeyboardChange","_updateBottomIfNecessary","_onLayout","_asyncToGenerator2","oldFrame","layout","onLayout","_x","_setBottom","_this$props$enabled","enabled","setState","_this$props$enabled2","_this$_keyboardEvent","_relativeKeyboardHeight","viewRef","_relativeKeyboardHeight2","keyboardFrame","_this$props$keyboardV","frame","screenY","AccessibilityInfo","prefersCrossFadeTransitions","keyboardY","keyboardVerticalOffset","behavior","Math","max","y","_x2","_","prevState","_this$props$enabled3","subscription","remove","contentContainerStyle","_this$props$enabled4","bottomHeight","heightStyle","compose","paddingBottom","_usePressability","_useMergeRefs","_useAndroidRippleForView","_react","MemoedPressable","memo","forwardRef","forwardedRef","_props$ariaValuemax","_props$accessibilityV","_props$ariaValuemin","_props$accessibilityV2","_props$ariaValuenow","_props$accessibilityV3","_props$ariaValuetext","_props$accessibilityV4","_restProps$ariaModal","accessible","accessibilityState","ariaLive","android_disableSound","android_ripple","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","cancelable","delayHoverIn","delayHoverOut","delayLongPress","disabled","focusable","hitSlop","onHoverIn","onHoverOut","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset","testOnly_pressed","unstable_pressDelay","restProps","useRef","mergedRef","useMergeRefs","android_rippleConfig","useAndroidRippleForView","_usePressState","forcePressed","_useState","useState","_useState2","_slicedToArray2","pressed","setPressed","usePressState","_usePressState2","_accessibilityState","busy","checked","expanded","selected","accessibilityValue","min","now","text","accessibilityLiveRegion","accessibilityLabel","restPropsWithDefaults","viewProps","accessibilityViewIsModal","config","useMemo","pressRectOffset","delayPressIn","onPressMove","eventHandlers","usePressability","displayName","rippleConfig","color","borderless","radius","foreground","processedColor","processColor","invariant","nativeRippleValue","rippleRadius","nativeForegroundAndroid","nativeBackgroundAndroid","_event$nativeEvent$lo","_event$nativeEvent$lo2","view","hotspotUpdate","locationX","locationY","_event$nativeEvent$lo3","_event$nativeEvent$lo4","_processColor","_ViewNativeComponent","_invariant","_ProgressBarAndroidNativeComponent","ProgressBarAndroidToExport","_ref$styleAttr","styleAttr","_ref$indeterminate","indeterminate","_ref$animating","animating","ProgressBarAndroidNativeComponent","_AndroidSwipeRefreshLayoutNativeComponent","AndroidSwipeRefreshLayoutNativeComponent","_PullToRefreshViewNativeComponent","PullToRefreshViewNativeComponent","_excluded2","RefreshControl","_lastNativeRefreshing","_onRefresh","onRefresh","forceUpdate","_setNativeRef","refreshing","prevProps","AndroidSwipeRefreshLayoutCommands","setNativeRefreshing","PullToRefreshCommands","colors","progressBackgroundColor","size","_this$props2","tintColor","titleColor","title","_RCTSafeAreaViewNativeComponent","RCTSafeAreaViewNativeComponent","exported","select","ios","View","_AndroidHorizontalScrollContentViewNativeComponent","AndroidHorizontalScrollContentViewNativeComponent","NativeComponentRegistry","__INTERNAL_VIEW_CONFIG","uiViewClassName","bubblingEventTypes","directEventTypes","validAttributes","decelerationRate","disableIntervalMomentum","endFillColor","process","fadingEdgeLength","nestedScrollEnabled","overScrollMode","pagingEnabled","persistentScrollbar","scrollEnabled","scrollPerfTag","sendMomentumEvents","showsHorizontalScrollIndicator","snapToAlignment","snapToEnd","snapToInterval","snapToStart","snapToOffsets","contentOffset","borderBottomLeftRadius","borderBottomRightRadius","borderRadius","borderStyle","borderRightColor","borderColor","borderBottomColor","borderTopLeftRadius","borderTopColor","removeClippedSubviews","borderTopRightRadius","borderLeftColor","pointerEvents","AndroidHorizontalScrollViewNativeComponent","ScrollContentViewNativeComponent","_AnimatedImplementation","_FrameRateLogger","_RendererProxy","_UIManager","_flattenStyle","_splitLayoutProps2","_Dimensions","_TextInputState","_AndroidHorizontalScrollViewNativeComponent","_processDecelerationRate","_ScrollContentViewNativeComponent","_ScrollViewCommands","_ScrollViewContext","_ScrollViewNativeComponent","_ScrollViewStickyHeader","_memoizeOne","NativeHorizontalScrollViewTuple","NativeVerticalScrollViewTuple","ScrollViewNativeComponent","ScrollView","_this$props$contentOf","_this$props$contentOf2","_this$props$contentIn","_this$props$contentIn2","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","_keyboardMetrics","_additionalScrollOffset","_isTouching","_lastMomentumScrollBeginTime","_lastMomentumScrollEndTime","_observedScrollSinceBecomingResponder","_becameResponderWhileAnimating","_preventNegativeScrollOffset","_animated","_subscriptionKeyboardWillShow","_subscriptionKeyboardWillHide","_subscriptionKeyboardDidShow","_subscriptionKeyboardDidHide","layoutHeight","getScrollResponder","getScrollableNode","findNodeHandle","_scrollView","nativeInstance","getInnerViewNode","_innerView","getInnerViewRef","getNativeScrollRef","scrollTo","options","deprecatedX","deprecatedAnimated","x","animated","scrollToEnd","flashScrollIndicators","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","UIManager","_textInputFocusError","_inputMeasureAndScrollToKeyboard","scrollResponderZoomTo","rect","zoomToRect","keyboardScreenY","Dimensions","scrollTextInputIntoVisibleRect","scrollOffsetY","setTimeout","_handleScroll","onScroll","_handleLayout","invertStickyHeaders","_handleContentOnLayout","_e$nativeEvent$layout","onContentSizeChange","createRefForwarder","instance","scrollResponderKeyboardWillShow","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","_handleMomentumScrollBegin","global","performance","onMomentumScrollBegin","_handleMomentumScrollEnd","FrameRateLogger","endScroll","onMomentumScrollEnd","_handleScrollBeginDrag","beginScroll","onScrollBeginDrag","_handleScrollEndDrag","velocity","_isAnimating","onScrollEndDrag","_handleResponderGrant","onResponderGrant","_handleResponderReject","_handleResponderRelease","touches","onResponderRelease","target","currentlyFocusedTextInput","TextInputState","currentlyFocusedInput","keyboardShouldPersistTaps","_keyboardIsDismissible","blurTextInput","_handleResponderTerminationRequest","_handleScrollShouldSetResponder","disableScrollViewPanResponder","_handleStartShouldSetResponder","_handleStartShouldSetResponderCapture","keyboardNeverPersistTaps","_softKeyboardIsDetached","isTextInput","hasFocusedTextInput","softKeyboardMayBeOpen","_keyboardEventsAreUnreliable","Version","_handleTouchEnd","keyboardNeverPersistsTaps","onTouchEnd","_handleTouchCancel","onTouchCancel","_handleTouchStart","onTouchStart","_handleTouchMove","onTouchMove","_scrollAnimatedValue","AnimatedImplementation","Value","setOffset","contentInset","metrics","_updateAnimatedNodeAttachment","prevContentInsetTop","newContentInsetTop","detach","index","childArray","child","stickyHeaderIndices","attachNativeEvent","delete","Children","toArray","_getKeyForIndex","layoutY","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","setNextHeaderY","_this2","_ref2","horizontal","_ref3","NativeDirectionalScrollView","NativeDirectionalScrollContentView","contentContainerHorizontal","contentSizeChangeProps","map","nextIndex","StickyHeaderComponent","ScrollViewStickyHeader","_setStickyHeaderRef","nextHeaderLayoutY","_onStickyHeaderLayout","scrollAnimatedValue","inverted","hiddenOnScroll","stickyHeaderHiddenOnScroll","scrollViewHeight","Provider","HORIZONTAL","VERTICAL","hasStickyHeaders","isArray","contentContainer","getForwardingRef","innerViewRef","alwaysBounceHorizontal","undefined","alwaysBounceVertical","baseStyle","baseHorizontal","baseVertical","onResponderReject","onResponderTerminationRequest","onScrollShouldSetResponder","onStartShouldSetResponder","onStartShouldSetResponderCapture","scrollEventThrottle","android","processDecelerationRate","refreshControl","scrollViewRef","_splitLayoutProps","splitLayoutProps","flattenStyle","outer","inner","cloneElement","Context","ScrollViewContext","flexGrow","flexShrink","flexDirection","overflow","mutator","memoize","publicInstance","Wrapper","ForwardedScrollView","_codegenNativeCommands","codegenNativeCommands","supportedCommands","createContext","freeze","_ViewConfigIgnore","topMomentumScrollBegin","registrationName","topMomentumScrollEnd","topScroll","topScrollBeginDrag","topScrollEndDrag","diff","showsVerticalScrollIndicator","isInvertedVirtualizedList","topScrollToTop","automaticallyAdjustContentInsets","automaticallyAdjustKeyboardInsets","automaticallyAdjustsScrollIndicatorInsets","bounces","bouncesZoom","canCancelContentTouches","centerContent","contentInsetAdjustmentBehavior","directionalLockEnabled","indicatorStyle","maintainVisibleContentPosition","maximumZoomScale","minimumZoomScale","pinchGestureEnabled","scrollIndicatorInsets","scrollToOverflowEnabled","scrollsToTop","zoomScale","ConditionallyIgnoredEventHandlers","onScrollToTop","_Animated","_ReactFabricPublicInstanceUtils","ScrollViewStickyHeaderWithForwardedRef","_nextHeaderLayoutY","measured","setMeasured","_useState3","_useState4","setLayoutY","_useState5","_useState6","setLayoutHeight","_useState7","_useState8","translateY","setTranslateY","_useState9","_useState10","setNextHeaderLayoutY","_useState11","_useState12","isFabric","setIsFabric","callbackRef","useCallback","isFabricPublicInstance","offset","Animated","diffClamp","interpolate","extrapolateLeft","inputRange","outputRange","_useState13","initialTranslateY","add","_useState14","animatedTranslateY","setAnimatedTranslateY","haveReceivedInitialZeroTranslateY","translateYDebounceTimer","useEffect","animatedValueListener","debounceTimeout","clearTimeout","stickStartPoint","push","collisionPoint","animatedListenerId","newAnimatedTranslateY","removeListener","only","nativeID","header","transform","fill","zIndex","_NativeSoundManager","NativeSoundManager","SoundManager","playTouchSound","_NativeStatusBarManagerAndroid","NativeStatusBarManagerAndroid","_NativeStatusBarManagerIOS","NativeStatusBarManagerIOS","_NativeStatusBarManag","createStackEntry","_props$animated","_props$showHideTransi","showHideTransition","barStyle","hidden","transition","networkActivityIndicatorVisible","_stackEntry","pushStackEntry","popStackEntry","replaceStackEntry","animation","_defaultProps","setHidden","setStyle","visible","setNetworkActivityIndicatorVisible","setColor","setTranslucent","entry","_propsStack","_updatePropsStack","splice","newEntry","getConstants","DEFAULT_BACKGROUND_COLOR","_updateImmediate","_currentValues","HEIGHT","clearImmediate","setImmediate","propsStack","defaultValues","oldProps","mergedProps","reduce","prev","cur","prop","_AndroidSwitchNativeComponent","AndroidSwitchNativeComponent","_SwitchNativeComponent","returnsFalse","returnsTrue","SwitchWithForwardedRef","ios_backgroundColor","onChange","onValueChange","thumbColor","trackColor","trackColorForFalse","false","trackColorForTrue","true","nativeSwitchRef","_React$useState","_React$useState2","native","setNative","handleChange","useLayoutEffect","_nativeSwitchRef$curr","jsValue","AndroidSwitchCommands","setNativeValue","SwitchCommands","setValue","_props$accessibilityR","_disabled","platformProps","on","thumbTintColor","trackTintColor","accessibilityRole","_props$accessibilityR2","onTintColor","SwitchNativeComponent","topBlur","phasedRegistrationNames","bubbled","captured","topEndEditing","topFocus","topKeyPress","topSubmitEditing","topTextInput","maxFontSizeMultiplier","adjustsFontSizeToFit","minimumFontScale","autoFocus","placeholder","inlineImagePadding","contextMenuHidden","textShadowColor","maxLength","selectTextOnFocus","textShadowRadius","underlineColorAndroid","textDecorationLine","submitBehavior","textAlignVertical","fontStyle","textShadowOffset","selectionColor","selectionHandleColor","placeholderTextColor","importantForAutofill","lineHeight","textTransform","returnKeyType","keyboardType","multiline","autoComplete","numberOfLines","letterSpacing","returnKeyLabel","fontSize","onKeyPress","cursorColor","showSoftInputOnFocus","textAlign","autoCapitalize","autoCorrect","caretHidden","secureTextEntry","textBreakStrategy","disableFullscreenUI","includeFontPadding","fontWeight","fontFamily","allowFontScaling","onSelectionChange","mostRecentEventCount","inlineImageLeft","editable","fontVariant","AndroidTextInputNativeComponent","_RCTInputAccessoryViewNativeComponent","container","count","RCTInputAccessoryViewNativeComponent","_RCTTextInputViewConfig","RCTTextInputViewConfig","dataDetectorTypes","MultilineTextInputNativeComponent","SinglelineTextInputNativeComponent","topChange","topTouchCancel","topTouchEnd","topTouchMove","topKeyPressSync","topSelectionChange","topChangeSync","topContentSizeChange","isHighlighted","writingDirection","textDecorationStyle","textDecorationColor","inputAccessoryViewID","enablesReturnKeyAutomatically","clearButtonMode","selection","textContentType","keyboardAppearance","passwordRules","spellCheck","clearTextOnFocus","lineBreakStrategyIOS","smartInsertDelete","onChangeSync","onKeyPressSync","onTextInput","AndroidTextInput","AndroidTextInputCommands","RCTSinglelineTextInputView","RCTSinglelineTextInputNativeCommands","RCTMultilineTextInputView","RCTMultilineTextInputNativeCommands","_Text","_TextAncestor","_excluded3","emptyFunctionThatReturnsTrue","InternalTextInput","_propsSelection$end","_props$multiline","viewCommands","id","tabIndex","propsSelection","otherProps","inputRef","start","end","setMostRecentEventCount","lastNativeText","setLastNativeText","lastNativeSelectionState","setLastNativeSelection","lastNativeSelection","defaultValue","_selection$start","_selection$end","nativeUpdate","setTextAndSelection","inputRefValue","registerInput","unregisterInput","setLocalRef","clear","isFocused","getNativeRef","setSelection","_onChange","currentText","onChangeText","eventCount","_onSelectionChange","_onFocus","focusInput","onFocus","_onBlur","blurInput","onBlur","_onScroll","textInput","blurOnSubmit","rejectResponderTermination","isTesting","RCTTextInputView","useMultilineDefaultStyle","padding","paddingVertical","paddingTop","useOnChangeSync","unstable_onChangeSync","unstable_onChangeTextSync","unstable_onKeyPressSync","onSelectionChangeShouldSetResponder","multilineDefault","_props$ariaLabelledb","_props$placeholder","_props$rows","_accessibilityLabelledBy","accessibilityLabelledBy","childCount","colorProps","rows","enterKeyHintToReturnTypeMap","enter","done","go","next","previous","search","send","inputModeToKeyboardTypeMap","none","decimal","numeric","tel","email","url","autoCompleteWebToAutoCompleteAndroidMap","bday","country","name","off","sex","username","autoCompleteWebToTextContentTypeMap","nickname","organization","ExportedForwardRef","_autoCompleteWebToAut","_ref2$allowFontScalin","_ref2$rejectResponder","_ref2$underlineColorA","readOnly","enterKeyHint","inputMode","verticalAlign","verticalAlignToTextAlignVerticalMap","State","currentlyFocusedField","focusTextInput","auto","middle","_AndroidTextInputNativeComponent","_RCTSingelineTextInputNativeComponent","currentlyFocusedInputRef","inputs","Set","textField","focusField","textFieldID","__DEV__","blurField","_textField$currentPro","currentProps","iOSTextInputCommands","_NativeToastAndroid","NativeToastAndroid","ToastAndroidConstants","ToastAndroid","SHORT","LONG","TOP","BOTTOM","CENTER","show","message","showWithGravity","gravity","showWithGravityAndOffset","xOffset","yOffset","_PooledClass","twoArgumentPooler","PooledClass","BoundingDimensions","destructor","getPooledFromElement","element","getPooled","offsetWidth","offsetHeight","addPoolingTo","oneArgumentPooler","copyFieldsFrom","Klass","instancePool","pop","standardReleaser","poolSize","DEFAULT_POOLER","CopyConstructor","pooler","NewKlass","release","a1","a2","threeArgumentPooler","a3","fourArgumentPooler","a4","Position","_SoundManager","_BoundingDimensions","_Position","extractSingleTouch","changedTouches","hasTouches","hasChangedTouches","States","baseStatesConditions","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","IsActive","IsPressingIn","IsLongPressingIn","Signals","Transitions","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","error","TouchableMixin","componentDidMount","isTV","componentWillUnmount","touchableDelayTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","touchable","touchState","responderID","touchableHandleResponderTerminationRequest","touchableHandleStartShouldSetResponder","touchableLongPressCancelsPress","touchableHandleResponderGrant","dispatchID","currentTarget","persist","_receiveSignal","delayMS","touchableGetHighlightDelayMS","isNaN","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","LONG_PRESS_THRESHOLD","_handleLongDelay","touchableHandleResponderRelease","pressInLocation","touchableHandleResponderTerminate","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","touchableGetPressRectOffset","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","touchableGetHitSlop","touch","pageX","pageY","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","touchableHandleFocus","touchableHandleBlur","_remeasureMetricsOnActivation","_handleQueryLayout","l","w","h","globalX","globalY","curState","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isInitialTransition","isActiveTransition","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","pressIsLongButStillCallOnPress","touchableHandlePress","touchSoundDisabled","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableGetPressOutDelayMS","withoutDefaultFocusAndBlur","TouchableMixinWithoutDefaultFocusAndBlur","Touchable","Mixin","renderDebugView","_Pressability","TouchableHighlight","_isMounted","pressability","Pressability","_createPressabilityConfig","extraStyles","_createExtraStyles","_this$props$accessibi","delayPressOut","minPressDuration","_hideUnderlay","_showUnderlay","_this2$props$delayPre","_hideTimeout","_this$props$activeOpa","opacity","activeOpacity","underlay","underlayColor","_hasPressHandler","onShowUnderlay","onHideUnderlay","_this$props$ariaValu","_this$props$accessibi2","_this$props$ariaValu2","_this$props$accessibi3","_this$props$ariaValu3","_this$props$accessibi4","_this$props$ariaValu4","_this$props$accessibi5","_this$props$ariaLive","_this$props$ariaLabe","_this$props$ariaModa","_this$props$ariaHidd","_this$state$extraStyl","_this$props$id","_this$state$extraStyl2","_this$state$pressabil","getEventHandlers","eventHandlersWithoutBlurAndFocus","accessibilityHint","accessibilityLanguage","accessibilityActions","onAccessibilityAction","importantForAccessibility","accessibilityElementsHidden","hasTVPreferredFocus","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","testID","hostRef","configure","reset","TouchableNativeFeedback","_this$props$ariaDisa","accessibilityStateDisabled","_dispatchHotspotUpdate","_dispatchPressedStateChange","hostComponentRef","findHostInstance_DEPRECATED","_event$nativeEvent","_this$props$ariaBusy","_this$props$ariaChec","_this$props$ariaDisa2","_this$props$ariaExpa","_this$props$ariaSele","_this$props$accessibi6","_this$props$accessibi7","_this$props$accessibi8","_this$props$accessibi9","_this$props$accessibi10","getBackgroundProp","background","SelectableBackground","useForeground","attribute","SelectableBackgroundBorderless","Ripple","canUseNativeForeground","_Easing","_flattenStyle4","TouchableOpacity","anim","_getChildStyleOpacityWithDefault","_this$props$disabled","_opacityInactive","_opacityActive","dispatchConfig","toValue","timing","Easing","inOut","quad","useNativeDriver","_setOpacityTo","_flattenStyle2","_flattenStyle3","resetAnimation","PASSTHROUGH_PROPS","TouchableWithoutFeedback","createPressabilityConfig","elementProps","_props$accessibilityS","_processAspectRatio","_processFontVariant","_processTransform","_processTransformOrigin","_sizesDiffer","colorAttributes","ReactNativeStyleAttributes","alignContent","alignItems","alignSelf","aspectRatio","processAspectRatio","borderBottomWidth","borderEndWidth","borderLeftWidth","borderRightWidth","borderStartWidth","borderTopWidth","columnGap","borderWidth","direction","display","flexBasis","flexWrap","gap","inset","insetBlock","insetBlockEnd","insetBlockStart","insetInline","insetInlineEnd","insetInlineStart","justifyContent","margin","marginBlock","marginBlockEnd","marginBlockStart","marginBottom","marginEnd","marginHorizontal","marginInline","marginInlineEnd","marginInlineStart","marginLeft","marginRight","marginStart","marginTop","marginVertical","maxHeight","maxWidth","minHeight","minWidth","paddingBlock","paddingBlockEnd","paddingBlockStart","paddingEnd","paddingHorizontal","paddingInline","paddingInlineEnd","paddingInlineStart","paddingLeft","paddingRight","paddingStart","rowGap","shadowColor","shadowOffset","sizesDiffer","shadowOpacity","shadowRadius","processTransform","transformOrigin","processTransformOrigin","backfaceVisibility","borderBlockColor","borderBlockEndColor","borderBlockStartColor","borderBottomEndRadius","borderBottomStartRadius","borderCurve","borderEndColor","borderEndEndRadius","borderEndStartRadius","borderStartColor","borderStartEndRadius","borderStartStartRadius","borderTopEndRadius","borderTopStartRadius","cursor","processFontVariant","userSelect","overlayColor","resizeMode","objectFit","_ariaLabelledBy$split","_accessibilityValue","ariaHidden","ariaLabelledBy","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","hasTextAncestor","useContext","TextAncestor","split","newPointerEvents","actualView","needsOffscreenAlphaCompositing","experimental_layoutConformance","ViewNativeComponent","_cachedDevServerURL","_cachedFullBundleURL","_NativeSourceCode","_cachedDevServerURL2","scriptUrl","NativeSourceCode","scriptURL","match","fullBundleUrl","bundleLoadedFromServer","parseHermesStack","errorStack","stacktraceParser","HermesInternal","stack","frames","entries","location","functionName","methodName","file","sourceUrl","lineNumber","line1Based","column","column1Based","virtualOffset0Based","convertHermesStack","parse","RE_FRAME","RE_SKIPPED","parseLine","line","asFrame","Number","parseInt","asSkipped","lines","lastMessageLine","slice","join","userExceptionDecorator","SyntheticError","_Error","inUserExceptionDecorator","decoratedExtraDataKey","Symbol","exceptionID","reportException","isFatal","reportToConsole","parseErrorStack","currentExceptionID","originalMessage","componentStack","namePrefix","startsWith","jsEngine","extraData","rawStack","cause","stackSymbols","stackReturnAddresses","stackElements","data","_unused","preprocessException","NativeExceptionsManager","inExceptionHandler","reactConsoleErrorHandler","_console","_len2","_key2","_errorOriginal","reportErrorsAsExceptions","firstArg","stringifySafe","arg","handleException","installConsoleErrorReporter","unstable_setExceptionDecorator","exceptionDecorator","Date","GlobalPerformanceLogger","markPoint","currentTimestamp"],"sourceRoot":""}