{"version":3,"file":"vendors-ae77e2b9.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/Core/NativeExceptionsManager.js","webpack:///./node_modules/react-native/Libraries/Core/RawEventEmitter.js","webpack:///./node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js","webpack:///./node_modules/react-native/Libraries/Core/SegmentFetcher/NativeSegmentFetcher.js","webpack:///./node_modules/react-native/Libraries/Core/Timers/JSTimers.js","webpack:///./node_modules/react-native/Libraries/Core/Timers/NativeTiming.js","webpack:///./node_modules/react-native/Libraries/Core/Timers/immediateShim.js","webpack:///./node_modules/react-native/Libraries/Core/Timers/queueMicrotask.js","webpack:///./node_modules/react-native/Libraries/Core/polyfillPromise.js","webpack:///./node_modules/react-native/Libraries/Core/registerCallableModule.js","webpack:///./node_modules/react-native/Libraries/Core/setUpAlert.js","webpack:///./node_modules/react-native/Libraries/Core/setUpBatchedBridge.js","webpack:///./node_modules/react-native/Libraries/Core/setUpErrorHandling.js","webpack:///./node_modules/react-native/Libraries/Core/setUpGlobals.js","webpack:///./node_modules/react-native/Libraries/Core/setUpNavigator.js","webpack:///./node_modules/react-native/Libraries/Core/setUpPerformance.js","webpack:///./node_modules/react-native/Libraries/Core/setUpRegeneratorRuntime.js","webpack:///./node_modules/react-native/Libraries/Core/setUpSegmentFetcher.js","webpack:///./node_modules/react-native/Libraries/Core/setUpTimers.js","webpack:///./node_modules/react-native/Libraries/Core/setUpXHR.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../src/private/specs/modules/NativeExceptionsManager';\nimport NativeExceptionsManager from '../../src/private/specs/modules/NativeExceptionsManager';\nexport default NativeExceptionsManager;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {IEventEmitter} from '../vendor/emitter/EventEmitter';\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\n\nexport type RawEventEmitterEvent = $ReadOnly<{|\n  eventName: string,\n  // We expect, but do not/cannot require, that nativeEvent is an object\n  // with the properties: key, elementType (string), type (string), tag (numeric),\n  // and a stateNode of the native element/Fiber the event was emitted to.\n  nativeEvent: {[string]: mixed},\n|}>;\n\ntype RawEventDefinitions = {\n  [eventChannel: string]: [RawEventEmitterEvent],\n};\n\nconst RawEventEmitter: IEventEmitter<RawEventDefinitions> =\n  new EventEmitter<RawEventDefinitions>();\n\n// See the React renderer / react repo for how this is used.\n// Raw events are emitted here when they are received in JS\n// and before any event Plugins process them or before components\n// have a chance to respond to them. This allows you to implement\n// app-specific perf monitoring, which is unimplemented by default,\n// making this entire RawEventEmitter do nothing by default until\n// *you* add listeners for your own app.\n// Besides perf monitoring and maybe debugging, this RawEventEmitter\n// should not be used.\nexport default RawEventEmitter;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ExtendedError} from './ExtendedError';\n\nimport {SyntheticError, handleException} from './ExceptionsManager';\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nconst ReactFiberErrorDialog = {\n  /**\n   * Intercept lifecycle errors and ensure they are shown with the correct stack\n   * trace within the native redbox component.\n   */\n  showErrorDialog({componentStack, error: errorValue}: CapturedError): boolean {\n    let error: ?ExtendedError;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (errorValue: ExtendedError);\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError(errorValue): ExtendedError);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError('Unspecified error'): ExtendedError);\n    }\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    handleException(error, false);\n\n    // Return false here to prevent ReactFiberErrorLogger default behavior of\n    // logging error details to console.error. Calls to console.error are\n    // automatically routed to the native redbox controller, which we've already\n    // done above by calling ExceptionsManager.\n    return false;\n  },\n};\n\nexport default ReactFiberErrorDialog;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeSegmentFetcher';\nimport NativeSegmentFetcher from '../../../src/private/specs/modules/NativeSegmentFetcher';\nexport default NativeSegmentFetcher;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport NativeTiming from './NativeTiming';\n\nconst BatchedBridge = require('../../BatchedBridge/BatchedBridge');\nconst Systrace = require('../../Performance/Systrace');\nconst invariant = require('invariant');\n\n/**\n * JS implementation of timer functions. Must be completely driven by an\n * external clock signal, all that's stored here is timerID, timer type, and\n * callback.\n */\n\nexport type JSTimerType =\n  | 'setTimeout'\n  | 'setInterval'\n  | 'requestAnimationFrame'\n  | 'queueReactNativeMicrotask'\n  | 'requestIdleCallback';\n\n// These timing constants should be kept in sync with the ones in native ios and\n// android `RCTTiming` module.\nconst FRAME_DURATION = 1000 / 60;\nconst IDLE_CALLBACK_FRAME_DEADLINE = 1;\n\n// Parallel arrays\nconst callbacks: Array<?Function> = [];\nconst types: Array<?JSTimerType> = [];\nconst timerIDs: Array<?number> = [];\nlet reactNativeMicrotasks: Array<number> = [];\nlet requestIdleCallbacks: Array<number> = [];\nconst requestIdleCallbackTimeouts: {[number]: number, ...} = {};\n\nlet GUID = 1;\nconst errors: Array<Error> = [];\n\nlet hasEmittedTimeDriftWarning = false;\n\n// Returns a free index if one is available, and the next consecutive index otherwise.\nfunction _getFreeIndex(): number {\n  let freeIndex = timerIDs.indexOf(null);\n  if (freeIndex === -1) {\n    freeIndex = timerIDs.length;\n  }\n  return freeIndex;\n}\n\nfunction _allocateCallback(func: Function, type: JSTimerType): number {\n  const id = GUID++;\n  const freeIndex = _getFreeIndex();\n  timerIDs[freeIndex] = id;\n  callbacks[freeIndex] = func;\n  types[freeIndex] = type;\n  return id;\n}\n\n/**\n * Calls the callback associated with the ID. Also unregister that callback\n * if it was a one time timer (setTimeout), and not unregister it if it was\n * recurring (setInterval).\n */\nfunction _callTimer(timerID: number, frameTime: number, didTimeout: ?boolean) {\n  if (timerID > GUID) {\n    console.warn(\n      'Tried to call timer with ID %s but no such timer exists.',\n      timerID,\n    );\n  }\n\n  // timerIndex of -1 means that no timer with that ID exists. There are\n  // two situations when this happens, when a garbage timer ID was given\n  // and when a previously existing timer was deleted before this callback\n  // fired. In both cases we want to ignore the timer id, but in the former\n  // case we warn as well.\n  const timerIndex = timerIDs.indexOf(timerID);\n  if (timerIndex === -1) {\n    return;\n  }\n\n  const type = types[timerIndex];\n  const callback = callbacks[timerIndex];\n  if (!callback || !type) {\n    console.error('No callback found for timerID ' + timerID);\n    return;\n  }\n\n  if (__DEV__) {\n    Systrace.beginEvent(type + ' [invoke]');\n  }\n\n  // Clear the metadata\n  if (type !== 'setInterval') {\n    _clearIndex(timerIndex);\n  }\n\n  try {\n    if (\n      type === 'setTimeout' ||\n      type === 'setInterval' ||\n      type === 'queueReactNativeMicrotask'\n    ) {\n      callback();\n    } else if (type === 'requestAnimationFrame') {\n      callback(global.performance.now());\n    } else if (type === 'requestIdleCallback') {\n      callback({\n        timeRemaining: function () {\n          // TODO: Optimisation: allow running for longer than one frame if\n          // there are no pending JS calls on the bridge from native. This\n          // would require a way to check the bridge queue synchronously.\n          return Math.max(\n            0,\n            FRAME_DURATION - (global.performance.now() - frameTime),\n          );\n        },\n        didTimeout: !!didTimeout,\n      });\n    } else {\n      console.error('Tried to call a callback with invalid type: ' + type);\n    }\n  } catch (e) {\n    // Don't rethrow so that we can run all timers.\n    errors.push(e);\n  }\n\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n}\n\n/**\n * Performs a single pass over the enqueued reactNativeMicrotasks. Returns whether\n * more reactNativeMicrotasks are queued up (can be used as a condition a while loop).\n */\nfunction _callReactNativeMicrotasksPass() {\n  if (reactNativeMicrotasks.length === 0) {\n    return false;\n  }\n\n  if (__DEV__) {\n    Systrace.beginEvent('callReactNativeMicrotasksPass()');\n  }\n\n  // The main reason to extract a single pass is so that we can track\n  // in the system trace\n  const passReactNativeMicrotasks = reactNativeMicrotasks;\n  reactNativeMicrotasks = [];\n\n  // Use for loop rather than forEach as per @vjeux's advice\n  // https://github.com/facebook/react-native/commit/c8fd9f7588ad02d2293cac7224715f4af7b0f352#commitcomment-14570051\n  for (let i = 0; i < passReactNativeMicrotasks.length; ++i) {\n    _callTimer(passReactNativeMicrotasks[i], 0);\n  }\n\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n  return reactNativeMicrotasks.length > 0;\n}\n\nfunction _clearIndex(i: number) {\n  timerIDs[i] = null;\n  callbacks[i] = null;\n  types[i] = null;\n}\n\nfunction _freeCallback(timerID: number) {\n  // timerIDs contains nulls after timers have been removed;\n  // ignore nulls upfront so indexOf doesn't find them\n  if (timerID == null) {\n    return;\n  }\n\n  const index = timerIDs.indexOf(timerID);\n  // See corresponding comment in `callTimers` for reasoning behind this\n  if (index !== -1) {\n    const type = types[index];\n    _clearIndex(index);\n    if (\n      type !== 'queueReactNativeMicrotask' &&\n      type !== 'requestIdleCallback'\n    ) {\n      deleteTimer(timerID);\n    }\n  }\n}\n\n/**\n * JS implementation of timer functions. Must be completely driven by an\n * external clock signal, all that's stored here is timerID, timer type, and\n * callback.\n */\nconst JSTimers = {\n  /**\n   * @param {function} func Callback to be invoked after `duration` ms.\n   * @param {number} duration Number of milliseconds.\n   */\n  setTimeout: function (\n    func: Function,\n    duration: number,\n    ...args: any\n  ): number {\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'setTimeout',\n    );\n    createTimer(id, duration || 0, Date.now(), /* recurring */ false);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every `duration` ms.\n   * @param {number} duration Number of milliseconds.\n   */\n  setInterval: function (\n    func: Function,\n    duration: number,\n    ...args: any\n  ): number {\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'setInterval',\n    );\n    createTimer(id, duration || 0, Date.now(), /* recurring */ true);\n    return id;\n  },\n\n  /**\n   * The React Native microtask mechanism is used to back public APIs e.g.\n   * `queueMicrotask`, `clearImmediate`, and `setImmediate` (which is used by\n   * the Promise polyfill) when the JSVM microtask mechanism is not used.\n   *\n   * @param {function} func Callback to be invoked before the end of the\n   * current JavaScript execution loop.\n   */\n  queueReactNativeMicrotask: function (func: Function, ...args: any): number {\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'queueReactNativeMicrotask',\n    );\n    reactNativeMicrotasks.push(id);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every frame.\n   */\n  requestAnimationFrame: function (func: Function): any | number {\n    const id = _allocateCallback(func, 'requestAnimationFrame');\n    createTimer(id, 1, Date.now(), /* recurring */ false);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every frame and provided\n   * with time remaining in frame.\n   * @param {?object} options\n   */\n  requestIdleCallback: function (\n    func: Function,\n    options: ?Object,\n  ): any | number {\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(true);\n    }\n\n    const timeout = options && options.timeout;\n    const id: number = _allocateCallback(\n      timeout != null\n        ? (deadline: any) => {\n            const timeoutId: number = requestIdleCallbackTimeouts[id];\n            if (timeoutId) {\n              JSTimers.clearTimeout(timeoutId);\n              delete requestIdleCallbackTimeouts[id];\n            }\n            return func(deadline);\n          }\n        : func,\n      'requestIdleCallback',\n    );\n    requestIdleCallbacks.push(id);\n\n    if (timeout != null) {\n      const timeoutId: number = JSTimers.setTimeout(() => {\n        const index: number = requestIdleCallbacks.indexOf(id);\n        if (index > -1) {\n          requestIdleCallbacks.splice(index, 1);\n          _callTimer(id, global.performance.now(), true);\n        }\n        delete requestIdleCallbackTimeouts[id];\n        if (requestIdleCallbacks.length === 0) {\n          setSendIdleEvents(false);\n        }\n      }, timeout);\n      requestIdleCallbackTimeouts[id] = timeoutId;\n    }\n    return id;\n  },\n\n  cancelIdleCallback: function (timerID: number) {\n    _freeCallback(timerID);\n    const index = requestIdleCallbacks.indexOf(timerID);\n    if (index !== -1) {\n      requestIdleCallbacks.splice(index, 1);\n    }\n\n    const timeoutId = requestIdleCallbackTimeouts[timerID];\n    if (timeoutId) {\n      JSTimers.clearTimeout(timeoutId);\n      delete requestIdleCallbackTimeouts[timerID];\n    }\n\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n  },\n\n  clearTimeout: function (timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  clearInterval: function (timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  clearReactNativeMicrotask: function (timerID: number) {\n    _freeCallback(timerID);\n    const index = reactNativeMicrotasks.indexOf(timerID);\n    if (index !== -1) {\n      reactNativeMicrotasks.splice(index, 1);\n    }\n  },\n\n  cancelAnimationFrame: function (timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  /**\n   * This is called from the native side. We are passed an array of timerIDs,\n   * and\n   */\n  callTimers: function (timersToCall: Array<number>): any | void {\n    invariant(\n      timersToCall.length !== 0,\n      'Cannot call `callTimers` with an empty list of IDs.',\n    );\n\n    errors.length = 0;\n    for (let i = 0; i < timersToCall.length; i++) {\n      _callTimer(timersToCall[i], 0);\n    }\n\n    const errorCount = errors.length;\n    if (errorCount > 0) {\n      if (errorCount > 1) {\n        // Throw all the other errors in a setTimeout, which will throw each\n        // error one at a time\n        for (let ii = 1; ii < errorCount; ii++) {\n          JSTimers.setTimeout(\n            ((error: Error) => {\n              throw error;\n            }).bind(null, errors[ii]),\n            0,\n          );\n        }\n      }\n      throw errors[0];\n    }\n  },\n\n  callIdleCallbacks: function (frameTime: number) {\n    if (\n      FRAME_DURATION - (Date.now() - frameTime) <\n      IDLE_CALLBACK_FRAME_DEADLINE\n    ) {\n      return;\n    }\n\n    errors.length = 0;\n    if (requestIdleCallbacks.length > 0) {\n      const passIdleCallbacks = requestIdleCallbacks;\n      requestIdleCallbacks = [];\n\n      for (let i = 0; i < passIdleCallbacks.length; ++i) {\n        _callTimer(passIdleCallbacks[i], frameTime);\n      }\n    }\n\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n\n    errors.forEach(error =>\n      JSTimers.setTimeout(() => {\n        throw error;\n      }, 0),\n    );\n  },\n\n  /**\n   * This is called after we execute any command we receive from native but\n   * before we hand control back to native.\n   */\n  callReactNativeMicrotasks() {\n    errors.length = 0;\n    while (_callReactNativeMicrotasksPass()) {}\n    errors.forEach(error =>\n      JSTimers.setTimeout(() => {\n        throw error;\n      }, 0),\n    );\n  },\n\n  /**\n   * Called from native (in development) when environment times are out-of-sync.\n   */\n  emitTimeDriftWarning(warningMessage: string) {\n    if (hasEmittedTimeDriftWarning) {\n      return;\n    }\n    hasEmittedTimeDriftWarning = true;\n    console.warn(warningMessage);\n  },\n};\n\nfunction createTimer(\n  callbackID: number,\n  duration: number,\n  jsSchedulingTime: number,\n  repeats: boolean,\n): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.createTimer(callbackID, duration, jsSchedulingTime, repeats);\n}\n\nfunction deleteTimer(timerID: number): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.deleteTimer(timerID);\n}\n\nfunction setSendIdleEvents(sendIdleEvents: boolean): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.setSendIdleEvents(sendIdleEvents);\n}\n\nlet ExportedJSTimers: {|\n  callIdleCallbacks: (frameTime: number) => any | void,\n  callReactNativeMicrotasks: () => void,\n  callTimers: (timersToCall: Array<number>) => any | void,\n  cancelAnimationFrame: (timerID: number) => void,\n  cancelIdleCallback: (timerID: number) => void,\n  clearReactNativeMicrotask: (timerID: number) => void,\n  clearInterval: (timerID: number) => void,\n  clearTimeout: (timerID: number) => void,\n  emitTimeDriftWarning: (warningMessage: string) => any | void,\n  requestAnimationFrame: (func: any) => any | number,\n  requestIdleCallback: (func: any, options: ?any) => any | number,\n  queueReactNativeMicrotask: (func: any, ...args: any) => number,\n  setInterval: (func: any, duration: number, ...args: any) => number,\n  setTimeout: (func: any, duration: number, ...args: any) => number,\n|};\n\nif (!NativeTiming) {\n  console.warn(\"Timing native module is not available, can't set timers.\");\n  // $FlowFixMe[prop-missing] : we can assume timers are generally available\n  ExportedJSTimers = ({\n    callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,\n    queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask,\n  }: typeof JSTimers);\n} else {\n  ExportedJSTimers = JSTimers;\n}\n\nBatchedBridge.setReactNativeMicrotasksCallback(\n  JSTimers.callReactNativeMicrotasks,\n);\n\nmodule.exports = ExportedJSTimers;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport * from '../../../src/private/specs/modules/NativeTiming';\nimport NativeTiming from '../../../src/private/specs/modules/NativeTiming';\nexport default NativeTiming;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\n// Globally Unique Immediate ID.\nlet GUIID = 1;\n\n// A global set of the currently cleared immediates.\nconst clearedImmediates: Set<number> = new Set();\n\n/**\n * Shim the setImmediate API on top of queueMicrotask.\n * @param {function} func Callback to be invoked before the end of the\n * current JavaScript execution loop.\n */\nfunction setImmediate(callback: Function, ...args: any): number {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      'setImmediate must be called with at least one argument (a function to call)',\n    );\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(\n      'The first argument to setImmediate must be a function.',\n    );\n  }\n\n  const id = GUIID++;\n  // This is an edgey case in which the sequentially assigned ID has been\n  // \"guessed\" and \"cleared\" ahead of time, so we need to clear it up first.\n  if (clearedImmediates.has(id)) {\n    clearedImmediates.delete(id);\n  }\n\n  // $FlowFixMe[incompatible-call]\n  global.queueMicrotask(() => {\n    if (!clearedImmediates.has(id)) {\n      callback.apply(undefined, args);\n    } else {\n      // Free up the Set entry.\n      clearedImmediates.delete(id);\n    }\n  });\n\n  return id;\n}\n\n/**\n * @param {number} immediateID The ID of the immediate to be clearred.\n */\nfunction clearImmediate(immediateID: number) {\n  clearedImmediates.add(immediateID);\n}\n\nconst immediateShim = {\n  setImmediate: setImmediate,\n  clearImmediate: clearImmediate,\n};\n\nmodule.exports = immediateShim;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nlet resolvedPromise;\n\n/**\n * Polyfill for the microtask queueing API defined by WHATWG HTML spec.\n * https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask\n *\n * The method must queue a microtask to invoke @param {function} callback, and\n * if the callback throws an exception, report the exception.\n */\nexport default function queueMicrotask(callback: Function) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      'queueMicrotask must be called with at least one argument (a function to call)',\n    );\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError('The argument to queueMicrotask must be a function.');\n  }\n\n  // Try to reuse a lazily allocated resolved promise from closure.\n  (resolvedPromise || (resolvedPromise = Promise.resolve()))\n    .then(callback)\n    .catch(error =>\n      // Report the exception until the next tick.\n      setTimeout(() => {\n        throw error;\n      }, 0),\n    );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\n/**\n * Set up Promise. The native Promise implementation throws the following error:\n * ERROR: Event loop not supported.\n *\n * If you don't need these polyfills, don't use InitializeCore; just directly\n * require the modules you need from InitializeCore for setup.\n */\n\n// If global.Promise is provided by Hermes, we are confident that it can provide\n// all the methods needed by React Native, so we can directly use it.\nif (global?.HermesInternal?.hasPromise?.()) {\n  const HermesPromise = global.Promise;\n\n  if (__DEV__) {\n    if (typeof HermesPromise !== 'function') {\n      console.error('HermesPromise does not exist');\n    }\n    global.HermesInternal?.enablePromiseRejectionTracker?.(\n      require('../promiseRejectionTrackingOptions').default,\n    );\n  }\n} else {\n  polyfillGlobal('Promise', () => require('../Promise'));\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\ntype Module = {...};\ntype RegisterCallableModule = (\n  name: string,\n  moduleOrFactory: Module | (void => Module),\n) => void;\n\nconst registerCallableModule: RegisterCallableModule = (function () {\n  if (global.RN$Bridgeless === true) {\n    return (name, moduleOrFactory) => {\n      if (typeof moduleOrFactory === 'function') {\n        global.RN$registerCallableModule(name, moduleOrFactory);\n        return;\n      }\n\n      global.RN$registerCallableModule(name, () => moduleOrFactory);\n    };\n  }\n\n  const BatchedBridge = require('../BatchedBridge/BatchedBridge');\n  return (name, moduleOrFactory) => {\n    if (typeof moduleOrFactory === 'function') {\n      BatchedBridge.registerLazyCallableModule(name, moduleOrFactory);\n      return;\n    }\n\n    BatchedBridge.registerCallableModule(name, moduleOrFactory);\n  };\n})();\n\nexport default registerCallableModule;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\n/**\n * Set up alert().\n * You can use this module directly, or just require InitializeCore.\n */\nif (!global.alert) {\n  global.alert = function (text: string) {\n    // Require Alert on demand. Requiring it too early can lead to issues\n    // with things like Platform not being fully initialized.\n    require('../Alert/Alert').alert('Alert', '' + text);\n  };\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nlet registerModule;\nif (global.RN$Bridgeless === true && global.RN$registerCallableModule) {\n  registerModule = global.RN$registerCallableModule;\n} else {\n  const BatchedBridge = require('../BatchedBridge/BatchedBridge');\n  registerModule = (\n    moduleName:\n      | $TEMPORARY$string<'GlobalPerformanceLogger'>\n      | $TEMPORARY$string<'HMRClient'>\n      | $TEMPORARY$string<'HeapCapture'>\n      | $TEMPORARY$string<'JSTimers'>\n      | $TEMPORARY$string<'RCTDeviceEventEmitter'>\n      | $TEMPORARY$string<'RCTLog'>\n      | $TEMPORARY$string<'RCTNativeAppEventEmitter'>\n      | $TEMPORARY$string<'SamplingProfiler'>\n      | $TEMPORARY$string<'Systrace'>,\n    /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\n     * Flow's LTI update could not be added via codemod */\n    factory,\n  ) => BatchedBridge.registerLazyCallableModule(moduleName, factory);\n}\n\nregisterModule('Systrace', () => require('../Performance/Systrace'));\nif (!(global.RN$Bridgeless === true)) {\n  registerModule('JSTimers', () => require('./Timers/JSTimers'));\n}\nregisterModule('HeapCapture', () => require('../HeapCapture/HeapCapture'));\nregisterModule('SamplingProfiler', () =>\n  require('../Performance/SamplingProfiler'),\n);\nregisterModule('RCTLog', () => require('../Utilities/RCTLog'));\nregisterModule(\n  'RCTDeviceEventEmitter',\n  () => require('../EventEmitter/RCTDeviceEventEmitter').default,\n);\nregisterModule('RCTNativeAppEventEmitter', () =>\n  require('../EventEmitter/RCTNativeAppEventEmitter'),\n);\nregisterModule('GlobalPerformanceLogger', () =>\n  require('../Utilities/GlobalPerformanceLogger'),\n);\n\nif (__DEV__) {\n  registerModule('HMRClient', () => require('../Utilities/HMRClient'));\n} else {\n  registerModule('HMRClient', () => require('../Utilities/HMRClientProdShim'));\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\n/**\n * Sets up the console and exception handling (redbox) for React Native.\n * You can use this module directly, or just require InitializeCore.\n */\nconst ExceptionsManager = require('./ExceptionsManager');\nExceptionsManager.installConsoleErrorReporter();\n\n// Set up error handler\nif (!global.__fbDisableExceptionsManager) {\n  const handleError = (e: mixed, isFatal: boolean) => {\n    try {\n      ExceptionsManager.handleException(e, isFatal);\n    } catch (ee) {\n      console.log('Failed to print error: ', ee.message);\n      throw e;\n    }\n  };\n\n  const ErrorUtils = require('../vendor/core/ErrorUtils');\n  ErrorUtils.setGlobalHandler(handleError);\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\n/**\n * Sets up global variables for React Native.\n * You can use this module directly, or just require InitializeCore.\n */\nif (global.window === undefined) {\n  // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.\n  global.window = global;\n}\n\nif (global.self === undefined) {\n  // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.\n  global.self = global;\n}\n\n// Set up process\n// $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.\nglobal.process = global.process || {};\n// $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.\nglobal.process.env = global.process.env || {};\nif (!global.process.env.NODE_ENV) {\n  // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.\n  global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nconst {polyfillObjectProperty} = require('../Utilities/PolyfillFunctions');\n\nconst navigator = global.navigator;\nif (navigator === undefined) {\n  // $FlowExpectedError[cannot-write] The global isn't writable anywhere but here, where we define it.\n  global.navigator = {product: 'ReactNative'};\n} else {\n  // see https://github.com/facebook/react-native/issues/10881\n  polyfillObjectProperty(navigator, 'product', () => 'ReactNative');\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport NativePerformance from '../../src/private/webapis/performance/NativePerformance';\nimport Performance from '../../src/private/webapis/performance/Performance';\n\n// In case if the native implementation of the Performance API is available, use it,\n// otherwise fall back to the legacy/default one, which only defines 'Performance.now()'\nif (NativePerformance) {\n  // $FlowExpectedError[cannot-write]\n  global.performance = new Performance();\n} else {\n  if (!global.performance) {\n    // $FlowExpectedError[cannot-write]\n    global.performance = ({\n      now: function () {\n        const performanceNow = global.nativePerformanceNow || Date.now;\n        return performanceNow();\n      },\n    }: {now?: () => number});\n  }\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst {hasNativeConstructor} = require('../Utilities/FeatureDetection');\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\n/**\n * Set up regenerator.\n * You can use this module directly, or just require InitializeCore.\n */\n\nlet hasNativeGenerator;\ntry {\n  // If this function was lowered by regenerator-transform, it will try to\n  // access `global.regeneratorRuntime` which doesn't exist yet and will throw.\n  hasNativeGenerator = hasNativeConstructor(\n    function* () {},\n    'GeneratorFunction',\n  );\n} catch {\n  // In this case, we know generators are not provided natively.\n  hasNativeGenerator = false;\n}\n\n// If generators are provided natively, which suggests that there was no\n// regenerator-transform, then there is no need to set up the runtime.\nif (!hasNativeGenerator) {\n  polyfillGlobal('regeneratorRuntime', () => {\n    // The require just sets up the global, so make sure when we first\n    // invoke it the global does not exist\n    delete global.regeneratorRuntime;\n\n    // regenerator-runtime/runtime exports the regeneratorRuntime object, so we\n    // can return it safely.\n    return require('regenerator-runtime/runtime'); // flowlint-line untyped-import:off\n  });\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nexport type FetchSegmentFunction = typeof __fetchSegment;\n\n/**\n * Set up SegmentFetcher.\n * You can use this module directly, or just require InitializeCore.\n */\n\nfunction __fetchSegment(\n  segmentId: number,\n  options: $ReadOnly<{\n    otaBuildNumber: ?string,\n    requestedModuleName: string,\n    segmentHash: string,\n  }>,\n  callback: (?Error) => void,\n) {\n  const SegmentFetcher =\n    require('./SegmentFetcher/NativeSegmentFetcher').default;\n  SegmentFetcher.fetchSegment(\n    segmentId,\n    options,\n    (\n      errorObject: ?{\n        message: string,\n        code: string,\n        ...\n      },\n    ) => {\n      if (errorObject) {\n        const error = new Error(errorObject.message);\n        (error: any).code = errorObject.code; // flowlint-line unclear-type: off\n        callback(error);\n      }\n\n      callback(null);\n    },\n  );\n}\n\nglobal.__fetchSegment = __fetchSegment;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst {isNativeFunction} = require('../Utilities/FeatureDetection');\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\nif (__DEV__) {\n  if (typeof global.Promise !== 'function') {\n    console.error('Promise should exist before setting up timers.');\n  }\n}\n\n// Currently, Hermes `Promise` is implemented via Internal Bytecode.\nconst hasHermesPromiseQueuedToJSVM =\n  global.HermesInternal?.hasPromise?.() === true &&\n  global.HermesInternal?.useEngineQueue?.() === true;\n\nconst hasNativePromise = isNativeFunction(Promise);\nconst hasPromiseQueuedToJSVM = hasNativePromise || hasHermesPromiseQueuedToJSVM;\n\n// In bridgeless mode, timers are host functions installed from cpp.\nif (global.RN$Bridgeless !== true) {\n  /**\n   * Set up timers.\n   * You can use this module directly, or just require InitializeCore.\n   */\n  const defineLazyTimer = (\n    name:\n      | $TEMPORARY$string<'cancelAnimationFrame'>\n      | $TEMPORARY$string<'cancelIdleCallback'>\n      | $TEMPORARY$string<'clearInterval'>\n      | $TEMPORARY$string<'clearTimeout'>\n      | $TEMPORARY$string<'requestAnimationFrame'>\n      | $TEMPORARY$string<'requestIdleCallback'>\n      | $TEMPORARY$string<'setInterval'>\n      | $TEMPORARY$string<'setTimeout'>,\n  ) => {\n    polyfillGlobal(name, () => require('./Timers/JSTimers')[name]);\n  };\n  defineLazyTimer('setTimeout');\n  defineLazyTimer('clearTimeout');\n  defineLazyTimer('setInterval');\n  defineLazyTimer('clearInterval');\n  defineLazyTimer('requestAnimationFrame');\n  defineLazyTimer('cancelAnimationFrame');\n  defineLazyTimer('requestIdleCallback');\n  defineLazyTimer('cancelIdleCallback');\n}\n\n/**\n * Set up immediate APIs, which is required to use the same microtask queue\n * as the Promise.\n */\nif (hasPromiseQueuedToJSVM) {\n  // When promise queues to the JSVM microtasks queue, we shim the immediate\n  // APIs via `queueMicrotask` to maintain the backward compatibility.\n  polyfillGlobal(\n    'setImmediate',\n    () => require('./Timers/immediateShim').setImmediate,\n  );\n  polyfillGlobal(\n    'clearImmediate',\n    () => require('./Timers/immediateShim').clearImmediate,\n  );\n} else {\n  // When promise was polyfilled hence is queued to the RN microtask queue,\n  // we polyfill the immediate APIs as aliases to the ReactNativeMicrotask APIs.\n  // Note that in bridgeless mode, immediate APIs are installed from cpp.\n  if (global.RN$Bridgeless !== true) {\n    polyfillGlobal(\n      'setImmediate',\n      () => require('./Timers/JSTimers').queueReactNativeMicrotask,\n    );\n    polyfillGlobal(\n      'clearImmediate',\n      () => require('./Timers/JSTimers').clearReactNativeMicrotask,\n    );\n  }\n}\n\n/**\n * Set up the microtask queueing API, which is required to use the same\n * microtask queue as the Promise.\n */\nif (hasHermesPromiseQueuedToJSVM) {\n  // Fast path for Hermes.\n  polyfillGlobal('queueMicrotask', () => global.HermesInternal?.enqueueJob);\n} else {\n  // Polyfill it with promise (regardless it's polyfilled or native) otherwise.\n  polyfillGlobal(\n    'queueMicrotask',\n    () => require('./Timers/queueMicrotask.js').default,\n  );\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\n/**\n * Set up XMLHttpRequest. The native XMLHttpRequest in Chrome dev tools is CORS\n * aware and won't let you fetch anything from the internet.\n *\n * You can use this module directly, or just require InitializeCore.\n */\npolyfillGlobal('XMLHttpRequest', () => require('../Network/XMLHttpRequest'));\npolyfillGlobal('FormData', () => require('../Network/FormData'));\n\npolyfillGlobal('fetch', () => require('../Network/fetch').fetch);\npolyfillGlobal('Headers', () => require('../Network/fetch').Headers);\npolyfillGlobal('Request', () => require('../Network/fetch').Request);\npolyfillGlobal('Response', () => require('../Network/fetch').Response);\npolyfillGlobal('WebSocket', () => require('../WebSocket/WebSocket'));\npolyfillGlobal('Blob', () => require('../Blob/Blob'));\npolyfillGlobal('File', () => require('../Blob/File'));\npolyfillGlobal('FileReader', () => require('../Blob/FileReader'));\npolyfillGlobal('URL', () => require('../Blob/URL').URL); // flowlint-line untyped-import:off\npolyfillGlobal('URLSearchParams', () => require('../Blob/URL').URLSearchParams); // flowlint-line untyped-import:off\npolyfillGlobal(\n  'AbortController',\n  () => require('abort-controller/dist/abort-controller').AbortController, // flowlint-line untyped-import:off\n);\npolyfillGlobal(\n  'AbortSignal',\n  () => require('abort-controller/dist/abort-controller').AbortSignal, // flowlint-line untyped-import:off\n);\n"],"names":["_NativeExceptionsManager","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_interopRequireWildcard","require","WeakMap","keys","forEach","key","prototype","_exportNames","exports","enumerable","NativeExceptionsManager","RawEventEmitter","_interopRequireDefault","EventEmitter","_ExceptionsManager","ReactFiberErrorDialog","showErrorDialog","_ref","error","componentStack","errorValue","Error","SyntheticError","isComponentError","_unused","handleException","_NativeSegmentFetcher","NativeSegmentFetcher","_NativeTiming","BatchedBridge","invariant","FRAME_DURATION","callbacks","types","timerIDs","reactNativeMicrotasks","requestIdleCallbacks","requestIdleCallbackTimeouts","GUID","errors","hasEmittedTimeDriftWarning","_allocateCallback","func","type","id","freeIndex","indexOf","length","_getFreeIndex","_callTimer","timerID","frameTime","didTimeout","console","warn","timerIndex","callback","__DEV__","_clearIndex","global","performance","now","timeRemaining","Math","max","push","_callReactNativeMicrotasksPass","passReactNativeMicrotasks","_freeCallback","index","NativeTiming","deleteTimer","ExportedJSTimers","JSTimers","setTimeout","duration","_len","arguments","args","Array","_key","apply","undefined","createTimer","Date","setInterval","_len2","_key2","queueReactNativeMicrotask","_len3","_key3","requestAnimationFrame","requestIdleCallback","options","setSendIdleEvents","timeout","deadline","timeoutId","clearTimeout","splice","cancelIdleCallback","clearInterval","clearReactNativeMicrotask","cancelAnimationFrame","callTimers","timersToCall","errorCount","ii","bind","callIdleCallbacks","passIdleCallbacks","callReactNativeMicrotasks","emitTimeDriftWarning","warningMessage","callbackID","jsSchedulingTime","repeats","sendIdleEvents","setReactNativeMicrotasksCallback","module","GUIID","clearedImmediates","Set","immediateShim","setImmediate","TypeError","delete","queueMicrotask","clearImmediate","immediateID","add","resolvedPromise","Promise","resolve","then","catch","_global","_global$HermesInterna","polyfillGlobal","HermesInternal","hasPromise","registerCallableModule","RN$Bridgeless","name","moduleOrFactory","RN$registerCallableModule","registerLazyCallableModule","alert","text","registerModule","moduleName","factory","ExceptionsManager","installConsoleErrorReporter","__fbDisableExceptionsManager","setGlobalHandler","isFatal","ee","log","message","window","self","process","env","NODE_ENV","polyfillObjectProperty","navigator","product","_NativePerformance","_Performance","NativePerformance","Performance","nativePerformanceNow","hasNativeGenerator","hasNativeConstructor","regeneratorRuntime","__fetchSegment","segmentId","fetchSegment","errorObject","code","_global$HermesInterna2","isNativeFunction","hasHermesPromiseQueuedToJSVM","useEngineQueue","hasPromiseQueuedToJSVM","defineLazyTimer","_global$HermesInterna3","enqueueJob"],"sourceRoot":""}