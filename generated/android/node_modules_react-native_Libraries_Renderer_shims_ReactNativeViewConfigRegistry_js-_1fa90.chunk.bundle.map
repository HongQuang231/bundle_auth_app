{"version":3,"file":"node_modules_react-native_Libraries_Renderer_shims_ReactNativeViewConfigRegistry_js-_1fa90.chunk.bundle","mappings":"oWAYa,IAAAA,EAAAC,EAAA,OAAAC,OAAAA,eAAAA,EAAAA,aAAAA,CAAAC,OAAA,IAAAC,EAAAA,uBAAAA,EAAAA,8BAAA,EAAAA,EAAAA,IAmFN,SAAaC,GAClB,IAAIC,EACJ,GAAKC,EAAYC,IAAIH,GAsBnBC,EAAaC,EAAYE,IAAIJ,OAtBH,CAC1B,IAAMK,EAAWC,EAAoBF,IAAIJ,GACjB,mBAAbK,IACT,EAAAE,EAAAA,UACE,EACA,uFACAP,EACa,OAAbK,EAAoB,cAAgBA,EAEjB,iBAAZL,EAAK,IAAmB,QAAQQ,KAAKR,EAAK,IAC7C,6DACA,IAxEZ,SAA2BC,GACzB,IAAOQ,EAAwCR,EAAxCQ,mBAAoBC,EAAoBT,EAApBS,iBAEvBC,EAYJ,GAA0B,MAAtBF,EACF,IAAK,IAAMG,KAAgBH,EACqB,MAA1CI,EAAyBD,KAC3BC,EAAyBD,GACvBH,EAAmBG,IAK3B,GAAwB,MAApBF,EACF,IAAK,IAAME,KAAgBF,EACmB,MAAxCI,EAAuBF,KACzBE,EAAuBF,GAAgBF,EAAiBE,GAIhE,CA6CIG,CADAd,EAAaI,KAEbH,EAAYc,IAAIhB,EAAMC,GAItBK,EAAoBU,IAAIhB,EAAM,KAChC,CAIA,OADA,EAAAO,EAAAA,SAAUN,EAAY,oCAAqCD,GACpDC,CACT,EA/GaF,EAAAA,SA8DN,SAAkBC,EAAcK,GAarC,OAZA,EAAAE,EAAAA,UACGD,EAAoBH,IAAIH,GACzB,oDACAA,IAEF,EAAAO,EAAAA,SACsB,mBAAbF,EACP,oFACAL,EACa,OAAbK,EAAoB,cAAgBA,GAEtCC,EAAoBU,IAAIhB,EAAMK,GACvBL,CACT,EAzEA,IAAAiB,EAAAtB,EAAAC,EAAA,QAGaiB,EAQZd,EAAAA,yBAAG,CAAC,EACQe,EAIZf,EAAAA,uBAAG,CAAC,EAECO,EAAsB,IAAIY,IAC1BhB,EAAc,IAAIgB,G,iCCcxBC,EAAOpB,QA5BS,SAASqB,EAAWC,EAAQC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GAOzD,IAAKP,EAAW,CACd,IAAIQ,EACJ,QAAeC,IAAXR,EACFO,EAAQ,IAAIE,MACV,qIAGG,CACL,IAAIC,EAAO,CAACT,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACvBK,EAAW,GACfJ,EAAQ,IAAIE,MACVT,EAAOY,QAAQ,OAAO,WAAa,OAAOF,EAAKC,IAAa,MAExDhC,KAAO,qBACf,CAGA,MADA4B,EAAMM,YAAc,EACdN,CACR,CACF,C,oBCzCAT,EAAOpB,QALP,SAAgC2B,GAC9B,OAAOA,GAAKA,EAAES,WAAaT,EAAI,CAC7B,QAAWA,EAEf,EACyCP,EAAOpB,QAAQoC,YAAa,EAAMhB,EAAOpB,QAAiB,QAAIoB,EAAOpB,O","sources":["webpack:///./node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js","webpack:///./node_modules/invariant/browser.js","webpack:///./node_modules/@babel/runtime/helpers/interopRequireDefault.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noformat\n * @flow strict-local\n * @nolint\n * @generated SignedSource<<73af5b3fe29d226634ed64bc861634df>>\n */\n\n'use strict';\n\nimport {type ViewConfig} from './ReactNativeTypes';\nimport invariant from 'invariant';\n\n// Event configs\nexport const customBubblingEventTypes: {\n  [eventName: string]: $ReadOnly<{\n    phasedRegistrationNames: $ReadOnly<{\n      captured: string,\n      bubbled: string,\n      skipBubbling?: ?boolean,\n    }>,\n  }>,\n} = {};\nexport const customDirectEventTypes: {\n  [eventName: string]: $ReadOnly<{\n    registrationName: string,\n  }>,\n} = {};\n\nconst viewConfigCallbacks = new Map<string, ?() => ViewConfig>();\nconst viewConfigs = new Map<string, ViewConfig>();\n\nfunction processEventTypes(viewConfig: ViewConfig): void {\n  const {bubblingEventTypes, directEventTypes} = viewConfig;\n\n  if (__DEV__) {\n    if (bubblingEventTypes != null && directEventTypes != null) {\n      for (const topLevelType in directEventTypes) {\n        invariant(\n          bubblingEventTypes[topLevelType] == null,\n          'Event cannot be both direct and bubbling: %s',\n          topLevelType,\n        );\n      }\n    }\n  }\n\n  if (bubblingEventTypes != null) {\n    for (const topLevelType in bubblingEventTypes) {\n      if (customBubblingEventTypes[topLevelType] == null) {\n        customBubblingEventTypes[topLevelType] =\n          bubblingEventTypes[topLevelType];\n      }\n    }\n  }\n\n  if (directEventTypes != null) {\n    for (const topLevelType in directEventTypes) {\n      if (customDirectEventTypes[topLevelType] == null) {\n        customDirectEventTypes[topLevelType] = directEventTypes[topLevelType];\n      }\n    }\n  }\n}\n\n/**\n * Registers a native view/component by name.\n * A callback is provided to load the view config from UIManager.\n * The callback is deferred until the view is actually rendered.\n */\nexport function register(name: string, callback: () => ViewConfig): string {\n  invariant(\n    !viewConfigCallbacks.has(name),\n    'Tried to register two views with the same name %s',\n    name,\n  );\n  invariant(\n    typeof callback === 'function',\n    'View config getter callback for component `%s` must be a function (received `%s`)',\n    name,\n    callback === null ? 'null' : typeof callback,\n  );\n  viewConfigCallbacks.set(name, callback);\n  return name;\n}\n\n/**\n * Retrieves a config for the specified view.\n * If this is the first time the view has been used,\n * This configuration will be lazy-loaded from UIManager.\n */\nexport function get(name: string): ViewConfig {\n  let viewConfig;\n  if (!viewConfigs.has(name)) {\n    const callback = viewConfigCallbacks.get(name);\n    if (typeof callback !== 'function') {\n      invariant(\n        false,\n        'View config getter callback for component `%s` must be a function (received `%s`).%s',\n        name,\n        callback === null ? 'null' : typeof callback,\n        // $FlowFixMe[recursive-definition]\n        typeof name[0] === 'string' && /[a-z]/.test(name[0])\n          ? ' Make sure to start component names with a capital letter.'\n          : '',\n      );\n    }\n    viewConfig = callback();\n    processEventTypes(viewConfig);\n    viewConfigs.set(name, viewConfig);\n\n    // Clear the callback after the config is set so that\n    // we don't mask any errors during registration.\n    viewConfigCallbacks.set(name, null);\n  } else {\n    viewConfig = viewConfigs.get(name);\n  }\n  invariant(viewConfig, 'View config not found for name %s', name);\n  return viewConfig;\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["_interopRequireDefault","require","Object","value","exports","name","viewConfig","viewConfigs","has","get","callback","viewConfigCallbacks","invariant","test","bubblingEventTypes","directEventTypes","__DEV__","topLevelType","customBubblingEventTypes","customDirectEventTypes","processEventTypes","set","_invariant","Map","module","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","framesToPop","__esModule"],"sourceRoot":""}