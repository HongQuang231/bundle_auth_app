{"version":3,"file":"node_modules_react-native-community_blur_src_index_tsx-_ae821.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/@react-native-community/blur/src/components/BlurView.android.tsx","webpack:///./node_modules/@react-native-community/blur/src/components/VibrancyView.android.tsx","webpack:///./node_modules/@react-native-community/blur/src/fabric/BlurViewNativeComponentAndroid.ts","webpack:///./node_modules/@react-native-community/blur/src/index.tsx"],"sourcesContent":["import React, { forwardRef, useEffect } from 'react';\nimport {\n  View,\n  DeviceEventEmitter,\n  StyleSheet,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport NativeBlurView from '../fabric/BlurViewNativeComponentAndroid';\n\nconst OVERLAY_COLORS = {\n  light: 'rgba(255, 255, 255, 0.2)',\n  xlight: 'rgba(255, 255, 255, 0.75)',\n  dark: 'rgba(16, 12, 12, 0.64)',\n};\n\nexport type BlurViewProps = ViewProps & {\n  blurAmount?: number;\n  blurType?: 'dark' | 'light' | 'xlight';\n  blurRadius?: number;\n  downsampleFactor?: number;\n  overlayColor?: string;\n  enabled?: boolean;\n  autoUpdate?: boolean;\n};\n\nconst BlurView = forwardRef<View, BlurViewProps>(\n  (\n    {\n      downsampleFactor,\n      blurRadius,\n      blurAmount = 10,\n      blurType = 'dark',\n      overlayColor,\n      enabled,\n      autoUpdate,\n      children,\n      style,\n      ...rest\n    },\n    ref\n  ) => {\n    useEffect(() => {\n      DeviceEventEmitter.addListener('ReactNativeBlurError', (message) => {\n        throw new Error(`[ReactNativeBlur]: ${message}`);\n      });\n\n      return () => {\n        DeviceEventEmitter.removeAllListeners('ReactNativeBlurError');\n      };\n    }, []);\n\n    const getOverlayColor = () => {\n      if (overlayColor != null) {\n        return overlayColor;\n      }\n\n      return OVERLAY_COLORS[blurType] || OVERLAY_COLORS.dark;\n    };\n\n    const getBlurRadius = () => {\n      if (blurRadius != null) {\n        if (blurRadius > 25) {\n          throw new Error(\n            `[ReactNativeBlur]: blurRadius cannot be greater than 25! (was: ${blurRadius})`\n          );\n        }\n        return blurRadius;\n      }\n\n      // iOS seems to use a slightly different blurring algorithm (or scale?).\n      // Android blurRadius + downsampleFactor is approximately 80% of blurAmount.\n      const equivalentBlurRadius = Math.round(blurAmount * 0.8);\n\n      if (equivalentBlurRadius > 25) {\n        return 25;\n      }\n      return equivalentBlurRadius;\n    };\n\n    const getDownsampleFactor = () => {\n      if (downsampleFactor != null) {\n        return downsampleFactor;\n      }\n\n      return blurRadius;\n    };\n\n    return (\n      <NativeBlurView\n        {...rest}\n        ref={ref}\n        blurRadius={getBlurRadius()}\n        downsampleFactor={getDownsampleFactor()}\n        overlayColor={getOverlayColor()}\n        blurAmount={blurAmount}\n        blurType={blurType}\n        enabled={enabled}\n        autoUpdate={autoUpdate}\n        pointerEvents=\"none\"\n        style={StyleSheet.compose(styles.transparent, style)}\n      >\n        {children}\n      </NativeBlurView>\n    );\n  }\n);\n\nconst styles = StyleSheet.create<{ transparent: ViewStyle }>({\n  transparent: { backgroundColor: 'transparent' },\n});\n\nexport default BlurView;\n","import React from 'react';\n\nclass VibrancyView extends React.Component {\n  render() {\n    console.error('VibrancyView is not implemented on Android');\n    return null;\n  }\n}\n\nexport default VibrancyView;\n","import codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport type { ViewProps, HostComponent, ColorValue } from 'react-native';\nimport type {\n  WithDefault,\n  Int32,\n} from 'react-native/Libraries/Types/CodegenTypes';\n\ninterface NativeProps extends ViewProps {\n  blurAmount?: WithDefault<Int32, 10>;\n  blurType?: WithDefault<'dark' | 'light' | 'xlight', 'dark'>;\n  blurRadius?: Int32;\n  downsampleFactor?: Int32;\n  overlayColor?: ColorValue;\n  enabled?: boolean;\n  autoUpdate?: boolean;\n}\n\nexport default codegenNativeComponent<NativeProps>('AndroidBlurView', {\n  excludedPlatforms: ['iOS'],\n}) as HostComponent<NativeProps>;\n","import BlurViewUntyped from './components/BlurView';\nimport VibrancyViewUntyped from './components/VibrancyView';\nimport type { View } from 'react-native'\n\nimport type { BlurViewProps as BlurViewPropsIOS } from './components/BlurView.ios';\nimport type { BlurViewProps as BlurViewPropsAndroid } from './components/BlurView.android';\nimport type { VibrancyViewProps as VibrancyViewPropsIOS } from './components/VibrancyView.ios';\n\ntype BlurViewProps = BlurViewPropsIOS | BlurViewPropsAndroid;\ntype VibrancyViewProps = VibrancyViewPropsIOS;\n\nconst BlurView = BlurViewUntyped as React.ForwardRefExoticComponent<BlurViewProps & React.RefAttributes<View>>\nconst VibrancyView = VibrancyViewUntyped as React.ForwardRefExoticComponent<VibrancyViewProps & React.RefAttributes<View>>\n\nexport { BlurView, VibrancyView };\nexport type { BlurViewProps, VibrancyViewProps };"],"names":["_react","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","require","_reactNative","_BlurViewNativeComponentAndroid","_interopRequireDefault","_jsxRuntime","_excluded","WeakMap","OVERLAY_COLORS","light","xlight","dark","BlurView","forwardRef","_ref","ref","downsampleFactor","blurRadius","_ref$blurAmount","blurAmount","_ref$blurType","blurType","overlayColor","enabled","autoUpdate","children","style","rest","_objectWithoutProperties2","useEffect","DeviceEventEmitter","addListener","message","Error","removeAllListeners","jsx","assign","equivalentBlurRadius","Math","round","getBlurRadius","pointerEvents","StyleSheet","compose","styles","transparent","create","backgroundColor","exports","_callSuper","o","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","valueOf","VibrancyView","_React$Component","_classCallCheck2","arguments","_inherits2","_createClass2","key","value","console","error","React","Component","NativeComponentRegistry","__INTERNAL_VIEW_CONFIG","uiViewClassName","validAttributes","process","_BlurView","_VibrancyView","BlurViewUntyped","VibrancyViewUntyped"],"sourceRoot":""}